FrT;@1|>>0|$15|HeaderDoc::Test%26|$4|CODE$7|COMMENT$7|CPPCODE$15|EXPECTED_RESULT$23|EXPECTED_RESULT_ALLDECS$7|FAILMSG$8|FILENAME$4|LANG$4|NAME$6|RESULT$14|RESULT_ALLDECS$7|SUBLANG$4|TYPE$581|typedef struct _someOtherTag {
    IUNKNOWN_C_GUTS;
    short firstField;

    struct {
        TEST;
        int a;
        char *b;
        void *c;
        IOReturn (*massagePointers)(void *cmd,
                            IOVirtualRange *sgList);
    } nestedStruct;

    /* Set the data pointers */
    IOReturn (*setPointers)(void *cmd,
        IOVirtualRange *sgList);
    void (*getPointers)(void *cmd, IOVirtualRange **outSGList, int *outSGEntries, UInt32 *outTransferCount, Boolean *outIsWrite);
    
    unsigned long lastField;
} TypedefdStructWithCallbacksAndStructs;
$2424|/*! @typedef TypedefdStructWithCallbacksAndStructs
    @abstract Abstract for this API.
    @discussion This is completely bogus.
        
    @field firstField Description of first field.
    @callback setPointers Specifies the location of the data buffer for an I/O command,
    as well as the maximum data transfer count and data transfer direction.
    
    The setPointers function has the following parameters:
    @param cmd A pointer to the CDB command interface instance for the current command.
    You must always pass this reference.
    
    @param sgList A pointer to a scatter/gather list (scatter for reading, gather for writing)
    containing one or more records that specify the ranges of virtual memory in the command's
    I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
    allowing you to group multiple buffers of any size into a single virtual buffer for an
    I/O transaction. You can pass NULL for this parameter (for a command that doesn't require
    a data buffer).
    
    @result An IOReturn structure which returns the return value in the structure returned.
    
    @callback getPointers Gets the location of the data buffer for an I/O command. The buffer
    can be in one or more, possibly discontiguous, locations.
    
    The getPointers function has the following parameters:
    @param cmd A pointer to the CDB command interface instance for the current command.
    You must always pass this reference.
    
    @param outSGList A pointer to a pointer to a scatter/gather list (scatter for reading, gather for writing)
    containing one or more records that specify the ranges of virtual memory in the command's
    I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
    allowing you to group multiple buffers of any size into a single virtual buffer for an
    I/O transaction. On return, the list specifies the I/O buffer for the command.
    
    @param outSGEntries On return, specifies the number of records in the scatter/gather list pointed to
    by the outSGList parameter.
    
    @param outTransferCount On return, the maximum data transfer count in bytes for the
    command.
    
    @param outIsWrite On return, specifies whether the command is a write command (true),
    or a read command (false)
    
    @field lastField Description of the struct's last field.
*/
$0|$65573|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 0
inInterface: 0
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 1
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 0
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/typedef_7.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{FULLPATH} => /test_suite_bogus_path/typedef_7.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => struct
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 1
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => 
$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 0
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inEnum} => 0
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{inTypedef} => 1
$parserState->{inUnion} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 20
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => C
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => TypedefdStructWithCallbacksAndStructs;
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => _someOtherTag
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 3
$parserState->{onlyComments} => 0
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 1
$parserState->{posstypes} =>  typedef struct
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{returntype} =>  typedef struct _someOtherTag {
     
$parserState->{seenBraces} => 0
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => 
$parserState->{sodname} => 
$parserState->{sodtype} => 
$parserState->{stackFrozen} => 0
$parserState->{startOfDec} => 1
$parserState->{temponlyComments} => 0
$parserState->{treePopTwo} => 0
$parserState->{typestring} => typedef
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 20
typelist: typedef struct
namelist: TypedefdStructWithCallbacksAndStructs,_someOtherTag
posstypes:  typedef struct
value: 
returntype:  typedef struct _someOtherTag {     
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 0
conformsToList: 
functionContents: 
extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => IUNKNOWN_C_GUTS
Parsed Param 1 => short firstField
Parsed Param 2 => struct 
        TEST
Parsed Param 3 => int a
Parsed Param 4 => char *b
Parsed Param 5 => void *c
Parsed Param 6 => IOReturn (*massagePointers)(void *cmd,
                            IOVirtualRange *sgList)
Parsed Param 7 => nestedStruct
Parsed Param 8 => IOReturn (*setPointers)(void *cmd,
        IOVirtualRange *sgList)
Parsed Param 9 => void (*getPointers)(void *cmd, IOVirtualRange **outSGList, int *outSGEntries, UInt32 *outTransferCount, Boolean *outIsWrite)
Parsed Param 10 => unsigned long lastField
-=: DUMP OF PARSE TREE :=-
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: typedef 7
APIUID: //test_ref/doc/header/typedef_7.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: <p></p>
LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Typedef
    NAME: TypedefdStructWithCallbacksAndStructs
    APIUID: //test_ref/c/tdef/TypedefdStructWithCallbacksAndStructs
    ABSTRACT: "<p>Abstract for this API.
"
    DISCUSSION: "<p>This is completely bogus.
</p>
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Typedef"
    MASTERENUM: "0"
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: <b>See Also:</b><div class='list_indent'><dl>
<dt><!-- a logicalPath="//test_ref/c/tag/_someOtherTag" --><p>_someOtherTag<!-- /a --></dt><dd></dd></dl></div>

    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: IUNKNOWN_C_GUTS
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: short
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: TEST
        TYPE: struct
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: a
        TYPE: int
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: b
        TYPE: char *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: c
        TYPE: void *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: massagePointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: nestedStruct
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: void
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: lastField
        TYPE: unsigned long
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    FIELDS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Specifies the location of the data buffer for an I/O command,
as well as the maximum data transfer count and data transfer direction.
</p>
<p>The setPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            sgList	=>	A pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. You can pass NULL for this parameter (for a command that doesn't require
a data buffer).
        END USER DICTIONARY
        USER DICTIONARY:
            Result	=>	An IOReturn structure which returns the return value in the structure returned.
        END USER DICTIONARY
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Gets the location of the data buffer for an I/O command. The buffer
can be in one or more, possibly discontiguous, locations.
</p>
<p>The getPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGList	=>	A pointer to a pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. On return, the list specifies the I/O buffer for the command.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGEntries	=>	On return, specifies the number of records in the scatter/gather list pointed to
by the outSGList parameter.
        END USER DICTIONARY
        USER DICTIONARY:
            outTransferCount	=>	On return, the maximum data transfer count in bytes for the
command.
        END USER DICTIONARY
        USER DICTIONARY:
            outIsWrite	=>	On return, specifies whether the command is a write command (true),
or a read command (false)
        END USER DICTIONARY
        USER DICTIONARY:
            lastField	=>	Description of the struct's last field.
        END USER DICTIONARY
    TAGGED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Description of first field."
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Struct
    NAME: _someOtherTag
    APIUID: //test_ref/c/tag/_someOtherTag
    ABSTRACT: "<p>Abstract for this API.
"
    DISCUSSION: "<p>This is completely bogus.
</p>
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Struct"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: <b>See Also:</b><div class='list_indent'><dl>
<dt><!-- a logicalPath="//test_ref/c/tdef/TypedefdStructWithCallbacksAndStructs" --><p>TypedefdStructWithCallbacksAndStructs<!-- /a --></dt><dd></dd></dl></div>

    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: IUNKNOWN_C_GUTS
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: short
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: TEST
        TYPE: struct
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: a
        TYPE: int
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: b
        TYPE: char *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: c
        TYPE: void *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: massagePointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: nestedStruct
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: void
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: lastField
        TYPE: unsigned long
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    FIELDS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Specifies the location of the data buffer for an I/O command,
as well as the maximum data transfer count and data transfer direction.
</p>
<p>The setPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            sgList	=>	A pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. You can pass NULL for this parameter (for a command that doesn't require
a data buffer).
        END USER DICTIONARY
        USER DICTIONARY:
            Result	=>	An IOReturn structure which returns the return value in the structure returned.
        END USER DICTIONARY
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Gets the location of the data buffer for an I/O command. The buffer
can be in one or more, possibly discontiguous, locations.
</p>
<p>The getPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGList	=>	A pointer to a pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. On return, the list specifies the I/O buffer for the command.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGEntries	=>	On return, specifies the number of records in the scatter/gather list pointed to
by the outSGList parameter.
        END USER DICTIONARY
        USER DICTIONARY:
            outTransferCount	=>	On return, the maximum data transfer count in bytes for the
command.
        END USER DICTIONARY
        USER DICTIONARY:
            outIsWrite	=>	On return, specifies whether the command is a write command (true),
or a read command (false)
        END USER DICTIONARY
        USER DICTIONARY:
            lastField	=>	Description of the struct's last field.
        END USER DICTIONARY
    TAGGED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Description of first field."
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: _someOtherTag (HeaderDoc::Struct)
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: _someOtherTag (HeaderDoc::Struct)
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: _someOtherTag (HeaderDoc::Struct)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/_someOtherTag //test_ref/c/tdef/_someOtherTag //test_ref/c/tag/_someOtherTag //test_ref/c/econst/_someOtherTag //test_ref/c/struct/_someOtherTag //test_ref/c/clconst/_someOtherTag //test_ref/c/intf/_someOtherTag" --><span class="type">_someOtherTag</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->; 
	    <!-- a logicalPath="//test_ref/c/cl/short //test_ref/c/tdef/short //test_ref/c/tag/short //test_ref/c/econst/short //test_ref/c/struct/short //test_ref/c/clconst/short //test_ref/c/intf/short" --><span class="type">short</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/firstField //test_ref/c/data/firstField" --><span class="var">firstField</span><!-- /a -->;  
	    <span class="keyword">struct</span> { 
	        <!-- a logicalPath="//test_ref/c/econst/TEST //test_ref/c/data/TEST" --><span class="var">TEST</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/a //test_ref/c/data/a" --><span class="var">a</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/econst/char //test_ref/c/struct/char //test_ref/c/clconst/char //test_ref/c/intf/char" --><span class="type">char</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/b //test_ref/c/data/b" --><span class="var">b</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/c //test_ref/c/data/c" --><span class="var">c</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/massagePointers //test_ref/c/clm/massagePointers //test_ref/c/intfcm/massagePointers //test_ref/c/intfm/massagePointers //test_ref/c/func/massagePointers //test_ref/c/ftmplt/massagePointers //test_ref/c/defn/massagePointers //test_ref/c/macro/massagePointers" --><span class="function">massagePointers</span><!-- /a -->)(
	            <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	            <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	        } <!-- a logicalPath="//test_ref/c/econst/nestedStruct //test_ref/c/data/nestedStruct" --><span class="var">nestedStruct</span><!-- /a -->;  
	    <span class="comment">/* Set the data pointers */</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/setPointers //test_ref/c/clm/setPointers //test_ref/c/intfcm/setPointers //test_ref/c/intfm/setPointers //test_ref/c/func/setPointers //test_ref/c/ftmplt/setPointers //test_ref/c/defn/setPointers //test_ref/c/macro/setPointers" --><span class="function">setPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/getPointers //test_ref/c/clm/getPointers //test_ref/c/intfcm/getPointers //test_ref/c/intfm/getPointers //test_ref/c/func/getPointers //test_ref/c/ftmplt/getPointers //test_ref/c/defn/getPointers //test_ref/c/macro/getPointers" --><span class="function">getPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="type">*</span><span class="param">outSGList</span>,
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <span class="type">*</span><span class="param">outSGEntries</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/econst/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/clconst/UInt32 //test_ref/c/intf/UInt32" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outTransferCount</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/econst/Boolean //test_ref/c/struct/Boolean //test_ref/c/clconst/Boolean //test_ref/c/intf/Boolean" --><span class="type">Boolean</span><!-- /a --> <span class="type">*</span><span class="param">outIsWrite</span>);  
	    <span class="keyword">unsigned</span> <!-- a logicalPath="//test_ref/c/cl/long //test_ref/c/tdef/long //test_ref/c/tag/long //test_ref/c/econst/long //test_ref/c/struct/long //test_ref/c/clconst/long //test_ref/c/intf/long" --><span class="type">long</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/lastField //test_ref/c/data/lastField" --><span class="var">lastField</span><!-- /a -->; 
	} <!-- a logicalPath="//test_ref/c/econst/TypedefdStructWithCallbacksAndStructs //test_ref/c/data/TypedefdStructWithCallbacksAndStructs" --><span class="var">TypedefdStructWithCallbacksAndStructs</span><!-- /a -->;  
END OF OBJECT


OBJECT: _someOtherTag (HeaderDoc::Struct)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/_someOtherTag //test_ref/c/tdef/_someOtherTag //test_ref/c/tag/_someOtherTag //test_ref/c/econst/_someOtherTag //test_ref/c/struct/_someOtherTag //test_ref/c/clconst/_someOtherTag //test_ref/c/intf/_someOtherTag" --><span class="type">_someOtherTag</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->; 
	    <!-- a logicalPath="//test_ref/c/cl/short //test_ref/c/tdef/short //test_ref/c/tag/short //test_ref/c/econst/short //test_ref/c/struct/short //test_ref/c/clconst/short //test_ref/c/intf/short" --><span class="type">short</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/firstField //test_ref/c/data/firstField" --><span class="var">firstField</span><!-- /a -->;  
	    <span class="keyword">struct</span> { 
	        <!-- a logicalPath="//test_ref/c/econst/TEST //test_ref/c/data/TEST" --><span class="var">TEST</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/a //test_ref/c/data/a" --><span class="var">a</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/econst/char //test_ref/c/struct/char //test_ref/c/clconst/char //test_ref/c/intf/char" --><span class="type">char</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/b //test_ref/c/data/b" --><span class="var">b</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/c //test_ref/c/data/c" --><span class="var">c</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/massagePointers //test_ref/c/clm/massagePointers //test_ref/c/intfcm/massagePointers //test_ref/c/intfm/massagePointers //test_ref/c/func/massagePointers //test_ref/c/ftmplt/massagePointers //test_ref/c/defn/massagePointers //test_ref/c/macro/massagePointers" --><span class="function">massagePointers</span><!-- /a -->)(
	            <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	            <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	        } <!-- a logicalPath="//test_ref/c/econst/nestedStruct //test_ref/c/data/nestedStruct" --><span class="var">nestedStruct</span><!-- /a -->;  
	    <span class="comment">/* Set the data pointers */</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/setPointers //test_ref/c/clm/setPointers //test_ref/c/intfcm/setPointers //test_ref/c/intfm/setPointers //test_ref/c/func/setPointers //test_ref/c/ftmplt/setPointers //test_ref/c/defn/setPointers //test_ref/c/macro/setPointers" --><span class="function">setPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/getPointers //test_ref/c/clm/getPointers //test_ref/c/intfcm/getPointers //test_ref/c/intfm/getPointers //test_ref/c/func/getPointers //test_ref/c/ftmplt/getPointers //test_ref/c/defn/getPointers //test_ref/c/macro/getPointers" --><span class="function">getPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="type">*</span><span class="param">outSGList</span>,
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <span class="type">*</span><span class="param">outSGEntries</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/econst/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/clconst/UInt32 //test_ref/c/intf/UInt32" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outTransferCount</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/econst/Boolean //test_ref/c/struct/Boolean //test_ref/c/clconst/Boolean //test_ref/c/intf/Boolean" --><span class="type">Boolean</span><!-- /a --> <span class="type">*</span><span class="param">outIsWrite</span>);  
	    <span class="keyword">unsigned</span> <!-- a logicalPath="//test_ref/c/cl/long //test_ref/c/tdef/long //test_ref/c/tag/long //test_ref/c/econst/long //test_ref/c/struct/long //test_ref/c/clconst/long //test_ref/c/intf/long" --><span class="type">long</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/lastField //test_ref/c/data/lastField" --><span class="var">lastField</span><!-- /a -->; 
	} <!-- a logicalPath="//test_ref/c/econst/TypedefdStructWithCallbacksAndStructs //test_ref/c/data/TypedefdStructWithCallbacksAndStructs" --><span class="var">TypedefdStructWithCallbacksAndStructs</span><!-- /a -->;  
END OF OBJECT



$65573|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 0
inInterface: 0
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 1
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 0
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/typedef_7.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{FULLPATH} => /test_suite_bogus_path/typedef_7.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => struct
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 1
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => 
$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 0
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inEnum} => 0
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{inTypedef} => 1
$parserState->{inUnion} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 20
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => C
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => TypedefdStructWithCallbacksAndStructs;
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => _someOtherTag
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 3
$parserState->{onlyComments} => 0
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 1
$parserState->{posstypes} =>  typedef struct
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{returntype} =>  typedef struct _someOtherTag {
     
$parserState->{seenBraces} => 0
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => 
$parserState->{sodname} => 
$parserState->{sodtype} => 
$parserState->{stackFrozen} => 0
$parserState->{startOfDec} => 1
$parserState->{temponlyComments} => 0
$parserState->{treePopTwo} => 0
$parserState->{typestring} => typedef
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 20
typelist: typedef struct
namelist: TypedefdStructWithCallbacksAndStructs,_someOtherTag
posstypes:  typedef struct
value: 
returntype:  typedef struct _someOtherTag {     
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 0
conformsToList: 
functionContents: 
extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => IUNKNOWN_C_GUTS
Parsed Param 1 => short firstField
Parsed Param 2 => struct 
        TEST
Parsed Param 3 => int a
Parsed Param 4 => char *b
Parsed Param 5 => void *c
Parsed Param 6 => IOReturn (*massagePointers)(void *cmd,
                            IOVirtualRange *sgList)
Parsed Param 7 => nestedStruct
Parsed Param 8 => IOReturn (*setPointers)(void *cmd,
        IOVirtualRange *sgList)
Parsed Param 9 => void (*getPointers)(void *cmd, IOVirtualRange **outSGList, int *outSGEntries, UInt32 *outTransferCount, Boolean *outIsWrite)
Parsed Param 10 => unsigned long lastField
-=: DUMP OF PARSE TREE :=-
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: typedef 7
APIUID: //test_ref/doc/header/typedef_7.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: <p></p>
LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Typedef
    NAME: TypedefdStructWithCallbacksAndStructs
    APIUID: //test_ref/c/tdef/TypedefdStructWithCallbacksAndStructs
    ABSTRACT: "<p>Abstract for this API.
"
    DISCUSSION: "<p>This is completely bogus.
</p>
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Typedef"
    MASTERENUM: "0"
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: <b>See Also:</b><div class='list_indent'><dl>
<dt><!-- a logicalPath="//test_ref/c/tag/_someOtherTag" --><p>_someOtherTag<!-- /a --></dt><dd></dd></dl></div>

    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: IUNKNOWN_C_GUTS
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: short
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: TEST
        TYPE: struct
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: a
        TYPE: int
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: b
        TYPE: char *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: c
        TYPE: void *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: massagePointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: nestedStruct
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: void
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: lastField
        TYPE: unsigned long
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    FIELDS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Specifies the location of the data buffer for an I/O command,
as well as the maximum data transfer count and data transfer direction.
</p>
<p>The setPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            sgList	=>	A pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. You can pass NULL for this parameter (for a command that doesn't require
a data buffer).
        END USER DICTIONARY
        USER DICTIONARY:
            Result	=>	An IOReturn structure which returns the return value in the structure returned.
        END USER DICTIONARY
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Gets the location of the data buffer for an I/O command. The buffer
can be in one or more, possibly discontiguous, locations.
</p>
<p>The getPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGList	=>	A pointer to a pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. On return, the list specifies the I/O buffer for the command.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGEntries	=>	On return, specifies the number of records in the scatter/gather list pointed to
by the outSGList parameter.
        END USER DICTIONARY
        USER DICTIONARY:
            outTransferCount	=>	On return, the maximum data transfer count in bytes for the
command.
        END USER DICTIONARY
        USER DICTIONARY:
            outIsWrite	=>	On return, specifies whether the command is a write command (true),
or a read command (false)
        END USER DICTIONARY
        USER DICTIONARY:
            lastField	=>	Description of the struct's last field.
        END USER DICTIONARY
    TAGGED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Description of first field."
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Struct
    NAME: _someOtherTag
    APIUID: //test_ref/c/tag/_someOtherTag
    ABSTRACT: "<p>Abstract for this API.
"
    DISCUSSION: "<p>This is completely bogus.
</p>
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Struct"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: <b>See Also:</b><div class='list_indent'><dl>
<dt><!-- a logicalPath="//test_ref/c/tdef/TypedefdStructWithCallbacksAndStructs" --><p>TypedefdStructWithCallbacksAndStructs<!-- /a --></dt><dd></dd></dl></div>

    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: IUNKNOWN_C_GUTS
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: short
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: TEST
        TYPE: struct
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: a
        TYPE: int
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: b
        TYPE: char *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: c
        TYPE: void *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: massagePointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: nestedStruct
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: void
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: lastField
        TYPE: unsigned long
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    FIELDS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Specifies the location of the data buffer for an I/O command,
as well as the maximum data transfer count and data transfer direction.
</p>
<p>The setPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            sgList	=>	A pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. You can pass NULL for this parameter (for a command that doesn't require
a data buffer).
        END USER DICTIONARY
        USER DICTIONARY:
            Result	=>	An IOReturn structure which returns the return value in the structure returned.
        END USER DICTIONARY
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Gets the location of the data buffer for an I/O command. The buffer
can be in one or more, possibly discontiguous, locations.
</p>
<p>The getPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGList	=>	A pointer to a pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. On return, the list specifies the I/O buffer for the command.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGEntries	=>	On return, specifies the number of records in the scatter/gather list pointed to
by the outSGList parameter.
        END USER DICTIONARY
        USER DICTIONARY:
            outTransferCount	=>	On return, the maximum data transfer count in bytes for the
command.
        END USER DICTIONARY
        USER DICTIONARY:
            outIsWrite	=>	On return, specifies whether the command is a write command (true),
or a read command (false)
        END USER DICTIONARY
        USER DICTIONARY:
            lastField	=>	Description of the struct's last field.
        END USER DICTIONARY
    TAGGED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Description of first field."
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: _someOtherTag (HeaderDoc::Struct)
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: _someOtherTag (HeaderDoc::Struct)
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: _someOtherTag (HeaderDoc::Struct)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/_someOtherTag //test_ref/c/tdef/_someOtherTag //test_ref/c/tag/_someOtherTag //test_ref/c/econst/_someOtherTag //test_ref/c/struct/_someOtherTag //test_ref/c/clconst/_someOtherTag //test_ref/c/intf/_someOtherTag" --><span class="type">_someOtherTag</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->; 
	    <!-- a logicalPath="//test_ref/c/cl/short //test_ref/c/tdef/short //test_ref/c/tag/short //test_ref/c/econst/short //test_ref/c/struct/short //test_ref/c/clconst/short //test_ref/c/intf/short" --><span class="type">short</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/firstField //test_ref/c/data/firstField" --><span class="var">firstField</span><!-- /a -->;  
	    <span class="keyword">struct</span> { 
	        <!-- a logicalPath="//test_ref/c/econst/TEST //test_ref/c/data/TEST" --><span class="var">TEST</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/a //test_ref/c/data/a" --><span class="var">a</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/econst/char //test_ref/c/struct/char //test_ref/c/clconst/char //test_ref/c/intf/char" --><span class="type">char</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/b //test_ref/c/data/b" --><span class="var">b</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/c //test_ref/c/data/c" --><span class="var">c</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/massagePointers //test_ref/c/clm/massagePointers //test_ref/c/intfcm/massagePointers //test_ref/c/intfm/massagePointers //test_ref/c/func/massagePointers //test_ref/c/ftmplt/massagePointers //test_ref/c/defn/massagePointers //test_ref/c/macro/massagePointers" --><span class="function">massagePointers</span><!-- /a -->)(
	            <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	            <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	        } <!-- a logicalPath="//test_ref/c/econst/nestedStruct //test_ref/c/data/nestedStruct" --><span class="var">nestedStruct</span><!-- /a -->;  
	    <span class="comment">/* Set the data pointers */</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/setPointers //test_ref/c/clm/setPointers //test_ref/c/intfcm/setPointers //test_ref/c/intfm/setPointers //test_ref/c/func/setPointers //test_ref/c/ftmplt/setPointers //test_ref/c/defn/setPointers //test_ref/c/macro/setPointers" --><span class="function">setPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/getPointers //test_ref/c/clm/getPointers //test_ref/c/intfcm/getPointers //test_ref/c/intfm/getPointers //test_ref/c/func/getPointers //test_ref/c/ftmplt/getPointers //test_ref/c/defn/getPointers //test_ref/c/macro/getPointers" --><span class="function">getPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="type">*</span><span class="param">outSGList</span>,
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <span class="type">*</span><span class="param">outSGEntries</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/econst/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/clconst/UInt32 //test_ref/c/intf/UInt32" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outTransferCount</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/econst/Boolean //test_ref/c/struct/Boolean //test_ref/c/clconst/Boolean //test_ref/c/intf/Boolean" --><span class="type">Boolean</span><!-- /a --> <span class="type">*</span><span class="param">outIsWrite</span>);  
	    <span class="keyword">unsigned</span> <!-- a logicalPath="//test_ref/c/cl/long //test_ref/c/tdef/long //test_ref/c/tag/long //test_ref/c/econst/long //test_ref/c/struct/long //test_ref/c/clconst/long //test_ref/c/intf/long" --><span class="type">long</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/lastField //test_ref/c/data/lastField" --><span class="var">lastField</span><!-- /a -->; 
	} <!-- a logicalPath="//test_ref/c/econst/TypedefdStructWithCallbacksAndStructs //test_ref/c/data/TypedefdStructWithCallbacksAndStructs" --><span class="var">TypedefdStructWithCallbacksAndStructs</span><!-- /a -->;  
END OF OBJECT


OBJECT: _someOtherTag (HeaderDoc::Struct)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/_someOtherTag //test_ref/c/tdef/_someOtherTag //test_ref/c/tag/_someOtherTag //test_ref/c/econst/_someOtherTag //test_ref/c/struct/_someOtherTag //test_ref/c/clconst/_someOtherTag //test_ref/c/intf/_someOtherTag" --><span class="type">_someOtherTag</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->; 
	    <!-- a logicalPath="//test_ref/c/cl/short //test_ref/c/tdef/short //test_ref/c/tag/short //test_ref/c/econst/short //test_ref/c/struct/short //test_ref/c/clconst/short //test_ref/c/intf/short" --><span class="type">short</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/firstField //test_ref/c/data/firstField" --><span class="var">firstField</span><!-- /a -->;  
	    <span class="keyword">struct</span> { 
	        <!-- a logicalPath="//test_ref/c/econst/TEST //test_ref/c/data/TEST" --><span class="var">TEST</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/a //test_ref/c/data/a" --><span class="var">a</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/econst/char //test_ref/c/struct/char //test_ref/c/clconst/char //test_ref/c/intf/char" --><span class="type">char</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/b //test_ref/c/data/b" --><span class="var">b</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/c //test_ref/c/data/c" --><span class="var">c</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/massagePointers //test_ref/c/clm/massagePointers //test_ref/c/intfcm/massagePointers //test_ref/c/intfm/massagePointers //test_ref/c/func/massagePointers //test_ref/c/ftmplt/massagePointers //test_ref/c/defn/massagePointers //test_ref/c/macro/massagePointers" --><span class="function">massagePointers</span><!-- /a -->)(
	            <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	            <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	        } <!-- a logicalPath="//test_ref/c/econst/nestedStruct //test_ref/c/data/nestedStruct" --><span class="var">nestedStruct</span><!-- /a -->;  
	    <span class="comment">/* Set the data pointers */</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/setPointers //test_ref/c/clm/setPointers //test_ref/c/intfcm/setPointers //test_ref/c/intfm/setPointers //test_ref/c/func/setPointers //test_ref/c/ftmplt/setPointers //test_ref/c/defn/setPointers //test_ref/c/macro/setPointers" --><span class="function">setPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/getPointers //test_ref/c/clm/getPointers //test_ref/c/intfcm/getPointers //test_ref/c/intfm/getPointers //test_ref/c/func/getPointers //test_ref/c/ftmplt/getPointers //test_ref/c/defn/getPointers //test_ref/c/macro/getPointers" --><span class="function">getPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="type">*</span><span class="param">outSGList</span>,
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <span class="type">*</span><span class="param">outSGEntries</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/econst/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/clconst/UInt32 //test_ref/c/intf/UInt32" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outTransferCount</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/econst/Boolean //test_ref/c/struct/Boolean //test_ref/c/clconst/Boolean //test_ref/c/intf/Boolean" --><span class="type">Boolean</span><!-- /a --> <span class="type">*</span><span class="param">outIsWrite</span>);  
	    <span class="keyword">unsigned</span> <!-- a logicalPath="//test_ref/c/cl/long //test_ref/c/tdef/long //test_ref/c/tag/long //test_ref/c/econst/long //test_ref/c/struct/long //test_ref/c/clconst/long //test_ref/c/intf/long" --><span class="type">long</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/lastField //test_ref/c/data/lastField" --><span class="var">lastField</span><!-- /a -->; 
	} <!-- a logicalPath="//test_ref/c/econst/TypedefdStructWithCallbacksAndStructs //test_ref/c/data/TypedefdStructWithCallbacksAndStructs" --><span class="var">TypedefdStructWithCallbacksAndStructs</span><!-- /a -->;  
END OF OBJECT



_$37|testsuite/parser_tests/typedef_7.test$1|C$9|typedef 7$65573|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 0
inInterface: 0
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 1
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 0
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/typedef_7.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{FULLPATH} => /test_suite_bogus_path/typedef_7.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => struct
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 1
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => 
$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 0
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inEnum} => 0
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{inTypedef} => 1
$parserState->{inUnion} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 20
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => C
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => TypedefdStructWithCallbacksAndStructs;
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => _someOtherTag
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 3
$parserState->{onlyComments} => 0
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 1
$parserState->{posstypes} =>  typedef struct
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{returntype} =>  typedef struct _someOtherTag {
     
$parserState->{seenBraces} => 0
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => 
$parserState->{sodname} => 
$parserState->{sodtype} => 
$parserState->{stackFrozen} => 0
$parserState->{startOfDec} => 1
$parserState->{temponlyComments} => 0
$parserState->{treePopTwo} => 0
$parserState->{typestring} => typedef
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 20
typelist: typedef struct
namelist: TypedefdStructWithCallbacksAndStructs,_someOtherTag
posstypes:  typedef struct
value: 
returntype:  typedef struct _someOtherTag {     
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 0
conformsToList: 
functionContents: 
extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => IUNKNOWN_C_GUTS
Parsed Param 1 => short firstField
Parsed Param 2 => struct 
        TEST
Parsed Param 3 => int a
Parsed Param 4 => char *b
Parsed Param 5 => void *c
Parsed Param 6 => IOReturn (*massagePointers)(void *cmd,
                            IOVirtualRange *sgList)
Parsed Param 7 => nestedStruct
Parsed Param 8 => IOReturn (*setPointers)(void *cmd,
        IOVirtualRange *sgList)
Parsed Param 9 => void (*getPointers)(void *cmd, IOVirtualRange **outSGList, int *outSGEntries, UInt32 *outTransferCount, Boolean *outIsWrite)
Parsed Param 10 => unsigned long lastField
-=: DUMP OF PARSE TREE :=-
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: typedef 7
APIUID: //test_ref/doc/header/typedef_7.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: <p></p>
LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Typedef
    NAME: TypedefdStructWithCallbacksAndStructs
    APIUID: //test_ref/c/tdef/TypedefdStructWithCallbacksAndStructs
    ABSTRACT: "<p>Abstract for this API.
"
    DISCUSSION: "<p>This is completely bogus.
</p>
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Typedef"
    MASTERENUM: "0"
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: <b>See Also:</b><div class='list_indent'><dl>
<dt><!-- a logicalPath="//test_ref/c/tag/_someOtherTag" --><p>_someOtherTag<!-- /a --></dt><dd></dd></dl></div>

    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: IUNKNOWN_C_GUTS
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: short
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: TEST
        TYPE: struct
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: a
        TYPE: int
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: b
        TYPE: char *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: c
        TYPE: void *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: massagePointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: nestedStruct
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: void
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: lastField
        TYPE: unsigned long
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    FIELDS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Specifies the location of the data buffer for an I/O command,
as well as the maximum data transfer count and data transfer direction.
</p>
<p>The setPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            sgList	=>	A pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. You can pass NULL for this parameter (for a command that doesn't require
a data buffer).
        END USER DICTIONARY
        USER DICTIONARY:
            Result	=>	An IOReturn structure which returns the return value in the structure returned.
        END USER DICTIONARY
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Gets the location of the data buffer for an I/O command. The buffer
can be in one or more, possibly discontiguous, locations.
</p>
<p>The getPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGList	=>	A pointer to a pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. On return, the list specifies the I/O buffer for the command.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGEntries	=>	On return, specifies the number of records in the scatter/gather list pointed to
by the outSGList parameter.
        END USER DICTIONARY
        USER DICTIONARY:
            outTransferCount	=>	On return, the maximum data transfer count in bytes for the
command.
        END USER DICTIONARY
        USER DICTIONARY:
            outIsWrite	=>	On return, specifies whether the command is a write command (true),
or a read command (false)
        END USER DICTIONARY
        USER DICTIONARY:
            lastField	=>	Description of the struct's last field.
        END USER DICTIONARY
    TAGGED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Description of first field."
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Struct
    NAME: _someOtherTag
    APIUID: //test_ref/c/tag/_someOtherTag
    ABSTRACT: "<p>Abstract for this API.
"
    DISCUSSION: "<p>This is completely bogus.
</p>
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Struct"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: <b>See Also:</b><div class='list_indent'><dl>
<dt><!-- a logicalPath="//test_ref/c/tdef/TypedefdStructWithCallbacksAndStructs" --><p>TypedefdStructWithCallbacksAndStructs<!-- /a --></dt><dd></dd></dl></div>

    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: IUNKNOWN_C_GUTS
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: short
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: TEST
        TYPE: struct
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: a
        TYPE: int
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: b
        TYPE: char *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: c
        TYPE: void *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: massagePointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: nestedStruct
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: void
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: lastField
        TYPE: unsigned long
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    FIELDS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Specifies the location of the data buffer for an I/O command,
as well as the maximum data transfer count and data transfer direction.
</p>
<p>The setPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            sgList	=>	A pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. You can pass NULL for this parameter (for a command that doesn't require
a data buffer).
        END USER DICTIONARY
        USER DICTIONARY:
            Result	=>	An IOReturn structure which returns the return value in the structure returned.
        END USER DICTIONARY
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Gets the location of the data buffer for an I/O command. The buffer
can be in one or more, possibly discontiguous, locations.
</p>
<p>The getPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGList	=>	A pointer to a pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. On return, the list specifies the I/O buffer for the command.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGEntries	=>	On return, specifies the number of records in the scatter/gather list pointed to
by the outSGList parameter.
        END USER DICTIONARY
        USER DICTIONARY:
            outTransferCount	=>	On return, the maximum data transfer count in bytes for the
command.
        END USER DICTIONARY
        USER DICTIONARY:
            outIsWrite	=>	On return, specifies whether the command is a write command (true),
or a read command (false)
        END USER DICTIONARY
        USER DICTIONARY:
            lastField	=>	Description of the struct's last field.
        END USER DICTIONARY
    TAGGED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Description of first field."
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: _someOtherTag (HeaderDoc::Struct)
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: _someOtherTag (HeaderDoc::Struct)
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: _someOtherTag (HeaderDoc::Struct)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/_someOtherTag //test_ref/c/tdef/_someOtherTag //test_ref/c/tag/_someOtherTag //test_ref/c/econst/_someOtherTag //test_ref/c/struct/_someOtherTag //test_ref/c/clconst/_someOtherTag //test_ref/c/intf/_someOtherTag" --><span class="type">_someOtherTag</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->; 
	    <!-- a logicalPath="//test_ref/c/cl/short //test_ref/c/tdef/short //test_ref/c/tag/short //test_ref/c/econst/short //test_ref/c/struct/short //test_ref/c/clconst/short //test_ref/c/intf/short" --><span class="type">short</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/firstField //test_ref/c/data/firstField" --><span class="var">firstField</span><!-- /a -->;  
	    <span class="keyword">struct</span> { 
	        <!-- a logicalPath="//test_ref/c/econst/TEST //test_ref/c/data/TEST" --><span class="var">TEST</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/a //test_ref/c/data/a" --><span class="var">a</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/econst/char //test_ref/c/struct/char //test_ref/c/clconst/char //test_ref/c/intf/char" --><span class="type">char</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/b //test_ref/c/data/b" --><span class="var">b</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/c //test_ref/c/data/c" --><span class="var">c</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/massagePointers //test_ref/c/clm/massagePointers //test_ref/c/intfcm/massagePointers //test_ref/c/intfm/massagePointers //test_ref/c/func/massagePointers //test_ref/c/ftmplt/massagePointers //test_ref/c/defn/massagePointers //test_ref/c/macro/massagePointers" --><span class="function">massagePointers</span><!-- /a -->)(
	            <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	            <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	        } <!-- a logicalPath="//test_ref/c/econst/nestedStruct //test_ref/c/data/nestedStruct" --><span class="var">nestedStruct</span><!-- /a -->;  
	    <span class="comment">/* Set the data pointers */</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/setPointers //test_ref/c/clm/setPointers //test_ref/c/intfcm/setPointers //test_ref/c/intfm/setPointers //test_ref/c/func/setPointers //test_ref/c/ftmplt/setPointers //test_ref/c/defn/setPointers //test_ref/c/macro/setPointers" --><span class="function">setPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/getPointers //test_ref/c/clm/getPointers //test_ref/c/intfcm/getPointers //test_ref/c/intfm/getPointers //test_ref/c/func/getPointers //test_ref/c/ftmplt/getPointers //test_ref/c/defn/getPointers //test_ref/c/macro/getPointers" --><span class="function">getPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="type">*</span><span class="param">outSGList</span>,
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <span class="type">*</span><span class="param">outSGEntries</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/econst/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/clconst/UInt32 //test_ref/c/intf/UInt32" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outTransferCount</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/econst/Boolean //test_ref/c/struct/Boolean //test_ref/c/clconst/Boolean //test_ref/c/intf/Boolean" --><span class="type">Boolean</span><!-- /a --> <span class="type">*</span><span class="param">outIsWrite</span>);  
	    <span class="keyword">unsigned</span> <!-- a logicalPath="//test_ref/c/cl/long //test_ref/c/tdef/long //test_ref/c/tag/long //test_ref/c/econst/long //test_ref/c/struct/long //test_ref/c/clconst/long //test_ref/c/intf/long" --><span class="type">long</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/lastField //test_ref/c/data/lastField" --><span class="var">lastField</span><!-- /a -->; 
	} <!-- a logicalPath="//test_ref/c/econst/TypedefdStructWithCallbacksAndStructs //test_ref/c/data/TypedefdStructWithCallbacksAndStructs" --><span class="var">TypedefdStructWithCallbacksAndStructs</span><!-- /a -->;  
END OF OBJECT


OBJECT: _someOtherTag (HeaderDoc::Struct)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/_someOtherTag //test_ref/c/tdef/_someOtherTag //test_ref/c/tag/_someOtherTag //test_ref/c/econst/_someOtherTag //test_ref/c/struct/_someOtherTag //test_ref/c/clconst/_someOtherTag //test_ref/c/intf/_someOtherTag" --><span class="type">_someOtherTag</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->; 
	    <!-- a logicalPath="//test_ref/c/cl/short //test_ref/c/tdef/short //test_ref/c/tag/short //test_ref/c/econst/short //test_ref/c/struct/short //test_ref/c/clconst/short //test_ref/c/intf/short" --><span class="type">short</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/firstField //test_ref/c/data/firstField" --><span class="var">firstField</span><!-- /a -->;  
	    <span class="keyword">struct</span> { 
	        <!-- a logicalPath="//test_ref/c/econst/TEST //test_ref/c/data/TEST" --><span class="var">TEST</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/a //test_ref/c/data/a" --><span class="var">a</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/econst/char //test_ref/c/struct/char //test_ref/c/clconst/char //test_ref/c/intf/char" --><span class="type">char</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/b //test_ref/c/data/b" --><span class="var">b</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/c //test_ref/c/data/c" --><span class="var">c</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/massagePointers //test_ref/c/clm/massagePointers //test_ref/c/intfcm/massagePointers //test_ref/c/intfm/massagePointers //test_ref/c/func/massagePointers //test_ref/c/ftmplt/massagePointers //test_ref/c/defn/massagePointers //test_ref/c/macro/massagePointers" --><span class="function">massagePointers</span><!-- /a -->)(
	            <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	            <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	        } <!-- a logicalPath="//test_ref/c/econst/nestedStruct //test_ref/c/data/nestedStruct" --><span class="var">nestedStruct</span><!-- /a -->;  
	    <span class="comment">/* Set the data pointers */</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/setPointers //test_ref/c/clm/setPointers //test_ref/c/intfcm/setPointers //test_ref/c/intfm/setPointers //test_ref/c/func/setPointers //test_ref/c/ftmplt/setPointers //test_ref/c/defn/setPointers //test_ref/c/macro/setPointers" --><span class="function">setPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/getPointers //test_ref/c/clm/getPointers //test_ref/c/intfcm/getPointers //test_ref/c/intfm/getPointers //test_ref/c/func/getPointers //test_ref/c/ftmplt/getPointers //test_ref/c/defn/getPointers //test_ref/c/macro/getPointers" --><span class="function">getPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="type">*</span><span class="param">outSGList</span>,
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <span class="type">*</span><span class="param">outSGEntries</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/econst/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/clconst/UInt32 //test_ref/c/intf/UInt32" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outTransferCount</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/econst/Boolean //test_ref/c/struct/Boolean //test_ref/c/clconst/Boolean //test_ref/c/intf/Boolean" --><span class="type">Boolean</span><!-- /a --> <span class="type">*</span><span class="param">outIsWrite</span>);  
	    <span class="keyword">unsigned</span> <!-- a logicalPath="//test_ref/c/cl/long //test_ref/c/tdef/long //test_ref/c/tag/long //test_ref/c/econst/long //test_ref/c/struct/long //test_ref/c/clconst/long //test_ref/c/intf/long" --><span class="type">long</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/lastField //test_ref/c/data/lastField" --><span class="var">lastField</span><!-- /a -->; 
	} <!-- a logicalPath="//test_ref/c/econst/TypedefdStructWithCallbacksAndStructs //test_ref/c/data/TypedefdStructWithCallbacksAndStructs" --><span class="var">TypedefdStructWithCallbacksAndStructs</span><!-- /a -->;  
END OF OBJECT



$65573|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 0
inInterface: 0
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 1
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 0
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/typedef_7.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{FULLPATH} => /test_suite_bogus_path/typedef_7.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => struct
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 1
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => 
$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 0
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inEnum} => 0
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{inTypedef} => 1
$parserState->{inUnion} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 20
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => C
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => TypedefdStructWithCallbacksAndStructs;
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => _someOtherTag
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 3
$parserState->{onlyComments} => 0
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 1
$parserState->{posstypes} =>  typedef struct
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{returntype} =>  typedef struct _someOtherTag {
     
$parserState->{seenBraces} => 0
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => 
$parserState->{sodname} => 
$parserState->{sodtype} => 
$parserState->{stackFrozen} => 0
$parserState->{startOfDec} => 1
$parserState->{temponlyComments} => 0
$parserState->{treePopTwo} => 0
$parserState->{typestring} => typedef
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 20
typelist: typedef struct
namelist: TypedefdStructWithCallbacksAndStructs,_someOtherTag
posstypes:  typedef struct
value: 
returntype:  typedef struct _someOtherTag {     
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 0
conformsToList: 
functionContents: 
extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => IUNKNOWN_C_GUTS
Parsed Param 1 => short firstField
Parsed Param 2 => struct 
        TEST
Parsed Param 3 => int a
Parsed Param 4 => char *b
Parsed Param 5 => void *c
Parsed Param 6 => IOReturn (*massagePointers)(void *cmd,
                            IOVirtualRange *sgList)
Parsed Param 7 => nestedStruct
Parsed Param 8 => IOReturn (*setPointers)(void *cmd,
        IOVirtualRange *sgList)
Parsed Param 9 => void (*getPointers)(void *cmd, IOVirtualRange **outSGList, int *outSGEntries, UInt32 *outTransferCount, Boolean *outIsWrite)
Parsed Param 10 => unsigned long lastField
-=: DUMP OF PARSE TREE :=-
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: typedef 7
APIUID: //test_ref/doc/header/typedef_7.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: <p></p>
LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Typedef
    NAME: TypedefdStructWithCallbacksAndStructs
    APIUID: //test_ref/c/tdef/TypedefdStructWithCallbacksAndStructs
    ABSTRACT: "<p>Abstract for this API.
"
    DISCUSSION: "<p>This is completely bogus.
</p>
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Typedef"
    MASTERENUM: "0"
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: <b>See Also:</b><div class='list_indent'><dl>
<dt><!-- a logicalPath="//test_ref/c/tag/_someOtherTag" --><p>_someOtherTag<!-- /a --></dt><dd></dd></dl></div>

    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: IUNKNOWN_C_GUTS
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: short
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: TEST
        TYPE: struct
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: a
        TYPE: int
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: b
        TYPE: char *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: c
        TYPE: void *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: massagePointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: nestedStruct
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: void
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: lastField
        TYPE: unsigned long
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    FIELDS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Specifies the location of the data buffer for an I/O command,
as well as the maximum data transfer count and data transfer direction.
</p>
<p>The setPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            sgList	=>	A pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. You can pass NULL for this parameter (for a command that doesn't require
a data buffer).
        END USER DICTIONARY
        USER DICTIONARY:
            Result	=>	An IOReturn structure which returns the return value in the structure returned.
        END USER DICTIONARY
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Gets the location of the data buffer for an I/O command. The buffer
can be in one or more, possibly discontiguous, locations.
</p>
<p>The getPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGList	=>	A pointer to a pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. On return, the list specifies the I/O buffer for the command.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGEntries	=>	On return, specifies the number of records in the scatter/gather list pointed to
by the outSGList parameter.
        END USER DICTIONARY
        USER DICTIONARY:
            outTransferCount	=>	On return, the maximum data transfer count in bytes for the
command.
        END USER DICTIONARY
        USER DICTIONARY:
            outIsWrite	=>	On return, specifies whether the command is a write command (true),
or a read command (false)
        END USER DICTIONARY
        USER DICTIONARY:
            lastField	=>	Description of the struct's last field.
        END USER DICTIONARY
    TAGGED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Description of first field."
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Struct
    NAME: _someOtherTag
    APIUID: //test_ref/c/tag/_someOtherTag
    ABSTRACT: "<p>Abstract for this API.
"
    DISCUSSION: "<p>This is completely bogus.
</p>
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Struct"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: <b>See Also:</b><div class='list_indent'><dl>
<dt><!-- a logicalPath="//test_ref/c/tdef/TypedefdStructWithCallbacksAndStructs" --><p>TypedefdStructWithCallbacksAndStructs<!-- /a --></dt><dd></dd></dl></div>

    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: IUNKNOWN_C_GUTS
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: short
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: TEST
        TYPE: struct
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: a
        TYPE: int
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: b
        TYPE: char *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: c
        TYPE: void *
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: massagePointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: nestedStruct
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: IOReturn
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: void
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: lastField
        TYPE: unsigned long
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
    FIELDS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: setPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Specifies the location of the data buffer for an I/O command,
as well as the maximum data transfer count and data transfer direction.
</p>
<p>The setPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            sgList	=>	A pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. You can pass NULL for this parameter (for a command that doesn't require
a data buffer).
        END USER DICTIONARY
        USER DICTIONARY:
            Result	=>	An IOReturn structure which returns the return value in the structure returned.
        END USER DICTIONARY
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: getPointers
        TYPE: callback
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Gets the location of the data buffer for an I/O command. The buffer
can be in one or more, possibly discontiguous, locations.
</p>
<p>The getPointers function has the following parameters:"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        USER DICTIONARY:
            cmd	=>	A pointer to the CDB command interface instance for the current command.
You must always pass this reference.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGList	=>	A pointer to a pointer to a scatter/gather list (scatter for reading, gather for writing)
containing one or more records that specify the ranges of virtual memory in the command's
I/O buffer. Each element in a scatter/gather list describes the location and size of one buffer,
allowing you to group multiple buffers of any size into a single virtual buffer for an
I/O transaction. On return, the list specifies the I/O buffer for the command.
        END USER DICTIONARY
        USER DICTIONARY:
            outSGEntries	=>	On return, specifies the number of records in the scatter/gather list pointed to
by the outSGList parameter.
        END USER DICTIONARY
        USER DICTIONARY:
            outTransferCount	=>	On return, the maximum data transfer count in bytes for the
command.
        END USER DICTIONARY
        USER DICTIONARY:
            outIsWrite	=>	On return, specifies whether the command is a write command (true),
or a read command (false)
        END USER DICTIONARY
        USER DICTIONARY:
            lastField	=>	Description of the struct's last field.
        END USER DICTIONARY
    TAGGED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: firstField
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p>Description of first field."
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: "0"
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: _someOtherTag (HeaderDoc::Struct)
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: _someOtherTag (HeaderDoc::Struct)
+---typedef
+--- 
+---struct
+--- 
+---_someOtherTag
+--- 
+---{
|   +---[ NEWLINE ]
|   +---    
|   +---IUNKNOWN_C_GUTS
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---short
|   +--- 
|   +---firstField
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---struct
|   +--- 
|   +---{
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---TEST
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---int
|   |   +--- 
|   |   +---a
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---char
|   |   +--- 
|   |   +---*
|   |   +---b
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---c
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOReturn
|   |   +--- 
|   |   +---(
|   |   |   +---*
|   |   |   +---massagePointers
|   |   |   +---)
|   |   +---(
|   |   |   +---void
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---cmd
|   |   |   +---,
|   |   |   +---[ NEWLINE ]
|   |   |   +---                            
|   |   |   +---IOVirtualRange
|   |   |   +--- 
|   |   |   +---*
|   |   |   +---sgList
|   |   |   +---)
|   |   +---;
|   |   +---[ NEWLINE ]
|   |   +---    
|   |   +---}
|   +--- 
|   +---nestedStruct
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---/*
|   |   +--- 
|   |   +---Set the data pointers 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---setPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---        
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---sgList
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---    
|   +---void
|   +--- 
|   +---(
|   |   +---*
|   |   +---getPointers
|   |   +---)
|   +---(
|   |   +---void
|   |   +--- 
|   |   +---*
|   |   +---cmd
|   |   +---,
|   |   +--- 
|   |   +---IOVirtualRange
|   |   +--- 
|   |   +---*
|   |   +---*
|   |   +---outSGList
|   |   +---,
|   |   +--- 
|   |   +---int
|   |   +--- 
|   |   +---*
|   |   +---outSGEntries
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---*
|   |   +---outTransferCount
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---*
|   |   +---outIsWrite
|   |   +---)
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---unsigned
|   +--- 
|   +---long
|   +--- 
|   +---lastField
|   +---;
|   +---[ NEWLINE ]
|   +---}
+--- 
+---TypedefdStructWithCallbacksAndStructs
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: _someOtherTag (HeaderDoc::Struct)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/_someOtherTag //test_ref/c/tdef/_someOtherTag //test_ref/c/tag/_someOtherTag //test_ref/c/econst/_someOtherTag //test_ref/c/struct/_someOtherTag //test_ref/c/clconst/_someOtherTag //test_ref/c/intf/_someOtherTag" --><span class="type">_someOtherTag</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->; 
	    <!-- a logicalPath="//test_ref/c/cl/short //test_ref/c/tdef/short //test_ref/c/tag/short //test_ref/c/econst/short //test_ref/c/struct/short //test_ref/c/clconst/short //test_ref/c/intf/short" --><span class="type">short</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/firstField //test_ref/c/data/firstField" --><span class="var">firstField</span><!-- /a -->;  
	    <span class="keyword">struct</span> { 
	        <!-- a logicalPath="//test_ref/c/econst/TEST //test_ref/c/data/TEST" --><span class="var">TEST</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/a //test_ref/c/data/a" --><span class="var">a</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/econst/char //test_ref/c/struct/char //test_ref/c/clconst/char //test_ref/c/intf/char" --><span class="type">char</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/b //test_ref/c/data/b" --><span class="var">b</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/c //test_ref/c/data/c" --><span class="var">c</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/massagePointers //test_ref/c/clm/massagePointers //test_ref/c/intfcm/massagePointers //test_ref/c/intfm/massagePointers //test_ref/c/func/massagePointers //test_ref/c/ftmplt/massagePointers //test_ref/c/defn/massagePointers //test_ref/c/macro/massagePointers" --><span class="function">massagePointers</span><!-- /a -->)(
	            <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	            <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	        } <!-- a logicalPath="//test_ref/c/econst/nestedStruct //test_ref/c/data/nestedStruct" --><span class="var">nestedStruct</span><!-- /a -->;  
	    <span class="comment">/* Set the data pointers */</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/setPointers //test_ref/c/clm/setPointers //test_ref/c/intfcm/setPointers //test_ref/c/intfm/setPointers //test_ref/c/func/setPointers //test_ref/c/ftmplt/setPointers //test_ref/c/defn/setPointers //test_ref/c/macro/setPointers" --><span class="function">setPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/getPointers //test_ref/c/clm/getPointers //test_ref/c/intfcm/getPointers //test_ref/c/intfm/getPointers //test_ref/c/func/getPointers //test_ref/c/ftmplt/getPointers //test_ref/c/defn/getPointers //test_ref/c/macro/getPointers" --><span class="function">getPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="type">*</span><span class="param">outSGList</span>,
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <span class="type">*</span><span class="param">outSGEntries</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/econst/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/clconst/UInt32 //test_ref/c/intf/UInt32" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outTransferCount</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/econst/Boolean //test_ref/c/struct/Boolean //test_ref/c/clconst/Boolean //test_ref/c/intf/Boolean" --><span class="type">Boolean</span><!-- /a --> <span class="type">*</span><span class="param">outIsWrite</span>);  
	    <span class="keyword">unsigned</span> <!-- a logicalPath="//test_ref/c/cl/long //test_ref/c/tdef/long //test_ref/c/tag/long //test_ref/c/econst/long //test_ref/c/struct/long //test_ref/c/clconst/long //test_ref/c/intf/long" --><span class="type">long</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/lastField //test_ref/c/data/lastField" --><span class="var">lastField</span><!-- /a -->; 
	} <!-- a logicalPath="//test_ref/c/econst/TypedefdStructWithCallbacksAndStructs //test_ref/c/data/TypedefdStructWithCallbacksAndStructs" --><span class="var">TypedefdStructWithCallbacksAndStructs</span><!-- /a -->;  
END OF OBJECT


OBJECT: _someOtherTag (HeaderDoc::Struct)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/_someOtherTag //test_ref/c/tdef/_someOtherTag //test_ref/c/tag/_someOtherTag //test_ref/c/econst/_someOtherTag //test_ref/c/struct/_someOtherTag //test_ref/c/clconst/_someOtherTag //test_ref/c/intf/_someOtherTag" --><span class="type">_someOtherTag</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->; 
	    <!-- a logicalPath="//test_ref/c/cl/short //test_ref/c/tdef/short //test_ref/c/tag/short //test_ref/c/econst/short //test_ref/c/struct/short //test_ref/c/clconst/short //test_ref/c/intf/short" --><span class="type">short</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/firstField //test_ref/c/data/firstField" --><span class="var">firstField</span><!-- /a -->;  
	    <span class="keyword">struct</span> { 
	        <!-- a logicalPath="//test_ref/c/econst/TEST //test_ref/c/data/TEST" --><span class="var">TEST</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/a //test_ref/c/data/a" --><span class="var">a</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/econst/char //test_ref/c/struct/char //test_ref/c/clconst/char //test_ref/c/intf/char" --><span class="type">char</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/b //test_ref/c/data/b" --><span class="var">b</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/c //test_ref/c/data/c" --><span class="var">c</span><!-- /a -->; 
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/massagePointers //test_ref/c/clm/massagePointers //test_ref/c/intfcm/massagePointers //test_ref/c/intfm/massagePointers //test_ref/c/func/massagePointers //test_ref/c/ftmplt/massagePointers //test_ref/c/defn/massagePointers //test_ref/c/macro/massagePointers" --><span class="function">massagePointers</span><!-- /a -->)(
	            <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	            <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	        } <!-- a logicalPath="//test_ref/c/econst/nestedStruct //test_ref/c/data/nestedStruct" --><span class="var">nestedStruct</span><!-- /a -->;  
	    <span class="comment">/* Set the data pointers */</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/econst/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/clconst/IOReturn //test_ref/c/intf/IOReturn" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/setPointers //test_ref/c/clm/setPointers //test_ref/c/intfcm/setPointers //test_ref/c/intfm/setPointers //test_ref/c/func/setPointers //test_ref/c/ftmplt/setPointers //test_ref/c/defn/setPointers //test_ref/c/macro/setPointers" --><span class="function">setPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="param">sgList</span>); 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/getPointers //test_ref/c/clm/getPointers //test_ref/c/intfcm/getPointers //test_ref/c/intfm/getPointers //test_ref/c/func/getPointers //test_ref/c/ftmplt/getPointers //test_ref/c/defn/getPointers //test_ref/c/macro/getPointers" --><span class="function">getPointers</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/econst/void //test_ref/c/struct/void //test_ref/c/clconst/void //test_ref/c/intf/void" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">cmd</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/econst/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/clconst/IOVirtualRange //test_ref/c/intf/IOVirtualRange" --><span class="type">IOVirtualRange</span><!-- /a --> <span class="type">*</span><span class="type">*</span><span class="param">outSGList</span>,
	        <!-- a logicalPath="//test_ref/c/cl/int //test_ref/c/tdef/int //test_ref/c/tag/int //test_ref/c/econst/int //test_ref/c/struct/int //test_ref/c/clconst/int //test_ref/c/intf/int" --><span class="type">int</span><!-- /a --> <span class="type">*</span><span class="param">outSGEntries</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/econst/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/clconst/UInt32 //test_ref/c/intf/UInt32" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outTransferCount</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/econst/Boolean //test_ref/c/struct/Boolean //test_ref/c/clconst/Boolean //test_ref/c/intf/Boolean" --><span class="type">Boolean</span><!-- /a --> <span class="type">*</span><span class="param">outIsWrite</span>);  
	    <span class="keyword">unsigned</span> <!-- a logicalPath="//test_ref/c/cl/long //test_ref/c/tdef/long //test_ref/c/tag/long //test_ref/c/econst/long //test_ref/c/struct/long //test_ref/c/clconst/long //test_ref/c/intf/long" --><span class="type">long</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/lastField //test_ref/c/data/lastField" --><span class="var">lastField</span><!-- /a -->; 
	} <!-- a logicalPath="//test_ref/c/econst/TypedefdStructWithCallbacksAndStructs //test_ref/c/data/TypedefdStructWithCallbacksAndStructs" --><span class="var">TypedefdStructWithCallbacksAndStructs</span><!-- /a -->;  
END OF OBJECT



$1|C$6|parser