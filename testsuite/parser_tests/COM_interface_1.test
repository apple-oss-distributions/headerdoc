FrT;@1|>>0|$15|HeaderDoc::Test%22|$4|CODE$7|COMMENT$7|CPPCODE$15|EXPECTED_RESULT$23|EXPECTED_RESULT_ALLDECS$7|FAILMSG$8|FILENAME$4|LANG$4|NAME$7|SUBLANG$4|TYPE$47989|typedef struct IOFireWireDeviceInterface_t
{
	IUNKNOWN_C_GUTS ;

	UInt32 version, revision ; // version/revision
	
		// --- maintenance methods -------------
    /*!
	@functiongroup class_group_1
    */
    /*!
        @function InterfaceIsInited
        @abstract Determine whether interface has been properly inited.
        @param self The device interface to use.
        @result Returns true if interface is inited and false if is it not.
    */
	Boolean				(*InterfaceIsInited)(IOFireWireLibDeviceRef self) ;

    /*!
        @function GetDevice
        @abstract Get the IOKit service to which this interface is connected.
        @param self The device interface to use.
        @result Returns an io_object_t corresponding to the device the interface is
			using
    */
	io_object_t			(*GetDevice)(IOFireWireLibDeviceRef self) ;

    /*!
	@functiongroup class_group_2
    */
    /*!
        @function Open
        @abstract Open the connected device for exclusive access. When you have
			the device open using this method, all accesses by other clients of 
			this device will be denied until Close() is called.
        @param self The device interface to use.
        @result An IOReturn error code
    */
	IOReturn			(*Open)(IOFireWireLibDeviceRef self) ;

    /*!
        @function OpenWithSessionRef
        @abstract An open function which allows this interface to have access
			to the device when already opened. The service which has already opened
			the device must be able to provide an IOFireWireSessionRef.
        @param self The device interface to use
		@param IOFireWireSessionRef The sessionRef returned from the client who has
			the device open
        @result An IOReturn error code
    */
	IOReturn			(*OpenWithSessionRef)(IOFireWireLibDeviceRef self, IOFireWireSessionRef sessionRef) ;

    /*!
	@functiongroup class_group_1
    */
    /*!
        @function Close
        @abstract Release exclusive access to the device
        @param self The device interface to use
    */
	void				(*Close)(IOFireWireLibDeviceRef self) ;
	
		// --- notification --------------------
	/*!
		@function NotificationIsOn
		@abstract Determine whether callback notifications for this interface are currently active
        @param self The device interface to use
		@result A Boolean value where true indicates notifications are active
	*/
	const Boolean		(*NotificationIsOn)(IOFireWireLibDeviceRef self) ;
	
	/*!
		@function AddCallbackDispatcherToRunLoop
		@abstract Installs the proper run loop event source to allow callbacks to function. This method
			must be called before callback notifications for this interface or any interfaces
			created using this interface can function.
        @param self The device interface to use.
		@param inRunLoop The run loop on which to install the event source
	*/
	const IOReturn 		(*AddCallbackDispatcherToRunLoop)(IOFireWireLibDeviceRef self, CFRunLoopRef inRunLoop) ;
	
	/*!
		@function RemoveCallbackDispatcherFromRunLoop
		@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
			the run loop event source that was added to the specified run loop preventing any 
			future callbacks from being called
        @param self The device interface to use.			
	*/
	const void			(*RemoveCallbackDispatcherFromRunLoop)(IOFireWireLibDeviceRef self) ;
	
	/*!
		@function TurnOnNotification
		@abstract Activates any callbacks specified for this device interface. Only works after 
			AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
        @param self The device interface to use.
		@result A Boolean value. Returns true on success.
	*/
	const Boolean 		(*TurnOnNotification)(IOFireWireLibDeviceRef self) ;

	/*!
		@function TurnOffNotification
		@abstract Deactivates and callbacks specified for this device interface. Reverses the 
			effects of TurnOnNotification()
        @param self The device interface to use.
	*/
	void				(*TurnOffNotification)(IOFireWireLibDeviceRef self) ;
	
	/*!
		@function SetBusResetHandler
		@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
			can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
			resets might occur before bus reconfiguration has completed.)
        @param self The device interface to use.
		@param handler Function pointer to the handler to install
		@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
			bus reset handler. Returns 0 if none was set.
	*/
	const IOFireWireBusResetHandler	
						(*SetBusResetHandler)(IOFireWireLibDeviceRef self, IOFireWireBusResetHandler handler) ;
	
	/*!
		@function SetBusResetDoneHandler
		@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
			of the bus has been completed. This function will only be called once per bus reset.
        @param self The device interface to use.
		@param handler Function pointer to the handler to install
		@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
			bus reset handler. Returns 0 if none was set.
	*/
	const IOFireWireBusResetDoneHandler	
						(*SetBusResetDoneHandler)(IOFireWireLibDeviceRef self, IOFireWireBusResetDoneHandler handler) ;
	/*!
		@function ClientCommandIsComplete
		@abstract This function must be called from callback routines once they have completed processing
			a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
			parameter.
		@param commandID The command ID passed to the callback function when it was called
		@param status An IOReturn value indicating the completion status of the callback function
	*/
	void				(*ClientCommandIsComplete)(IOFireWireLibDeviceRef self, FWClientCommandID commandID, IOReturn status) ;
	
		// --- read/write/lock operations -------
	/*!
		@function Read
		@abstract Perform synchronous block read
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to read. 
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported.
		@param addr Command target address
		@param buf A pointer to a buffer where the results will be stored
		@param size Number of bytes to read
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in generation. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOReturn error code
	*/
	IOReturn			(*Read)(IOFireWireLibDeviceRef	self, 
								io_object_t 		device,
								const FWAddress* addr, 
								void* 				buf, 
								UInt32* 			size, 
								Boolean 			failOnReset, 
								UInt32 				generation) ;

	/*!
		@function ReadQuadlet
		@abstract Perform synchronous quadlet read
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to read. 
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported.
		@param addr Command target address
		@param value A pointer to where to data should be stored
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in generation. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOReturn error code
	*/
	IOReturn			(*ReadQuadlet)(	IOFireWireLibDeviceRef	self, 
										io_object_t 			device,
										const FWAddress* 		addr, 
										UInt32* 				val, 
										Boolean 				failOnReset, 
										UInt32 					generation) ;
	/*!
		@function Write
		@abstract Perform synchronous block write
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported.
		@param addr Command target address
		@param buf A pointer to a buffer where the results will be stored
		@param size Number of bytes to read
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOReturn error code
	*/
	IOReturn			(*Write)(	IOFireWireLibDeviceRef 	self, 
									io_object_t 			device, 
									const FWAddress* 		addr, 
									const void* 			buf, 
									UInt32* 				size,
									Boolean 				failOnReset, 
									UInt32 					generation) ;

	/*!
		@function WriteQuadlet
		@abstract Perform synchronous quadlet write
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported.
		@param addr Command target address
		@param val The value to write
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOReturn error code
	*/
	IOReturn (*WriteQuadlet)(IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr, const UInt32 val, Boolean failOnReset, UInt32 generation) ;

	/*!
		@function CompareSwap
		@abstract Perform synchronous lock operation
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported.
		@param addr Command target address
		@param cmpVal The check/compare value
		@param newVal Value to set
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOReturn error code
	*/
	IOReturn (*CompareSwap)(IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr, UInt32 cmpVal, UInt32 newVal, Boolean failOnReset, UInt32 generation) ;
	
	// --- FireWire command object methods ---------

	/*!
		@function CreateReadCommand
		@abstract Create a block read command object.
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported. Setting the callback value to nil defaults to synchronous execution.
		@param addr Command target address
		@param buf A pointer to a buffer where the results will be stored
		@param size Number of bytes to read
		@param callback Command completion callback.
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
	*/
	IOFireWireLibCommandRef (*CreateReadCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress * addr, void* buf, UInt32 size, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid) ;

	/*!	@function CreateReadQuadletCommand
		@abstract Create a quadlet read command object.
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported. Setting the callback value to nil defaults to synchronous execution.
		@param addr Command target address
		@param quads An array of quadlets where results should be stored
		@param numQuads Number of quadlets to read
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@param 
		@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.*/
	IOFireWireLibCommandRef (*CreateReadQuadletCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress * addr, UInt32 quads[], UInt32 numQuads, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid) ;

	/*!	@function CreateWriteCommand
		@abstract Create a block write command object.
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported. Setting the callback value to nil defaults to synchronous execution.
		@param addr Command target address
		@param buf A pointer to the buffer containing the data to be written
		@param size Number of bytes to write
		@param callback Command completion callback.
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.*/
	IOFireWireLibCommandRef (*CreateWriteCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress * addr, void* buf, UInt32  size, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid) ;

	/*!
		@function CreateWriteQuadletCommand
		@abstract Create a quadlet write command object.
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported. Setting the callback value to nil defaults to synchronous execution.
		@param addr Command target address
		@param quads An array of quadlets containing quadlets to be written
		@param numQuads Number of quadlets to write
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
	*/
	IOFireWireLibCommandRef (*CreateWriteQuadletCommand)(IOFireWireLibDeviceRef	self, io_object_t device, const FWAddress *	addr, UInt32 quads[], UInt32 numQuads, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid) ;

	/*!
		@function CreateCompareSwapCommand
		@abstract Create a quadlet compare/swap command object.
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported. Setting the callback value to nil defaults to synchronous execution.
		@param addr Command target address
		@param cmpVal 32-bit value expected at target address
		@param newVal 32-bit value to be set at target address
		@param callback Command completion callback.
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.	*/
	IOFireWireLibCommandRef (*CreateCompareSwapCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress *  addr, UInt32      cmpVal, UInt32      newVal, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid) ;

		// --- other methods ---------------------------
	/*!	@function BusReset
		@abstract Cause a bus reset
		@param self The device interface to use. */	
	IOReturn (*BusReset)( IOFireWireLibDeviceRef  self) ;

	/*!	@function GetCycleTime
		@abstract Get bus cycle time.
		@param self The device interface to use.
		@param outCycleTime A pointer to a UInt32 to hold the result
		@result An IOReturn error code.	*/	
	IOReturn (*GetCycleTime)( IOFireWireLibDeviceRef  self, UInt32*  outCycleTime) ;

	/*!	@function GetGenerationAndNodeID
		@abstract (Obsolete) Get bus generation and remote device node ID.
		@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
			interface v4.
		@param self The device interface to use.
		@param outGeneration A pointer to a UInt32 to hold the generation result
		@param outNodeID A pointer to a UInt16 to hold the remote device node ID
		@result An IOReturn error code.	*/	
	IOReturn (*GetGenerationAndNodeID)( IOFireWireLibDeviceRef  self, UInt32*  outGeneration, UInt16*  outNodeID) ;

	/*!	@function GetLocalNodeID
		@abstract (Obsolete) Get local node ID.
		@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
			interface v4.
		@param self The device interface to use.
		@param outNodeID A pointer to a UInt16 to hold the local device node ID
		@result An IOReturn error code.	*/	
	IOReturn (*GetLocalNodeID)( IOFireWireLibDeviceRef  self, UInt16*  outLocalNodeID) ;

	/*!	@function GetResetTime
		@abstract Get time since last bus reset.
		@param self The device interface to use.
		@param outResetTime A pointer to an AbsolutTime to hold the result.
		@result An IOReturn error code.	*/	
	IOReturn			(*GetResetTime)(
								IOFireWireLibDeviceRef 	self, 
								AbsoluteTime* 			outResetTime) ;

		// --- unit directory support ------------------
	/*!	@function CreateLocalUnitDirectory
		@abstract Creates a local unit directory object and returns an interface to it. An
			instance of a unit directory object corresponds to an instance of a unit 
			directory in the local machine's configuration ROM.
		@param self The device interface to use.
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created unit directory object.
		@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure */
	 IOFireWireLibLocalUnitDirectoryRef (*CreateLocalUnitDirectory)( IOFireWireLibDeviceRef  self, REFIID  iid) ;

		// --- config directory support ----------------
	/*!	@function GetConfigDirectory
		@abstract Creates a config directory object and returns an interface to it. The
			created config directory object represents the config directory in the remote
			device or unit to which the creating device interface is attached.
		@param self The device interface to use.
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created config directory object.
		@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure */
	IOFireWireLibConfigDirectoryRef (*GetConfigDirectory)( IOFireWireLibDeviceRef  self, REFIID  iid) ;

	/*!	@function CreateConfigDirectoryWithIOObject
		@abstract This function can be used to create a config directory object and a
			corresponding interface from an opaque IOObject reference. Some configuration
			directory interface methods may return an io_object_t instead of an
			IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
			IOFireWireLibConfigDirectoryRef from an io_object_t.
		@param self The device interface to use.
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created config directory object.
		@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure */
	IOFireWireLibConfigDirectoryRef (*CreateConfigDirectoryWithIOObject)( IOFireWireLibDeviceRef  self, io_object_t  inObject, REFIID  iid) ;

		// --- address space support -------------------
	/*!	@function CreatePseudoAddressSpace
		@abstract Creates a pseudo address space object and returns an interface to it. This
			will create a pseudo address space (software-backed) on the local machine. 
		@param self The device interface to use.
		@param inSize The size in bytes of this address space
		@param inRefCon A user specified reference value. This will be passed to all callback functions.
		@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
			the client and/or put in the backing store. A larger queue can help eliminate dropped packets
			when receiving large bursts of data. When a packet is received which can not fit into the queue, 
			the packet dropped callback will be called. 
		@param inBackingStore An optional block of allocated memory representing the contents of the address space.
		@param inFlags A UInt32 with bits set corresponding to the flags that should be set
			for this address space.
			<ul>
				<li>kFWAddressSpaceNoFlags -- All flags off</li>
				<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
					Setting this flag also disables compare/swap transactions on this address space.</li>
				<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
					Setting this flag also disables compare/swap transactions on this address space.</li>
				<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
					of the backing store. The user process will not be notified of writes.</li>
				<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
					using the contents of the backing store. The user process will not be notified of reads.</li>
				<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
					to the backing store at the same time the user process is notified of a write.</li>
			</ul>
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created pseudo address space object.
		@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure */
	IOFireWireLibPseudoAddressSpaceRef	(*CreatePseudoAddressSpace)( 
												IOFireWireLibDeviceRef  	self, 
												UInt32  					inSize, 
												void*  						inRefCon, 
												UInt32  					inQueueBufferSize, 
												void*  						inBackingStore, 
												UInt32  					inFlags, 
												REFIID  					iid) ;

	/*!	@function CreatePhysicalAddressSpace
		@abstract Creates a physical address space object and returns an interface to it. This
			will create a physical address space on the local machine. 
		@param self The device interface to use.
		@param inBackingStore An block of allocated memory representing the contents of the address space.
		@param inSize The size in bytes of this address space
		@param inFlags A UInt32 with bits set corresponding to the flags that should be set
			for this address space. For future use -- always pass 0.
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created physical address space object.
		@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure */
	IOFireWireLibPhysicalAddressSpaceRef (*CreatePhysicalAddressSpace)( IOFireWireLibDeviceRef  self, UInt32  inSize, void*  inBackingStore, UInt32  inFlags, REFIID  iid) ;
		
		// --- debugging -------------------------------
	IOReturn (*FireBugMsg)( IOFireWireLibDeviceRef  self, const char*  msg) ;

	//
	// NOTE: the following methods available only in interface v2 and later
	//

		// --- eye-sock-run-U.S. -----------------------
	/*!	@function AddIsochCallbackDispatcherToRunLoop
		@abstract This function adds an event source for the isochronous callback dispatcher
			to the specified CFRunLoop. Isochronous related callbacks will not function
			before this function is called. This functions is similar to 
			AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
			from that passed to AddCallbackDispatcherToRunLoop. 
		@param self The device interface to use.
		@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
			should be added
		@result An IOReturn error code.	*/	
	IOReturn			(*AddIsochCallbackDispatcherToRunLoop)(
								IOFireWireLibDeviceRef 	self, 
								CFRunLoopRef 			inRunLoop) ;

	/*!	@function CreateRemoteIsochPort
		@abstract Creates a remote isochronous port object and returns an interface to it. A
			remote isochronous port object is an abstract entity used to represent a remote
			talker or listener device on an isochronous channel. 
		@param self The device interface to use.
		@param inTalking Pass true if this port represents an isochronous talker. Pass
			false if this port represents an isochronous listener.
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created remote isochronous port object.
		@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure */
	IOFireWireLibRemoteIsochPortRef
						(*CreateRemoteIsochPort)(
								IOFireWireLibDeviceRef	self,
								Boolean					inTalking,
								REFIID					iid) ;

	/*!	@function CreateLocalIsochPort
		@abstract Creates a local isochronous port object and returns an interface to it. A
			local isochronous port object is an abstract entity used to represent a
			talking or listening endpoint in the local machine. 
		@param self The device interface to use.
		@param inTalking Pass true if this port represents an isochronous talker. Pass
			false if this port represents an isochronous listener.
		@param inDCLProgram A pointer to the first DCL command struct of the DCL program
			to be compiled and used to send or receive data on this port.
		@param inStartEvent Start event bits
		@param inStartState Start state bits
		@param inStartMask Start mask bits
		@param inDCLProgramRanges This is an optional optimization parameter which can be used
			to decrease the time the local port object spends determining which set of virtual
			ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
			structs or nil to ignore this parameter.
		@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
			Pass 0 for none.
		@param inBufferRanges This is an optional optimization parameter which can be used
			to decrease the time the local port object spends determining which set of virtual
			ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
			to an array of IOVirtualRange structs or nil to ignore this parameter.
		@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
			Pass 0 for none.
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created object.
		@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure */
	IOFireWireLibLocalIsochPortRef
						(*CreateLocalIsochPort)(
								IOFireWireLibDeviceRef 	self, 
								Boolean					inTalking,
								DCLCommandPtr			inDCLProgram,
								UInt32					inStartEvent,
								UInt32					inStartState,
								UInt32					inStartMask,
								IOVirtualRange			inDCLProgramRanges[],	// optional optimization parameters
								UInt32					inDCLProgramRangeCount,	
								IOVirtualRange			inBufferRanges[],
								UInt32					inBufferRangeCount, 
								REFIID 					iid) ; 

	/*!	@function CreateIsochChannel
		@abstract Creates an isochronous channel object and returns an interface to it. An
			isochronous channel object is an abstract entity used to represent a
			FireWire isochronous channel. 
		@param self The device interface to use.
		@param doIRM Controls whether the channel automatically performs IRM operations. 
			Pass true if the channel should allocate its channel and bandwidth with
			the IRM. Pass false to ignore the IRM.
		@param packetSize Size in bytes of packets being sent or received with this channel.
			This is automatically translated into a bandwidth allocation appropriate
			for the speed passed in prefSpeed.
		@param prefSpeed The preferred bus speed of this channel.
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created object.
		@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure */
	IOFireWireLibIsochChannelRef
						(*CreateIsochChannel)(
								IOFireWireLibDeviceRef 	self, 
								Boolean 				doIrm, 
								UInt32 					packetSize, 
								IOFWSpeed 				prefSpeed, 
								REFIID 					iid ) ;

	/*!	@function CreateDCLCommandPool
		@abstract Creates a command pool object and returns an interface to it. The command 
			pool can be used to build DCL programs.
		@param self The device interface to use.
		@param size Starting size of command pool
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created object.
		@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure */
	IOFireWireLibDCLCommandPoolRef
						(*CreateDCLCommandPool)(
								IOFireWireLibDeviceRef	self, 
								IOByteCount 			size, 
								REFIID 					iid ) ;

	// --- refcons ---------------------------------
	/*!	@function GetRefCon
		@abstract Get user reference value set on this interface
		@param self The device interface to use.
		@result Returns the user's reference value set on this interface. */
	void*				(*GetRefCon)(
								IOFireWireLibDeviceRef	self) ;
	/*!	@function SetRefCon
		@abstract Set user reference value on this interface
		@param self The device interface to use.
		@param refCon The reference value to set. */
	void				(*SetRefCon)(
								IOFireWireLibDeviceRef	self,
								const void*				refCon) ;

	// --- debugging -------------------------------
	// do not use this function
	CFTypeRef			(*GetDebugProperty)(
								IOFireWireLibDeviceRef	self,
								void*					interface,
								CFStringRef				inPropertyName,
								CFTypeID*				outPropertyType) ;

	/*!	@function PrintDCLProgram
		@abstract Walk a DCL program linked list and print its contents
		@param self The device interface to use.
		@param inProgram A pointer to the first DCL of the program to print
		@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
			report an error if this number does not match the number of DCLs found
			in the program. */
	void 				(*PrintDCLProgram)(
								IOFireWireLibDeviceRef	self, 
								const DCLCommandPtr		inProgram, 
								UInt32 					inLength) ;

	//
	// NOTE: the following methods available only in interface v3 and later
	//

	// --- v3 functions ----------
	/*!	@function CreateInitialUnitsPseudoAddressSpace
		@abstract Creates a pseudo address space in initial units space.
		@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
			will create a pseudo address space (software-backed) on the local machine.
			
			Availablilty: IOFireWireDeviceInterface_v3,  and newer
			
		@param self The device interface to use.
		@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
			in initial units space.
		@param inSize The size in bytes of this address space
		@param inRefCon A user specified reference value. This will be passed to all callback functions.
		@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
			the client and/or put in the backing store. A larger queue can help eliminate dropped packets
			when receiving large bursts of data. When a packet is received which can not fit into the queue, 
			the packet dropped callback will be called. 
		@param inBackingStore An optional block of allocated memory representing the contents of the address space.
		@param inFlags A UInt32 with bits set corresponding to the flags that should be set
			for this address space.
			<ul>
				<li>kFWAddressSpaceNoFlags -- All flags off</li>
				<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
					Setting this flag also disables compare/swap transactions on this address space.</li>
				<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
					Setting this flag also disables compare/swap transactions on this address space.</li>
				<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
					of the backing store. The user process will not be notified of writes.</li>
				<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
					using the contents of the backing store. The user process will not be notified of reads.</li>
				<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
					to the backing store at the same time the user process is notified of a write. Clients
					will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
				<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
					already has an address space at the requested address. All clients will be notified of writes to
					covered addresses.</li>
			</ul>
		@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
			type of interface to be returned for the created pseudo address space object.
		@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure */
	IOFireWireLibPseudoAddressSpaceRef	(*CreateInitialUnitsPseudoAddressSpace)( 
												IOFireWireLibDeviceRef  	self,
												UInt32						inAddressLo,
												UInt32  					inSize, 
												void*  						inRefCon, 
												UInt32  					inQueueBufferSize, 
												void*  						inBackingStore, 
												UInt32  					inFlags,
												REFIID  					iid) ;
	/*!
		@function AddCallbackDispatcherToRunLoopForMode
		@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
        @discussion Installs the proper run loop event source to allow callbacks to function. This method
			must be called before callback notifications for this interface or any interfaces
			created using this interface can function. With this function, you can additionally specify
			for which run loop modes this source should be added.
			
			Availability: IOFireWireDeviceInterface_v3, and newer
			
		@param self The device interface to use.
		@param inRunLoop The run loop on which to install the event source
		@param inRunLoopMode The run loop mode(s) for which to install the event source
		@result An IOReturn error code.	*/	
	IOReturn 			(*AddCallbackDispatcherToRunLoopForMode)(
								IOFireWireLibDeviceRef 	self, 
								CFRunLoopRef 			inRunLoop,
								CFStringRef				inRunLoopMode ) ;
	/*!	@function AddIsochCallbackDispatcherToRunLoop
		@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
		@discussion This function adds an event source for the isochronous callback dispatcher
			to the specified CFRunLoop. Isochronous related callbacks will not be called unless
			this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
			The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 

			Availability: IOFireWireDeviceInterface_v3, and newer

		@param self The device interface to use.
		@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
			should be added
		@param inRunLoopMode The run loop mode(s) for which to install the event source
		@result An IOReturn error code.	*/	
	IOReturn			(*AddIsochCallbackDispatcherToRunLoopForMode)(
								IOFireWireLibDeviceRef 	self,
								CFRunLoopRef			inRunLoop,
								CFStringRef 			inRunLoopMode ) ;
	/*!
		@function RemoveIsochCallbackDispatcherFromRunLoop
		@abstract Removes an IOFireWireLib-added run loop event source.
		@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
			the run loop event source that was added to the specified run loop preventing any 
			future callbacks from being called.
			
			Availability: IOFireWireDeviceInterface_v3, and newer

        @param self The device interface to use.			
	*/
	void				(*RemoveIsochCallbackDispatcherFromRunLoop)(
								IOFireWireLibDeviceRef 	self) ;

	/*!
		@function Seize
		@abstract Seize control of device/unit
		@discussion Allows a user space client to seize control of an in-kernel service even if
			that service has been Opened() by another client or in-kernel driver. This function should be
			used with care. Admin rights are required to use this function.
			
			Calling this method makes it appear to all other drivers that the device has been unplugged.
			Open() should be called after this method has been invoked.
			
			When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
			normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
        @param self The device interface to use.
		@param reserved Reserved for future use. Set to NULL.
	*/
	IOReturn			(*Seize)(
								IOFireWireLibDeviceRef 	self,
								IOOptionBits			inFlags,
								... ) ;

	/*!
		@function FireLog
		@abstract Logs string to in-kernel debug buffer
        @param self The device interface to use.
	*/
	IOReturn			(*FireLog)(
								IOFireWireLibDeviceRef 	self,
								const char*				format,
								... ) ;

	/*!	@function GetBusCycleTime
		@abstract Get bus and cycle time.
		@param self The device interface to use.
		@param outBusTime A pointer to a UInt32 to hold the bus time
		@param outCycleTime A pointer to a UInt32 to hold the cycle time
		@result An IOReturn error code.	*/	
	IOReturn (*GetBusCycleTime)( IOFireWireLibDeviceRef  self, UInt32*  outBusTime, UInt32*  outCycleTime) ;

	//
	// v4
	//

	/*!
		@function CreateCompareSwapCommand64
		@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported. Setting the callback value to nil defaults to synchronous execution.
		@param addr Command target address
		@param cmpVal 64-bit value expected at target address
		@param newVal 64-bit value to be set at target address
		@param callback Command completion callback.
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.	*/
	IOFireWireLibCommandRef (*CreateCompareSwapCommand64)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr, 
																UInt64 cmpVal, UInt64 newVal, IOFireWireLibCommandCallback callback, 
																Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid) ;

	/*!
		@function CompareSwap64
		@abstract Perform synchronous lock operation
		@param self The device interface to use.
		@param device The service (representing an attached FireWire device) to which to write.
			For 48-bit, device relative addressing, pass the service used to create the device interface. This
			can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
			unsupported.
			
			If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
			successful.
		@param addr Command target address
		@param expectedVal Pointer to quadlets expected at target.
		@param newVal Pointer to quadlets to atomically set at target if compare is successful.
		@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
		@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
		@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
			specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
			obtained by calling GetGenerationAndNodeID()
		@param generation The FireWire bus generation during which the command should be executed. Ignored
			if failOnReset is false.
		@result An IOReturn error code
	*/
	IOReturn (*CompareSwap64)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr, 
										UInt32* expectedVal, UInt32* newVal, UInt32* oldVal, IOByteCount size, 
										Boolean failOnReset, UInt32 generation) ;

	/*!	@function GetBusGeneration
		@abstract Get bus generation number.
		@discussion The bus generation number stays constant between bus resets and can be
			used in combination with a FireWire node ID to uniquely identify nodes on the bus.
			Pass the generation number to functions that take or return FireWire node IDs.
		
			Availability: IOFireWireDeviceInterface_v4 and newer
			
		@param self The device interface to use.
		@param outGeneration A pointer to a UInt32 to hold the bus generation  number
		@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.*/	
	IOReturn (*GetBusGeneration)( IOFireWireLibDeviceRef self, UInt32* outGeneration ) ;

	/*!	@function GetLocalNodeIDWithGeneration
		@abstract Get node ID of local machine.
		@discussion Use this function instead of GetLocalNodeID().
		
			Availability: IOFireWireDeviceInterface_v4 and newer
			
		@param self The device interface to use.
		@param checkGeneration A bus generation number obtained from GetBusGeneration()
		@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
		@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
			kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.*/
	IOReturn (*GetLocalNodeIDWithGeneration)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, UInt16* outLocalNodeID ) ;

	/*!	@function GetRemoteNodeID
		@abstract Get node ID of device to which this interface is attached.
		@discussion
		
			Availability: IOFireWireDeviceInterface_v4 and newer
			
		@param self The device interface to use.
		@param checkGeneration A bus generation number obtained from GetBusGeneration()
		@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
		@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
			kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.*/
	IOReturn (*GetRemoteNodeID)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, UInt16* outRemoteNodeID ) ;

	/*!	@function GetSpeedToNode
		@abstract Get maximum transfer speed to device to which this interface is attached.
		@discussion
		
			Availability: IOFireWireDeviceInterface_v4 and newer
			
		@param self The device interface to use.
		@param checkGeneration A bus generation number obtained from GetBusGeneration()
		@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
		@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
			kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.*/
	IOReturn (*GetSpeedToNode)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, IOFWSpeed* outSpeed) ;

	/*!	@function GetSpeedBetweenNodes
		@abstract Get maximum transfer speed to device to which this interface is attached.
		@discussion
		
			Availability: IOFireWireDeviceInterface_v4 and newer
			
		@param self The device interface to use.
		@param checkGeneration A bus generation number obtained from GetBusGeneration()
		@param srcNodeID A FireWire node ID.
		@param destNodeID A FireWire node ID.
		@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
		@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
			kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.*/
	IOReturn (*GetSpeedBetweenNodes)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, UInt16 srcNodeID, UInt16 destNodeID,  IOFWSpeed* outSpeed) ;

} IOFireWireDeviceInterface, IOFireWireUnitInterface, IOFireWireNubInterface ;

$1723|/*!	@interface IOFireWireDeviceInterface
	@abstract IOFireWireDeviceInterface is your primary gateway to the functionality contained in
		IOFireWireLib.
	@discussion	
		You can use IOFireWireDeviceInterface to:<br>
	<ul>
		<li>perform synchronous read, write and lock operations</li>
		<li>perform other miscellanous bus operations, such as reset the FireWire bus. </li>
		<li>create FireWire command objects and interfaces used to perform
			synchronous/asynchronous read, write and lock operations. These include:</li>
		<ul type="square">
			<li>IOFireWireReadCommandInterface
			<li>IOFireWireReadQuadletCommandInterface
			<li>IOFireWireWriteCommandInterface
			<li>IOFireWireWriteQuadletCommandInterface
			<li>IOFireWireCompareSwapCommandInterface
		</ul>
		<li>create interfaces which provide a other extended services. These include:</li>
		<ul type="square">	
			<li>IOFireWirePseudoAddressSpaceInterface -- pseudo address space services</li>
			<li>IOFireWirePhysicalAddressSpaceInterface -- physical address space services</li>
			<li>IOFireWireLocalUnitDirectoryInterface -- manage local unit directories in the mac</li>
			<li>IOFireWireConfigDirectoryInterface -- access and browse remote device config directories</li>
		</ul>
		<li>create interfaces which provide isochronous services (see IOFireWireLibIsoch.h). These include:</li>
		<ul type="square">	
			<li>IOFireWireIsochChannelInterface -- create/manage talker and listener isoch channels</li>
			<li>IOFireWireLocalIsochPortInterface -- create local isoch ports</li>
			<li>IOFireWireRemoteIsochPortInterface -- create remote isoch ports</li>
			<li>IOFireWireDCLCommandPoolInterface -- create a DCL command pool allocator.</li>
		</ul>
	</ul>

*/
$0|$1967333|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 1
inInterface: 1
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 0
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 0
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/COM_interface_1.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{FULLPATH} => /test_suite_bogus_path/COM_interface_1.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => struct
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 1
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{curvarstars} => ************************************************************************************************************
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => 
$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 0
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inEnum} => 0
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{inTypedef} => 1
$parserState->{inUnion} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 291
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => C
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => IOFireWireDeviceInterface,IOFireWireUnitInterface,IOFireWireNubInterface;
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => IOFireWireDeviceInterface_t
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 3
$parserState->{onlyComments} => 0
$parserState->{parsedParamAtBrace} => ARRAY(OBJID)
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 1
$parserState->{parsedParamStateAtBrace} => ARRAY(OBJID)
$parserState->{posstypes} =>  typedef struct
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{returntype} =>  typedef struct IOFireWireDeviceInterface_t  {
         IUNKNOWN_C_GUTS
$parserState->{seenBraces} => 0
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => 
$parserState->{sodname} => 
$parserState->{sodtype} => 
$parserState->{stackFrozen} => 0
$parserState->{startOfDec} => 1
$parserState->{sublang} => C
$parserState->{temponlyComments} => 0
$parserState->{treePopTwo} => 0
$parserState->{typestring} => typedef
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 291
typelist: typedef typedef typedef struct
namelist: IOFireWireDeviceInterface,IOFireWireUnitInterface,IOFireWireNubInterface,IOFireWireDeviceInterface_t
posstypes:  typedef struct
value: 
returntype:  typedef struct IOFireWireDeviceInterface_t  {         IUNKNOWN_C_GUTS
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 606
conformsToList: 
functionContents: 
extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => IUNKNOWN_C_GUTS
Parsed Param 1 => UInt32 version, revision
Parsed Param 2 => Boolean                                (*InterfaceIsInited)(IOFireWireLibDeviceRef self)
Parsed Param 3 => io_object_t                        (*GetDevice)(IOFireWireLibDeviceRef self)
Parsed Param 4 => IOReturn                        (*Open)(IOFireWireLibDeviceRef self)
Parsed Param 5 => IOReturn                        (*OpenWithSessionRef)(IOFireWireLibDeviceRef self, IOFireWireSessionRef sessionRef)
Parsed Param 6 => void                                (*Close)(IOFireWireLibDeviceRef self)
Parsed Param 7 => const Boolean                (*NotificationIsOn)(IOFireWireLibDeviceRef self)
Parsed Param 8 => const IOReturn                 (*AddCallbackDispatcherToRunLoop)(IOFireWireLibDeviceRef self, CFRunLoopRef inRunLoop)
Parsed Param 9 => const void                        (*RemoveCallbackDispatcherFromRunLoop)(IOFireWireLibDeviceRef self)
Parsed Param 10 => const Boolean                 (*TurnOnNotification)(IOFireWireLibDeviceRef self)
Parsed Param 11 => void                                (*TurnOffNotification)(IOFireWireLibDeviceRef self)
Parsed Param 12 => const IOFireWireBusResetHandler                                                 (*SetBusResetHandler)(IOFireWireLibDeviceRef self, IOFireWireBusResetHandler handler)
Parsed Param 13 => const IOFireWireBusResetDoneHandler                                                 (*SetBusResetDoneHandler)(IOFireWireLibDeviceRef self, IOFireWireBusResetDoneHandler handler)
Parsed Param 14 => void                                (*ClientCommandIsComplete)(IOFireWireLibDeviceRef self, FWClientCommandID commandID, IOReturn status)
Parsed Param 15 => IOReturn                        (*Read)(IOFireWireLibDeviceRef        self,
                                                                io_object_t                 device,
                                                                const FWAddress* addr,
                                                                void*                                 buf,
                                                                UInt32*                         size,
                                                                Boolean                         failOnReset,
                                                                UInt32                                 generation)
Parsed Param 16 => IOReturn                        (*ReadQuadlet)(        IOFireWireLibDeviceRef        self,
                                                                                io_object_t                         device,
                                                                                const FWAddress*                 addr,
                                                                                UInt32*                                 val,
                                                                                Boolean                                 failOnReset,
                                                                                UInt32                                         generation)
Parsed Param 17 => IOReturn                        (*Write)(        IOFireWireLibDeviceRef         self,
                                                                        io_object_t                         device,
                                                                        const FWAddress*                 addr,
                                                                        const void*                         buf,
                                                                        UInt32*                                 size,
                                                                        Boolean                                 failOnReset,
                                                                        UInt32                                         generation)
Parsed Param 18 => IOReturn (*WriteQuadlet)(IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr, const UInt32 val, Boolean failOnReset, UInt32 generation)
Parsed Param 19 => IOReturn (*CompareSwap)(IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr, UInt32 cmpVal, UInt32 newVal, Boolean failOnReset, UInt32 generation)
Parsed Param 20 => IOFireWireLibCommandRef (*CreateReadCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress * addr, void* buf, UInt32 size, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 21 => IOFireWireLibCommandRef (*CreateReadQuadletCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress * addr, UInt32 quads[], UInt32 numQuads, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 22 => IOFireWireLibCommandRef (*CreateWriteCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress * addr, void* buf, UInt32  size, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 23 => IOFireWireLibCommandRef (*CreateWriteQuadletCommand)(IOFireWireLibDeviceRef        self, io_object_t device, const FWAddress *        addr, UInt32 quads[], UInt32 numQuads, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 24 => IOFireWireLibCommandRef (*CreateCompareSwapCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress *  addr, UInt32      cmpVal, UInt32      newVal, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 25 => IOReturn (*BusReset)( IOFireWireLibDeviceRef  self)
Parsed Param 26 => IOReturn (*GetCycleTime)( IOFireWireLibDeviceRef  self, UInt32*  outCycleTime)
Parsed Param 27 => IOReturn (*GetGenerationAndNodeID)( IOFireWireLibDeviceRef  self, UInt32*  outGeneration, UInt16*  outNodeID)
Parsed Param 28 => IOReturn (*GetLocalNodeID)( IOFireWireLibDeviceRef  self, UInt16*  outLocalNodeID)
Parsed Param 29 => IOReturn                        (*GetResetTime)(
                                                                IOFireWireLibDeviceRef         self,
                                                                AbsoluteTime*                         outResetTime)
Parsed Param 30 => IOFireWireLibLocalUnitDirectoryRef (*CreateLocalUnitDirectory)( IOFireWireLibDeviceRef  self, REFIID  iid)
Parsed Param 31 => IOFireWireLibConfigDirectoryRef (*GetConfigDirectory)( IOFireWireLibDeviceRef  self, REFIID  iid)
Parsed Param 32 => IOFireWireLibConfigDirectoryRef (*CreateConfigDirectoryWithIOObject)( IOFireWireLibDeviceRef  self, io_object_t  inObject, REFIID  iid)
Parsed Param 33 => IOFireWireLibPseudoAddressSpaceRef        (*CreatePseudoAddressSpace)(
                                                                                                IOFireWireLibDeviceRef          self,
                                                                                                UInt32                                          inSize,
                                                                                                void*                                                  inRefCon,
                                                                                                UInt32                                          inQueueBufferSize,
                                                                                                void*                                                  inBackingStore,
                                                                                                UInt32                                          inFlags,
                                                                                                REFIID                                          iid)
Parsed Param 34 => IOFireWireLibPhysicalAddressSpaceRef (*CreatePhysicalAddressSpace)( IOFireWireLibDeviceRef  self, UInt32  inSize, void*  inBackingStore, UInt32  inFlags, REFIID  iid)
Parsed Param 35 => IOReturn (*FireBugMsg)( IOFireWireLibDeviceRef  self, const char*  msg)
Parsed Param 36 => IOReturn                        (*AddIsochCallbackDispatcherToRunLoop)(
                                                                IOFireWireLibDeviceRef         self,
                                                                CFRunLoopRef                         inRunLoop)
Parsed Param 37 => IOFireWireLibRemoteIsochPortRef                                                 (*CreateRemoteIsochPort)(
                                                                IOFireWireLibDeviceRef        self,
                                                                Boolean                                        inTalking,
                                                                REFIID                                        iid)
Parsed Param 38 => IOFireWireLibLocalIsochPortRef                                                 (*CreateLocalIsochPort)(
                                                                IOFireWireLibDeviceRef         self,
                                                                Boolean                                        inTalking,
                                                                DCLCommandPtr                        inDCLProgram,
                                                                UInt32                                        inStartEvent,
                                                                UInt32                                        inStartState,
                                                                UInt32                                        inStartMask,
                                                                IOVirtualRange                        inDCLProgramRanges[],        
                                                                UInt32                                        inDCLProgramRangeCount,
                                                                IOVirtualRange                        inBufferRanges[],
                                                                UInt32                                        inBufferRangeCount,
                                                                REFIID                                         iid)
Parsed Param 39 => IOFireWireLibIsochChannelRef                                                 (*CreateIsochChannel)(
                                                                IOFireWireLibDeviceRef         self,
                                                                Boolean                                 doIrm,
                                                                UInt32                                         packetSize,
                                                                IOFWSpeed                                 prefSpeed,
                                                                REFIID                                         iid )
Parsed Param 40 => IOFireWireLibDCLCommandPoolRef                                                 (*CreateDCLCommandPool)(
                                                                IOFireWireLibDeviceRef        self,
                                                                IOByteCount                         size,
                                                                REFIID                                         iid )
Parsed Param 41 => void*                                (*GetRefCon)(
                                                                IOFireWireLibDeviceRef        self)
Parsed Param 42 => void                                (*SetRefCon)(
                                                                IOFireWireLibDeviceRef        self,
                                                                const void*                                refCon)
Parsed Param 43 => CFTypeRef                        (*GetDebugProperty)(
                                                                IOFireWireLibDeviceRef        self,
                                                                void*                                        interface,
                                                                CFStringRef                                inPropertyName,
                                                                CFTypeID*                                outPropertyType)
Parsed Param 44 => void                                 (*PrintDCLProgram)(
                                                                IOFireWireLibDeviceRef        self,
                                                                const DCLCommandPtr                inProgram,
                                                                UInt32                                         inLength)
Parsed Param 45 => IOFireWireLibPseudoAddressSpaceRef        (*CreateInitialUnitsPseudoAddressSpace)(
                                                                                                IOFireWireLibDeviceRef          self,
                                                                                                UInt32                                                inAddressLo,
                                                                                                UInt32                                          inSize,
                                                                                                void*                                                  inRefCon,
                                                                                                UInt32                                          inQueueBufferSize,
                                                                                                void*                                                  inBackingStore,
                                                                                                UInt32                                          inFlags,
                                                                                                REFIID                                          iid)
Parsed Param 46 => IOReturn                         (*AddCallbackDispatcherToRunLoopForMode)(
                                                                IOFireWireLibDeviceRef         self,
                                                                CFRunLoopRef                         inRunLoop,
                                                                CFStringRef                                inRunLoopMode )
Parsed Param 47 => IOReturn                        (*AddIsochCallbackDispatcherToRunLoopForMode)(
                                                                IOFireWireLibDeviceRef         self,
                                                                CFRunLoopRef                        inRunLoop,
                                                                CFStringRef                         inRunLoopMode )
Parsed Param 48 => void                                (*RemoveIsochCallbackDispatcherFromRunLoop)(
                                                                IOFireWireLibDeviceRef         self)
Parsed Param 49 => IOReturn                        (*Seize)(
                                                                IOFireWireLibDeviceRef         self,
                                                                IOOptionBits                        inFlags,
                                                                ... )
Parsed Param 50 => IOReturn                        (*FireLog)(
                                                                IOFireWireLibDeviceRef         self,
                                                                const char*                                format,
                                                                ... )
Parsed Param 51 => IOReturn (*GetBusCycleTime)( IOFireWireLibDeviceRef  self, UInt32*  outBusTime, UInt32*  outCycleTime)
Parsed Param 52 => IOFireWireLibCommandRef (*CreateCompareSwapCommand64)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr,
                                                                                                                                UInt64 cmpVal, UInt64 newVal, IOFireWireLibCommandCallback callback,
                                                                                                                                Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 53 => IOReturn (*CompareSwap64)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr,
                                                                                UInt32* expectedVal, UInt32* newVal, UInt32* oldVal, IOByteCount size,
                                                                                Boolean failOnReset, UInt32 generation)
Parsed Param 54 => IOReturn (*GetBusGeneration)( IOFireWireLibDeviceRef self, UInt32* outGeneration )
Parsed Param 55 => IOReturn (*GetLocalNodeIDWithGeneration)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, UInt16* outLocalNodeID )
Parsed Param 56 => IOReturn (*GetRemoteNodeID)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, UInt16* outRemoteNodeID )
Parsed Param 57 => IOReturn (*GetSpeedToNode)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, IOFWSpeed* outSpeed)
Parsed Param 58 => IOReturn (*GetSpeedBetweenNodes)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, UInt16 srcNodeID, UInt16 destNodeID,  IOFWSpeed* outSpeed)
-=: DUMP OF PARSE TREE :=-
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: COM interface 1
APIUID: //test_ref/doc/header/COM_interface_1.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: 
LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::CPPClass
    NAME: IOFireWireDeviceInterface
    APIUID: //test_ref/c/cl/IOFireWireDeviceInterface
    ABSTRACT: "<p>IOFireWireDeviceInterface is your primary gateway to the functionality contained in
IOFireWireLib.
"
    DISCUSSION: "<p>You can use IOFireWireDeviceInterface to:<br>
</p>
<ul>
<li><p>perform synchronous read, write and lock operations</p></li>
<li><p>perform other miscellanous bus operations, such as reset the FireWire bus. </p></li>
<li><p>create FireWire command objects and interfaces used to perform
synchronous/asynchronous read, write and lock operations. These include:</p></li>
<ul type="square">
<li><p>IOFireWireReadCommandInterface
</p>
</li><li><p>IOFireWireReadQuadletCommandInterface
</p>
</li><li><p>IOFireWireWriteCommandInterface
</p>
</li><li><p>IOFireWireWriteQuadletCommandInterface
</p>
</li><li><p>IOFireWireCompareSwapCommandInterface
</p></li></ul>
<li><p>create interfaces which provide a other extended services. These include:</p></li>
<ul type="square">	
<li><p>IOFireWirePseudoAddressSpaceInterface -- pseudo address space services</p></li>
<li><p>IOFireWirePhysicalAddressSpaceInterface -- physical address space services</p></li>
<li><p>IOFireWireLocalUnitDirectoryInterface -- manage local unit directories in the mac</p></li>
<li><p>IOFireWireConfigDirectoryInterface -- access and browse remote device config directories</p></li>
</ul>
<li><p>create interfaces which provide isochronous services (see IOFireWireLibIsoch.h). These include:</p></li>
<ul type="square">	
<li><p>IOFireWireIsochChannelInterface -- create/manage talker and listener isoch channels</p></li>
<li><p>IOFireWireLocalIsochPortInterface -- create local isoch ports</p></li>
<li><p>IOFireWireRemoteIsochPortInterface -- create remote isoch ports</p></li>
<li><p>IOFireWireDCLCommandPoolInterface -- create a DCL command pool allocator.</p></li>
</ul>
</ul>

"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::CPPClass"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p><b>Declared In</b></p><p><a href="../../index.html" logicalPath="//test_ref/doc/header/COM_interface_1.test" target="_top" machineGenerated="true">COM interface 1</a></p>

    LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: InterfaceIsInited
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/InterfaceIsInited
        ABSTRACT: "<p>Determine whether interface has been properly inited.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "Boolean"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/InterfaceIsInited/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetDevice
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetDevice
        ABSTRACT: "<p>Get the IOKit service to which this interface is connected.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "io_object_t"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetDevice/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Open
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Open
        ABSTRACT: "<p>Open the connected device for exclusive access. When you have
the device open using this method, all accesses by other clients of 
this device will be denied until Close() is called.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_2"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Open/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: OpenWithSessionRef
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/OpenWithSessionRef
        ABSTRACT: "<p>An open function which allows this interface to have access
to the device when already opened. The service which has already opened
the device must be able to provide an IOFireWireSessionRef.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_2"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: sessionRef
            TYPE: IOFireWireSessionRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/OpenWithSessionRef/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: IOFireWireSessionRef
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/OpenWithSessionRef/IOFireWireSessionRef
            ABSTRACT: ""
            DISCUSSION: "<p>The sessionRef returned from the client who has
the device open"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Close
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Close
        ABSTRACT: "<p>Release exclusive access to the device
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Close/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: NotificationIsOn
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/NotificationIsOn
        ABSTRACT: "<p>Determine whether callback notifications for this interface are currently active
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const Boolean"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/NotificationIsOn/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddCallbackDispatcherToRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop
        ABSTRACT: "<p>Installs the proper run loop event source to allow callbacks to function. This method
must be called before callback notifications for this interface or any interfaces
created using this interface can function.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop on which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: RemoveCallbackDispatcherFromRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop
        ABSTRACT: "<p>Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
the run loop event source that was added to the specified run loop preventing any 
future callbacks from being called
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: TurnOnNotification
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/TurnOnNotification
        ABSTRACT: "<p>Activates any callbacks specified for this device interface. Only works after 
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const Boolean"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/TurnOnNotification/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: TurnOffNotification
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/TurnOffNotification
        ABSTRACT: "<p>Deactivates and callbacks specified for this device interface. Reverses the 
effects of TurnOnNotification()
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/TurnOffNotification/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: SetBusResetHandler
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/SetBusResetHandler
        ABSTRACT: "<p>Sets the callback that should be called when a bus reset occurs. Note that this callback
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
resets might occur before bus reconfiguration has completed.)
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const IOFireWireBusResetHandler"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: handler
            TYPE: IOFireWireBusResetHandler
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetBusResetHandler/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: handler
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetBusResetHandler/handler
            ABSTRACT: ""
            DISCUSSION: "<p>Function pointer to the handler to install"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: SetBusResetDoneHandler
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/SetBusResetDoneHandler
        ABSTRACT: "<p>Sets the callback that should be called after a bus reset has occurred and reconfiguration
of the bus has been completed. This function will only be called once per bus reset.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const IOFireWireBusResetDoneHandler"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: handler
            TYPE: IOFireWireBusResetDoneHandler
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetBusResetDoneHandler/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: handler
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetBusResetDoneHandler/handler
            ABSTRACT: ""
            DISCUSSION: "<p>Function pointer to the handler to install"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: ClientCommandIsComplete
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/ClientCommandIsComplete
        ABSTRACT: "<p>This function must be called from callback routines once they have completed processing
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
parameter.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: commandID
            TYPE: FWClientCommandID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: status
            TYPE: IOReturn
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: commandID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ClientCommandIsComplete/commandID
            ABSTRACT: ""
            DISCUSSION: "<p>The command ID passed to the callback function when it was called"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: status
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ClientCommandIsComplete/status
            ABSTRACT: ""
            DISCUSSION: "<p>An IOReturn value indicating the completion status of the callback function"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Read
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Read
        ABSTRACT: "<p>Perform synchronous block read
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to read. 
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/buf
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a buffer where the results will be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/size
            ABSTRACT: ""
            DISCUSSION: "<p>Number of bytes to read"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in generation. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: ReadQuadlet
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/ReadQuadlet
        ABSTRACT: "<p>Perform synchronous quadlet read
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: val
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to read. 
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: value
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/value
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to where to data should be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in generation. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Write
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Write
        ABSTRACT: "<p>Perform synchronous block write
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: const void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/buf
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a buffer where the results will be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/size
            ABSTRACT: ""
            DISCUSSION: "<p>Number of bytes to read"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: WriteQuadlet
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/WriteQuadlet
        ABSTRACT: "<p>Perform synchronous quadlet write
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: val
            TYPE: const UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: val
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/val
            ABSTRACT: ""
            DISCUSSION: "<p>The value to write"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CompareSwap
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CompareSwap
        ABSTRACT: "<p>Perform synchronous lock operation
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/cmpVal
            ABSTRACT: ""
            DISCUSSION: "<p>The check/compare value"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/newVal
            ABSTRACT: ""
            DISCUSSION: "<p>Value to set"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateReadCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateReadCommand
        ABSTRACT: "<p>Create a block read command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/buf
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a buffer where the results will be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/size
            ABSTRACT: ""
            DISCUSSION: "<p>Number of bytes to read"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/callback
            ABSTRACT: ""
            DISCUSSION: "<p>Command completion callback."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateReadQuadletCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateReadQuadletCommand
        ABSTRACT: "<p>Create a quadlet read command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: quads
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: numQuads
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: quads
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/quads
            ABSTRACT: ""
            DISCUSSION: "<p>An array of quadlets where results should be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: numQuads
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/numQuads
            ABSTRACT: ""
            DISCUSSION: "<p>Number of quadlets to read"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: 
            TYPE: 
            APIUID: //test_ref/c/internal_temporary_object/CreateReadQuadletCommand
            ABSTRACT: ""
            DISCUSSION: " "
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateWriteCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateWriteCommand
        ABSTRACT: "<p>Create a block write command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/buf
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to the buffer containing the data to be written"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/size
            ABSTRACT: ""
            DISCUSSION: "<p>Number of bytes to write"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/callback
            ABSTRACT: ""
            DISCUSSION: "<p>Command completion callback."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateWriteQuadletCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateWriteQuadletCommand
        ABSTRACT: "<p>Create a quadlet write command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: quads
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: numQuads
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: quads
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/quads
            ABSTRACT: ""
            DISCUSSION: "<p>An array of quadlets containing quadlets to be written"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: numQuads
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/numQuads
            ABSTRACT: ""
            DISCUSSION: "<p>Number of quadlets to write"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateCompareSwapCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateCompareSwapCommand
        ABSTRACT: "<p>Create a quadlet compare/swap command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/cmpVal
            ABSTRACT: ""
            DISCUSSION: "<p>32-bit value expected at target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/newVal
            ABSTRACT: ""
            DISCUSSION: "<p>32-bit value to be set at target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/callback
            ABSTRACT: ""
            DISCUSSION: "<p>Command completion callback."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: BusReset
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/BusReset
        ABSTRACT: "<p>Cause a bus reset
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/BusReset/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetCycleTime
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetCycleTime
        ABSTRACT: "<p>Get bus cycle time.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outCycleTime
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetCycleTime/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outCycleTime
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetCycleTime/outCycleTime
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the result"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetGenerationAndNodeID
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetGenerationAndNodeID
        ABSTRACT: "<p>(Obsolete) Get bus generation and remote device node ID.
"
        DISCUSSION: "<p>Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
interface v4.
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outGeneration
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outNodeID
            TYPE: UInt16 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetGenerationAndNodeID/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetGenerationAndNodeID/outGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the generation result"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetGenerationAndNodeID/outNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt16 to hold the remote device node ID"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetLocalNodeID
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetLocalNodeID
        ABSTRACT: "<p>(Obsolete) Get local node ID.
"
        DISCUSSION: "<p>Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
interface v4.
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outLocalNodeID
            TYPE: UInt16 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeID/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeID/outNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt16 to hold the local device node ID"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetResetTime
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetResetTime
        ABSTRACT: "<p>Get time since last bus reset.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outResetTime
            TYPE: AbsoluteTime *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetResetTime/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outResetTime
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetResetTime/outResetTime
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to an AbsolutTime to hold the result."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateLocalUnitDirectory
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateLocalUnitDirectory
        ABSTRACT: "<p>Creates a local unit directory object and returns an interface to it. An
instance of a unit directory object corresponds to an instance of a unit 
directory in the local machine's configuration ROM.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibLocalUnitDirectoryRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalUnitDirectory/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalUnitDirectory/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created unit directory object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetConfigDirectory
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetConfigDirectory
        ABSTRACT: "<p>Creates a config directory object and returns an interface to it. The
created config directory object represents the config directory in the remote
device or unit to which the creating device interface is attached.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibConfigDirectoryRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetConfigDirectory/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetConfigDirectory/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created config directory object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateConfigDirectoryWithIOObject
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject
        ABSTRACT: "<p>This function can be used to create a config directory object and a
corresponding interface from an opaque IOObject reference. Some configuration
directory interface methods may return an io_object_t instead of an
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
IOFireWireLibConfigDirectoryRef from an io_object_t.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibConfigDirectoryRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inObject
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created config directory object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreatePseudoAddressSpace
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreatePseudoAddressSpace
        ABSTRACT: "<p>Creates a pseudo address space object and returns an interface to it. This
will create a pseudo address space (software-backed) on the local machine. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibPseudoAddressSpaceRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inQueueBufferSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size in bytes of this address space"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inRefCon
            ABSTRACT: ""
            DISCUSSION: "<p>A user specified reference value. This will be passed to all callback functions."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inQueueBufferSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inQueueBufferSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size of the queue which receives packets from the bus before they are handed to
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
the packet dropped callback will be called."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inBackingStore
            ABSTRACT: ""
            DISCUSSION: "<p>An optional block of allocated memory representing the contents of the address space."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inFlags
            ABSTRACT: ""
            DISCUSSION: "<p>A UInt32 with bits set corresponding to the flags that should be set
for this address space.
</p>
<ul>
<li><p>kFWAddressSpaceNoFlags -- All flags off</p></li>
<li><p>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
Setting this flag also disables compare/swap transactions on this address space.</p></li>
<li><p>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
Setting this flag also disables compare/swap transactions on this address space.</p></li>
<li><p>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
of the backing store. The user process will not be notified of writes.</p></li>
<li><p>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
using the contents of the backing store. The user process will not be notified of reads.</p></li>
<li><p>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
to the backing store at the same time the user process is notified of a write.</p></li>
</ul>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created pseudo address space object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreatePhysicalAddressSpace
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace
        ABSTRACT: "<p>Creates a physical address space object and returns an interface to it. This
will create a physical address space on the local machine. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibPhysicalAddressSpaceRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/inBackingStore
            ABSTRACT: ""
            DISCUSSION: "<p>An block of allocated memory representing the contents of the address space."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/inSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size in bytes of this address space"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/inFlags
            ABSTRACT: ""
            DISCUSSION: "<p>A UInt32 with bits set corresponding to the flags that should be set
for this address space. For future use -- always pass 0."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created physical address space object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddIsochCallbackDispatcherToRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop
        ABSTRACT: "<p>This function adds an event source for the isochronous callback dispatcher
to the specified CFRunLoop. Isochronous related callbacks will not function
before this function is called. This functions is similar to 
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
from that passed to AddCallbackDispatcherToRunLoop. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>A CFRunLoopRef for the run loop to which the event loop source 
should be added"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateRemoteIsochPort
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateRemoteIsochPort
        ABSTRACT: "<p>Creates a remote isochronous port object and returns an interface to it. A
remote isochronous port object is an abstract entity used to represent a remote
talker or listener device on an isochronous channel. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibRemoteIsochPortRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inTalking
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateRemoteIsochPort/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inTalking
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateRemoteIsochPort/inTalking
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if this port represents an isochronous talker. Pass
false if this port represents an isochronous listener."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateRemoteIsochPort/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created remote isochronous port object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateLocalIsochPort
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateLocalIsochPort
        ABSTRACT: "<p>Creates a local isochronous port object and returns an interface to it. A
local isochronous port object is an abstract entity used to represent a
talking or listening endpoint in the local machine. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibLocalIsochPortRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inTalking
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgram
            TYPE: DCLCommandPtr
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartEvent
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartState
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartMask
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgramRanges
            TYPE: IOVirtualRange
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgramRangeCount
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBufferRanges
            TYPE: IOVirtualRange
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBufferRangeCount
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inTalking
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inTalking
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if this port represents an isochronous talker. Pass
false if this port represents an isochronous listener."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgram
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inDCLProgram
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to the first DCL command struct of the DCL program
to be compiled and used to send or receive data on this port."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartEvent
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inStartEvent
            ABSTRACT: ""
            DISCUSSION: "<p>Start event bits"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartState
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inStartState
            ABSTRACT: ""
            DISCUSSION: "<p>Start state bits"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartMask
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inStartMask
            ABSTRACT: ""
            DISCUSSION: "<p>Start mask bits"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgramRanges
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inDCLProgramRanges
            ABSTRACT: ""
            DISCUSSION: "<p>This is an optional optimization parameter which can be used
to decrease the time the local port object spends determining which set of virtual
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
structs or nil to ignore this parameter."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgramRangeCount
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inDCLProgramRangeCount
            ABSTRACT: ""
            DISCUSSION: "<p>The number of virtual ranges passed to inDCLProgramRanges.
Pass 0 for none."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBufferRanges
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inBufferRanges
            ABSTRACT: ""
            DISCUSSION: "<p>This is an optional optimization parameter which can be used
to decrease the time the local port object spends determining which set of virtual
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
to an array of IOVirtualRange structs or nil to ignore this parameter."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBufferRangeCount
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inBufferRangeCount
            ABSTRACT: ""
            DISCUSSION: "<p>The number of virtual ranges passed to inBufferRanges.
Pass 0 for none."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateIsochChannel
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateIsochChannel
        ABSTRACT: "<p>Creates an isochronous channel object and returns an interface to it. An
isochronous channel object is an abstract entity used to represent a
FireWire isochronous channel. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibIsochChannelRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: doIrm
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: packetSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: prefSpeed
            TYPE: IOFWSpeed
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: doIRM
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/doIRM
            ABSTRACT: ""
            DISCUSSION: "<p>Controls whether the channel automatically performs IRM operations. 
Pass true if the channel should allocate its channel and bandwidth with
the IRM. Pass false to ignore the IRM."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: packetSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/packetSize
            ABSTRACT: ""
            DISCUSSION: "<p>Size in bytes of packets being sent or received with this channel.
This is automatically translated into a bandwidth allocation appropriate
for the speed passed in prefSpeed."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: prefSpeed
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/prefSpeed
            ABSTRACT: ""
            DISCUSSION: "<p>The preferred bus speed of this channel."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateDCLCommandPool
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateDCLCommandPool
        ABSTRACT: "<p>Creates a command pool object and returns an interface to it. The command 
pool can be used to build DCL programs.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibDCLCommandPoolRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: IOByteCount
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateDCLCommandPool/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateDCLCommandPool/size
            ABSTRACT: ""
            DISCUSSION: "<p>Starting size of command pool"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateDCLCommandPool/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetRefCon
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetRefCon
        ABSTRACT: "<p>Get user reference value set on this interface
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void *"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetRefCon/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: SetRefCon
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/SetRefCon
        ABSTRACT: "<p>Set user reference value on this interface
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: refCon
            TYPE: const void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetRefCon/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: refCon
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetRefCon/refCon
            ABSTRACT: ""
            DISCUSSION: "<p>The reference value to set."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: PrintDCLProgram
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/PrintDCLProgram
        ABSTRACT: "<p>Walk a DCL program linked list and print its contents
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inProgram
            TYPE: const DCLCommandPtr
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inLength
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/PrintDCLProgram/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inProgram
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/PrintDCLProgram/inProgram
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to the first DCL of the program to print"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inLength
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/PrintDCLProgram/inLength
            ABSTRACT: ""
            DISCUSSION: "<p>Number of DCLs expected in the program. PrintDCLProgram() will
report an error if this number does not match the number of DCLs found
in the program."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateInitialUnitsPseudoAddressSpace
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace
        ABSTRACT: "<p>Creates a pseudo address space in initial units space.
"
        DISCUSSION: "<p>Creates a pseudo address space object in initial units space and returns an interface to it. This
will create a pseudo address space (software-backed) on the local machine.
</p>
<p>Availablilty: IOFireWireDeviceInterface_v3,  and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibPseudoAddressSpaceRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inAddressLo
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inQueueBufferSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inAddressLo
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inAddressLo
            ABSTRACT: ""
            DISCUSSION: "<p>The lower 32 bits of the base address of the address space to be created. The address is always
in initial units space."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size in bytes of this address space"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inRefCon
            ABSTRACT: ""
            DISCUSSION: "<p>A user specified reference value. This will be passed to all callback functions."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inQueueBufferSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inQueueBufferSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size of the queue which receives packets from the bus before they are handed to
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
the packet dropped callback will be called."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inBackingStore
            ABSTRACT: ""
            DISCUSSION: "<p>An optional block of allocated memory representing the contents of the address space."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inFlags
            ABSTRACT: ""
            DISCUSSION: "<p>A UInt32 with bits set corresponding to the flags that should be set
for this address space.
</p>
<ul>
<li><p>kFWAddressSpaceNoFlags -- All flags off</p></li>
<li><p>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
Setting this flag also disables compare/swap transactions on this address space.</p></li>
<li><p>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
Setting this flag also disables compare/swap transactions on this address space.</p></li>
<li><p>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
of the backing store. The user process will not be notified of writes.</p></li>
<li><p>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
using the contents of the backing store. The user process will not be notified of reads.</p></li>
<li><p>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
to the backing store at the same time the user process is notified of a write. Clients
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</p></li>
<li><p>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
already has an address space at the requested address. All clients will be notified of writes to
covered addresses.</p></li>
</ul>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created pseudo address space object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddCallbackDispatcherToRunLoopForMode
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode
        ABSTRACT: "<p>Add a run loop event source to allow IOFireWireLib callbacks to function.
"
        DISCUSSION: "<p>Installs the proper run loop event source to allow callbacks to function. This method
must be called before callback notifications for this interface or any interfaces
created using this interface can function. With this function, you can additionally specify
for which run loop modes this source should be added.
</p>
<p>Availability: IOFireWireDeviceInterface_v3, and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: CFStringRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop on which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode/inRunLoopMode
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop mode(s) for which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddIsochCallbackDispatcherToRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop_DONTLINK_1
        ABSTRACT: "<p>Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
"
        DISCUSSION: "<p>This function adds an event source for the isochronous callback dispatcher
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
</p>
<p>Availability: IOFireWireDeviceInterface_v3, and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: CFStringRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>A CFRunLoopRef for the run loop to which the event loop source 
should be added"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/inRunLoopMode
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop mode(s) for which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddIsochCallbackDispatcherToRunLoopForMode
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode
        ABSTRACT: "<p>Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
"
        DISCUSSION: "<p>This function adds an event source for the isochronous callback dispatcher
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
</p>
<p>Availability: IOFireWireDeviceInterface_v3, and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: CFStringRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>A CFRunLoopRef for the run loop to which the event loop source 
should be added"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode/inRunLoopMode
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop mode(s) for which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: RemoveIsochCallbackDispatcherFromRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop
        ABSTRACT: "<p>Removes an IOFireWireLib-added run loop event source.
"
        DISCUSSION: "<p>Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
the run loop event source that was added to the specified run loop preventing any 
future callbacks from being called.
</p>
<p>Availability: IOFireWireDeviceInterface_v3, and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Seize
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Seize
        ABSTRACT: "<p>Seize control of device/unit
"
        DISCUSSION: "<p>Allows a user space client to seize control of an in-kernel service even if
that service has been Opened() by another client or in-kernel driver. This function should be
used with care. Admin rights are required to use this function.
</p>
<p>Calling this method makes it appear to all other drivers that the device has been unplugged.
Open() should be called after this method has been invoked.
</p>
<p>When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: IOOptionBits
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: ...
            TYPE:  ...
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Seize/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: reserved
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Seize/reserved
            ABSTRACT: ""
            DISCUSSION: "<p>Reserved for future use. Set to NULL."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: FireLog
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/FireLog
        ABSTRACT: "<p>Logs string to in-kernel debug buffer
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: format
            TYPE: const char *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: ...
            TYPE:  ...
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/FireLog/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetBusCycleTime
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetBusCycleTime
        ABSTRACT: "<p>Get bus and cycle time.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outBusTime
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outCycleTime
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusCycleTime/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outBusTime
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusCycleTime/outBusTime
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the bus time"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outCycleTime
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusCycleTime/outCycleTime
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the cycle time"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateCompareSwapCommand64
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateCompareSwapCommand64
        ABSTRACT: "<p>Create a quadlet compare/swap command object and initialize it with 64-bit values.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: UInt64
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: UInt64
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/cmpVal
            ABSTRACT: ""
            DISCUSSION: "<p>64-bit value expected at target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/newVal
            ABSTRACT: ""
            DISCUSSION: "<p>64-bit value to be set at target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/callback
            ABSTRACT: ""
            DISCUSSION: "<p>Command completion callback."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CompareSwap64
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CompareSwap64
        ABSTRACT: "<p>Perform synchronous lock operation
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: expectedVal
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: oldVal
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: IOByteCount
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported.
</p>
<p>If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
successful."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: expectedVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/expectedVal
            ABSTRACT: ""
            DISCUSSION: "<p>Pointer to quadlets expected at target."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/newVal
            ABSTRACT: ""
            DISCUSSION: "<p>Pointer to quadlets to atomically set at target if compare is successful."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: oldVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/oldVal
            ABSTRACT: ""
            DISCUSSION: "<p>Pointer to quadlets to hold value found at target address after transaction if completed."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/size
            ABSTRACT: ""
            DISCUSSION: "<p>Size in bytes of compare swap transaction to perform. Value values are 4 and 8."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetBusGeneration
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetBusGeneration
        ABSTRACT: "<p>Get bus generation number.
"
        DISCUSSION: "<p>The bus generation number stays constant between bus resets and can be
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
Pass the generation number to functions that take or return FireWire node IDs.
</p>
<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outGeneration
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusGeneration/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusGeneration/outGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the bus generation  number"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetLocalNodeIDWithGeneration
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration
        ABSTRACT: "<p>Get node ID of local machine.
"
        DISCUSSION: "<p>Use this function instead of GetLocalNodeID().
</p>
<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outLocalNodeID
            TYPE: UInt16 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration/checkGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A bus generation number obtained from GetBusGeneration()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outLocalNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration/outLocalNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt16 to hold the node ID of the local machine."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetRemoteNodeID
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetRemoteNodeID
        ABSTRACT: "<p>Get node ID of device to which this interface is attached.
"
        DISCUSSION: "<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outRemoteNodeID
            TYPE: UInt16 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetRemoteNodeID/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetRemoteNodeID/checkGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A bus generation number obtained from GetBusGeneration()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outRemoteNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetRemoteNodeID/outRemoteNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt16 to hold the node ID of the remote device."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetSpeedToNode
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetSpeedToNode
        ABSTRACT: "<p>Get maximum transfer speed to device to which this interface is attached.
"
        DISCUSSION: "<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outSpeed
            TYPE: IOFWSpeed *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedToNode/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedToNode/checkGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A bus generation number obtained from GetBusGeneration()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outSpeed
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedToNode/outSpeed
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to an IOFWSpeed to hold the maximum speed to the remote device."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetSpeedBetweenNodes
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetSpeedBetweenNodes
        ABSTRACT: "<p>Get maximum transfer speed to device to which this interface is attached.
"
        DISCUSSION: "<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: srcNodeID
            TYPE: UInt16
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: destNodeID
            TYPE: UInt16
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outSpeed
            TYPE: IOFWSpeed *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/checkGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A bus generation number obtained from GetBusGeneration()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: srcNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/srcNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A FireWire node ID."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: destNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/destNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A FireWire node ID."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outSpeed
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/outSpeed
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::CPPClass
    NAME: IOFireWireUnitInterface
    APIUID: //test_ref/c/cl/IOFireWireUnitInterface
    ABSTRACT: "<p>IOFireWireDeviceInterface is your primary gateway to the functionality contained in
IOFireWireLib.
"
    DISCUSSION: "<p>You can use IOFireWireDeviceInterface to:<br>
</p>
<ul>
<li><p>perform synchronous read, write and lock operations</p></li>
<li><p>perform other miscellanous bus operations, such as reset the FireWire bus. </p></li>
<li><p>create FireWire command objects and interfaces used to perform
synchronous/asynchronous read, write and lock operations. These include:</p></li>
<ul type="square">
<li><p>IOFireWireReadCommandInterface
</p>
</li><li><p>IOFireWireReadQuadletCommandInterface
</p>
</li><li><p>IOFireWireWriteCommandInterface
</p>
</li><li><p>IOFireWireWriteQuadletCommandInterface
</p>
</li><li><p>IOFireWireCompareSwapCommandInterface
</p></li></ul>
<li><p>create interfaces which provide a other extended services. These include:</p></li>
<ul type="square">	
<li><p>IOFireWirePseudoAddressSpaceInterface -- pseudo address space services</p></li>
<li><p>IOFireWirePhysicalAddressSpaceInterface -- physical address space services</p></li>
<li><p>IOFireWireLocalUnitDirectoryInterface -- manage local unit directories in the mac</p></li>
<li><p>IOFireWireConfigDirectoryInterface -- access and browse remote device config directories</p></li>
</ul>
<li><p>create interfaces which provide isochronous services (see IOFireWireLibIsoch.h). These include:</p></li>
<ul type="square">	
<li><p>IOFireWireIsochChannelInterface -- create/manage talker and listener isoch channels</p></li>
<li><p>IOFireWireLocalIsochPortInterface -- create local isoch ports</p></li>
<li><p>IOFireWireRemoteIsochPortInterface -- create remote isoch ports</p></li>
<li><p>IOFireWireDCLCommandPoolInterface -- create a DCL command pool allocator.</p></li>
</ul>
</ul>

"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::CPPClass"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p><b>Declared In</b></p><p><a href="../../index.html" logicalPath="//test_ref/doc/header/COM_interface_1.test" target="_top" machineGenerated="true">COM interface 1</a></p>

    LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::CPPClass
    NAME: IOFireWireNubInterface
    APIUID: //test_ref/c/cl/IOFireWireNubInterface
    ABSTRACT: "<p>IOFireWireDeviceInterface is your primary gateway to the functionality contained in
IOFireWireLib.
"
    DISCUSSION: "<p>You can use IOFireWireDeviceInterface to:<br>
</p>
<ul>
<li><p>perform synchronous read, write and lock operations</p></li>
<li><p>perform other miscellanous bus operations, such as reset the FireWire bus. </p></li>
<li><p>create FireWire command objects and interfaces used to perform
synchronous/asynchronous read, write and lock operations. These include:</p></li>
<ul type="square">
<li><p>IOFireWireReadCommandInterface
</p>
</li><li><p>IOFireWireReadQuadletCommandInterface
</p>
</li><li><p>IOFireWireWriteCommandInterface
</p>
</li><li><p>IOFireWireWriteQuadletCommandInterface
</p>
</li><li><p>IOFireWireCompareSwapCommandInterface
</p></li></ul>
<li><p>create interfaces which provide a other extended services. These include:</p></li>
<ul type="square">	
<li><p>IOFireWirePseudoAddressSpaceInterface -- pseudo address space services</p></li>
<li><p>IOFireWirePhysicalAddressSpaceInterface -- physical address space services</p></li>
<li><p>IOFireWireLocalUnitDirectoryInterface -- manage local unit directories in the mac</p></li>
<li><p>IOFireWireConfigDirectoryInterface -- access and browse remote device config directories</p></li>
</ul>
<li><p>create interfaces which provide isochronous services (see IOFireWireLibIsoch.h). These include:</p></li>
<ul type="square">	
<li><p>IOFireWireIsochChannelInterface -- create/manage talker and listener isoch channels</p></li>
<li><p>IOFireWireLocalIsochPortInterface -- create local isoch ports</p></li>
<li><p>IOFireWireRemoteIsochPortInterface -- create remote isoch ports</p></li>
<li><p>IOFireWireDCLCommandPoolInterface -- create a DCL command pool allocator.</p></li>
</ul>
</ul>

"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::CPPClass"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p><b>Declared In</b></p><p><a href="../../index.html" logicalPath="//test_ref/doc/header/COM_interface_1.test" target="_top" machineGenerated="true">COM interface 1</a></p>

    LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::CPPClass
    NAME: IOFireWireDeviceInterface_t
    APIUID: //test_ref/c/cl/IOFireWireDeviceInterface_t
    ABSTRACT: "<p>IOFireWireDeviceInterface is your primary gateway to the functionality contained in
IOFireWireLib.
"
    DISCUSSION: "<p>You can use IOFireWireDeviceInterface to:<br>
</p>
<ul>
<li><p>perform synchronous read, write and lock operations</p></li>
<li><p>perform other miscellanous bus operations, such as reset the FireWire bus. </p></li>
<li><p>create FireWire command objects and interfaces used to perform
synchronous/asynchronous read, write and lock operations. These include:</p></li>
<ul type="square">
<li><p>IOFireWireReadCommandInterface
</p>
</li><li><p>IOFireWireReadQuadletCommandInterface
</p>
</li><li><p>IOFireWireWriteCommandInterface
</p>
</li><li><p>IOFireWireWriteQuadletCommandInterface
</p>
</li><li><p>IOFireWireCompareSwapCommandInterface
</p></li></ul>
<li><p>create interfaces which provide a other extended services. These include:</p></li>
<ul type="square">	
<li><p>IOFireWirePseudoAddressSpaceInterface -- pseudo address space services</p></li>
<li><p>IOFireWirePhysicalAddressSpaceInterface -- physical address space services</p></li>
<li><p>IOFireWireLocalUnitDirectoryInterface -- manage local unit directories in the mac</p></li>
<li><p>IOFireWireConfigDirectoryInterface -- access and browse remote device config directories</p></li>
</ul>
<li><p>create interfaces which provide isochronous services (see IOFireWireLibIsoch.h). These include:</p></li>
<ul type="square">	
<li><p>IOFireWireIsochChannelInterface -- create/manage talker and listener isoch channels</p></li>
<li><p>IOFireWireLocalIsochPortInterface -- create local isoch ports</p></li>
<li><p>IOFireWireRemoteIsochPortInterface -- create remote isoch ports</p></li>
<li><p>IOFireWireDCLCommandPoolInterface -- create a DCL command pool allocator.</p></li>
</ul>
</ul>

"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::CPPClass"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p><b>Declared In</b></p><p><a href="../../index.html" logicalPath="//test_ref/doc/header/COM_interface_1.test" target="_top" machineGenerated="true">COM interface 1</a></p>

    LONG ATTRIBUTES: 
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: InterfaceIsInited (HeaderDoc::Function)
+---Boolean
+---                                
+---(
|   +---*
|   +---InterfaceIsInited
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetDevice (HeaderDoc::Function)
+---io_object_t
+---                        
+---(
|   +---*
|   +---GetDevice
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Open (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---Open
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: OpenWithSessionRef (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---OpenWithSessionRef
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---IOFireWireSessionRef
|   +--- 
|   +---sessionRef
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Close (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---Close
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: NotificationIsOn (HeaderDoc::Function)
+---const
+--- 
+---Boolean
+---                
+---(
|   +---*
|   +---NotificationIsOn
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddCallbackDispatcherToRunLoop (HeaderDoc::Function)
+---const
+--- 
+---IOReturn
+---                 
+---(
|   +---*
|   +---AddCallbackDispatcherToRunLoop
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---CFRunLoopRef
|   +--- 
|   +---inRunLoop
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: RemoveCallbackDispatcherFromRunLoop (HeaderDoc::Function)
+---const
+--- 
+---void
+---                        
+---(
|   +---*
|   +---RemoveCallbackDispatcherFromRunLoop
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: TurnOnNotification (HeaderDoc::Function)
+---const
+--- 
+---Boolean
+---                 
+---(
|   +---*
|   +---TurnOnNotification
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: TurnOffNotification (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---TurnOffNotification
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: SetBusResetHandler (HeaderDoc::Function)
+---const
+--- 
+---IOFireWireBusResetHandler
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---SetBusResetHandler
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---IOFireWireBusResetHandler
|   +--- 
|   +---handler
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: SetBusResetDoneHandler (HeaderDoc::Function)
+---const
+--- 
+---IOFireWireBusResetDoneHandler
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---SetBusResetDoneHandler
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +--- 
|   +---handler
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: ClientCommandIsComplete (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---ClientCommandIsComplete
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---FWClientCommandID
|   +--- 
|   +---commandID
|   +---,
|   +--- 
|   +---IOReturn
|   +--- 
|   +---status
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Read (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---Read
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---io_object_t
|   +---                 
|   +---device
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---void
|   +---*
|   +---                                 
|   +---buf
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---*
|   +---                         
|   +---size
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---Boolean
|   +---                         
|   +---failOnReset
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                 
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: ReadQuadlet (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---ReadQuadlet
|   +---)
+---(
|   +---        
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---io_object_t
|   +---                         
|   +---device
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +---                 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---UInt32
|   +---*
|   +---                                 
|   +---val
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---Boolean
|   +---                                 
|   +---failOnReset
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---UInt32
|   +---                                         
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Write (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---Write
|   +---)
+---(
|   +---        
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---io_object_t
|   +---                         
|   +---device
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +---                 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---const
|   +--- 
|   +---void
|   +---*
|   +---                         
|   +---buf
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---UInt32
|   +---*
|   +---                                 
|   +---size
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---Boolean
|   +---                                 
|   +---failOnReset
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---UInt32
|   +---                                         
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: WriteQuadlet (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---WriteQuadlet
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---UInt32
|   +--- 
|   +---val
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CompareSwap (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---CompareSwap
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---cmpVal
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---newVal
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateReadCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateReadCommand
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---buf
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---size
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateReadQuadletCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateReadQuadletCommand
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---quads
|   +---[
|   |   +---]
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---numQuads
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateWriteCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateWriteCommand
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---buf
|   +---,
|   +--- 
|   +---UInt32
|   +---  
|   +---size
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateWriteQuadletCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateWriteQuadletCommand
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +---        
|   +---addr
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---quads
|   +---[
|   |   +---]
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---numQuads
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateCompareSwapCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateCompareSwapCommand
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +---  
|   +---addr
|   +---,
|   +--- 
|   +---UInt32
|   +---      
|   +---cmpVal
|   +---,
|   +--- 
|   +---UInt32
|   +---      
|   +---newVal
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: BusReset (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---BusReset
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetCycleTime (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetCycleTime
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +---  
|   +---outCycleTime
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetGenerationAndNodeID (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetGenerationAndNodeID
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +---  
|   +---outGeneration
|   +---,
|   +--- 
|   +---UInt16
|   +---*
|   +---  
|   +---outNodeID
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetLocalNodeID (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetLocalNodeID
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt16
|   +---*
|   +---  
|   +---outLocalNodeID
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetResetTime (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---GetResetTime
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---AbsoluteTime
|   +---*
|   +---                         
|   +---outResetTime
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateLocalUnitDirectory (HeaderDoc::Function)
+---IOFireWireLibLocalUnitDirectoryRef
+--- 
+---(
|   +---*
|   +---CreateLocalUnitDirectory
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---REFIID
|   +---  
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetConfigDirectory (HeaderDoc::Function)
+---IOFireWireLibConfigDirectoryRef
+--- 
+---(
|   +---*
|   +---GetConfigDirectory
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---REFIID
|   +---  
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateConfigDirectoryWithIOObject (HeaderDoc::Function)
+---IOFireWireLibConfigDirectoryRef
+--- 
+---(
|   +---*
|   +---CreateConfigDirectoryWithIOObject
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +---  
|   +---inObject
|   +---,
|   +--- 
|   +---REFIID
|   +---  
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreatePseudoAddressSpace (HeaderDoc::Function)
+---IOFireWireLibPseudoAddressSpaceRef
+---        
+---(
|   +---*
|   +---CreatePseudoAddressSpace
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---IOFireWireLibDeviceRef
|   +---          
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---void
|   +---*
|   +---                                                  
|   +---inRefCon
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inQueueBufferSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---void
|   +---*
|   +---                                                  
|   +---inBackingStore
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inFlags
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---REFIID
|   +---                                          
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreatePhysicalAddressSpace (HeaderDoc::Function)
+---IOFireWireLibPhysicalAddressSpaceRef
+--- 
+---(
|   +---*
|   +---CreatePhysicalAddressSpace
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---  
|   +---inSize
|   +---,
|   +--- 
|   +---void
|   +---*
|   +---  
|   +---inBackingStore
|   +---,
|   +--- 
|   +---UInt32
|   +---  
|   +---inFlags
|   +---,
|   +--- 
|   +---REFIID
|   +---  
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoop (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---AddIsochCallbackDispatcherToRunLoop
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFRunLoopRef
|   +---                         
|   +---inRunLoop
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateRemoteIsochPort (HeaderDoc::Function)
+---IOFireWireLibRemoteIsochPortRef
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---CreateRemoteIsochPort
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---Boolean
|   +---                                        
|   +---inTalking
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---REFIID
|   +---                                        
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateLocalIsochPort (HeaderDoc::Function)
+---IOFireWireLibLocalIsochPortRef
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---CreateLocalIsochPort
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---Boolean
|   +---                                        
|   +---inTalking
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---DCLCommandPtr
|   +---                        
|   +---inDCLProgram
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inStartEvent
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inStartState
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inStartMask
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOVirtualRange
|   +---                        
|   +---inDCLProgramRanges
|   +---[
|   |   +---]
|   +---,
|   +---        
|   +---//
|   |   +--- 
|   |   +---optional optimization parameters
|   |   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inDCLProgramRangeCount
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOVirtualRange
|   +---                        
|   +---inBufferRanges
|   +---[
|   |   +---]
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inBufferRangeCount
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---REFIID
|   +---                                         
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateIsochChannel (HeaderDoc::Function)
+---IOFireWireLibIsochChannelRef
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---CreateIsochChannel
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---Boolean
|   +---                                 
|   +---doIrm
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                         
|   +---packetSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFWSpeed
|   +---                                 
|   +---prefSpeed
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---REFIID
|   +---                                         
|   +---iid
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateDCLCommandPool (HeaderDoc::Function)
+---IOFireWireLibDCLCommandPoolRef
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---CreateDCLCommandPool
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOByteCount
|   +---                         
|   +---size
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---REFIID
|   +---                                         
|   +---iid
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetRefCon (HeaderDoc::Function)
+---void
+---*
+---                                
+---(
|   +---*
|   +---GetRefCon
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: SetRefCon (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---SetRefCon
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---const
|   +--- 
|   +---void
|   +---*
|   +---                                
|   +---refCon
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: PrintDCLProgram (HeaderDoc::Function)
+---void
+---                                 
+---(
|   +---*
|   +---PrintDCLProgram
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---const
|   +--- 
|   +---DCLCommandPtr
|   +---                
|   +---inProgram
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                         
|   +---inLength
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateInitialUnitsPseudoAddressSpace (HeaderDoc::Function)
+---IOFireWireLibPseudoAddressSpaceRef
+---        
+---(
|   +---*
|   +---CreateInitialUnitsPseudoAddressSpace
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---IOFireWireLibDeviceRef
|   +---          
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                                
|   +---inAddressLo
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---void
|   +---*
|   +---                                                  
|   +---inRefCon
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inQueueBufferSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---void
|   +---*
|   +---                                                  
|   +---inBackingStore
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inFlags
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---REFIID
|   +---                                          
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
+---IOReturn
+---                         
+---(
|   +---*
|   +---AddCallbackDispatcherToRunLoopForMode
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFRunLoopRef
|   +---                         
|   +---inRunLoop
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFStringRef
|   +---                                
|   +---inRunLoopMode
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---AddIsochCallbackDispatcherToRunLoopForMode
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFRunLoopRef
|   +---                        
|   +---inRunLoop
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFStringRef
|   +---                         
|   +---inRunLoopMode
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---AddIsochCallbackDispatcherToRunLoopForMode
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFRunLoopRef
|   +---                        
|   +---inRunLoop
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFStringRef
|   +---                         
|   +---inRunLoopMode
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: RemoveIsochCallbackDispatcherFromRunLoop (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---RemoveIsochCallbackDispatcherFromRunLoop
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Seize (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---Seize
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOOptionBits
|   +---                        
|   +---inFlags
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---.
|   +---.
|   +---.
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: FireLog (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---FireLog
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---const
|   +--- 
|   +---char
|   +---*
|   +---                                
|   +---format
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---.
|   +---.
|   +---.
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetBusCycleTime (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetBusCycleTime
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +---  
|   +---outBusTime
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +---  
|   +---outCycleTime
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateCompareSwapCommand64 (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateCompareSwapCommand64
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                                                
|   +---UInt64
|   +--- 
|   +---cmpVal
|   +---,
|   +--- 
|   +---UInt64
|   +--- 
|   +---newVal
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                                                
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CompareSwap64 (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---CompareSwap64
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---UInt32
|   +---*
|   +--- 
|   +---expectedVal
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +--- 
|   +---newVal
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +--- 
|   +---oldVal
|   +---,
|   +--- 
|   +---IOByteCount
|   +--- 
|   +---size
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetBusGeneration (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetBusGeneration
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +--- 
|   +---outGeneration
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetLocalNodeIDWithGeneration (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetLocalNodeIDWithGeneration
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---checkGeneration
|   +---,
|   +--- 
|   +---UInt16
|   +---*
|   +--- 
|   +---outLocalNodeID
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetRemoteNodeID (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetRemoteNodeID
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---checkGeneration
|   +---,
|   +--- 
|   +---UInt16
|   +---*
|   +--- 
|   +---outRemoteNodeID
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetSpeedToNode (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetSpeedToNode
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---checkGeneration
|   +---,
|   +--- 
|   +---IOFWSpeed
|   +---*
|   +--- 
|   +---outSpeed
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetSpeedBetweenNodes (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetSpeedBetweenNodes
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---checkGeneration
|   +---,
|   +--- 
|   +---UInt16
|   +--- 
|   +---srcNodeID
|   +---,
|   +--- 
|   +---UInt16
|   +--- 
|   +---destNodeID
|   +---,
|   +---  
|   +---IOFWSpeed
|   +---*
|   +--- 
|   +---outSpeed
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireDeviceInterface_t //test_ref/c/tdef/IOFireWireDeviceInterface_t //test_ref/c/tag/IOFireWireDeviceInterface_t //test_ref/c/struct/IOFireWireDeviceInterface_t //test_ref/c/intf/IOFireWireDeviceInterface_t //test_ref/doc/anysymbol/IOFireWireDeviceInterface_t" machineGenerated="true" --><span class="type">IOFireWireDeviceInterface_t</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS //test_ref/c/clconst/IUNKNOWN_C_GUTS " machineGenerated="true" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->;  
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/version //test_ref/c/data/version //test_ref/c/clconst/version " machineGenerated="true" --><span class="var">version</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/revision //test_ref/c/data/revision //test_ref/c/clconst/revision " machineGenerated="true" --><span class="var">revision</span><!-- /a -->; <span class="comment">// version/revision</span>  
	    <span class="comment">// --- maintenance methods -------------</span> 
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function InterfaceIsInited
	@abstract Determine whether interface has been properly inited.
	@param self The device interface to use.
	@result Returns true if interface is inited and false if is it not.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/InterfaceIsInited //test_ref/c/clm/InterfaceIsInited //test_ref/c/intfcm/InterfaceIsInited //test_ref/c/intfm/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function GetDevice
	@abstract Get the IOKit service to which this interface is connected.
	@param self The device interface to use.
	@result Returns an io_object_t corresponding to the device the interface is
	using</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDevice //test_ref/c/clm/GetDevice //test_ref/c/intfcm/GetDevice //test_ref/c/intfm/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_2</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Open
	@abstract Open the connected device for exclusive access. When you have
	the device open using this method, all accesses by other clients of 
	this device will be denied until Close() is called.
	@param self The device interface to use.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Open //test_ref/c/clm/Open //test_ref/c/intfcm/Open //test_ref/c/intfm/Open //test_ref/c/func/Open //test_ref/c/ftmplt/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function OpenWithSessionRef
	@abstract An open function which allows this interface to have access
	to the device when already opened. The service which has already opened
	the device must be able to provide an IOFireWireSessionRef.
	@param self The device interface to use
	@param IOFireWireSessionRef The sessionRef returned from the client who has
	the device open
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/OpenWithSessionRef //test_ref/c/clm/OpenWithSessionRef //test_ref/c/intfcm/OpenWithSessionRef //test_ref/c/intfm/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Close
	@abstract Release exclusive access to the device
	@param self The device interface to use</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Close //test_ref/c/clm/Close //test_ref/c/intfcm/Close //test_ref/c/intfm/Close //test_ref/c/func/Close //test_ref/c/ftmplt/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">// --- notification --------------------</span> 
	    <span class="comment">/*!
	@function NotificationIsOn
	@abstract Determine whether callback notifications for this interface are currently active
	@param self The device interface to use
	@result A Boolean value where true indicates notifications are active</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/NotificationIsOn //test_ref/c/clm/NotificationIsOn //test_ref/c/intfcm/NotificationIsOn //test_ref/c/intfm/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoop
	@abstract Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function.
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoop //test_ref/c/clm/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!
	@function RemoveCallbackDispatcherFromRunLoop
	@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOnNotification
	@abstract Activates any callbacks specified for this device interface. Only works after 
	AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
	@param self The device interface to use.
	@result A Boolean value. Returns true on success.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOnNotification //test_ref/c/clm/TurnOnNotification //test_ref/c/intfcm/TurnOnNotification //test_ref/c/intfm/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOffNotification
	@abstract Deactivates and callbacks specified for this device interface. Reverses the 
	effects of TurnOnNotification()
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOffNotification //test_ref/c/clm/TurnOffNotification //test_ref/c/intfcm/TurnOffNotification //test_ref/c/intfm/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function SetBusResetHandler
	@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
	can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
	resets might occur before bus reconfiguration has completed.)
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetHandler //test_ref/c/clm/SetBusResetHandler //test_ref/c/intfcm/SetBusResetHandler //test_ref/c/intfm/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
	    <span class="comment">/*!
	@function SetBusResetDoneHandler
	@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
	of the bus has been completed. This function will only be called once per bus reset.
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetDoneHandler //test_ref/c/clm/SetBusResetDoneHandler //test_ref/c/intfcm/SetBusResetDoneHandler //test_ref/c/intfm/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>); 
	    <span class="comment">/*!
	@function ClientCommandIsComplete
	@abstract This function must be called from callback routines once they have completed processing
	a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
	parameter.
	@param commandID The command ID passed to the callback function when it was called
	@param status An IOReturn value indicating the completion status of the callback function</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ClientCommandIsComplete //test_ref/c/clm/ClientCommandIsComplete //test_ref/c/intfcm/ClientCommandIsComplete //test_ref/c/intfm/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
	    <span class="comment">// --- read/write/lock operations -------</span> 
	    <span class="comment">/*!
	@function Read
	@abstract Perform synchronous block read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Read //test_ref/c/clm/Read //test_ref/c/intfcm/Read //test_ref/c/intfm/Read //test_ref/c/func/Read //test_ref/c/ftmplt/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function ReadQuadlet
	@abstract Perform synchronous quadlet read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param value A pointer to where to data should be stored
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ReadQuadlet //test_ref/c/clm/ReadQuadlet //test_ref/c/intfcm/ReadQuadlet //test_ref/c/intfm/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">val</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>); 
	    <span class="comment">/*!
	@function Write
	@abstract Perform synchronous block write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Write //test_ref/c/clm/Write //test_ref/c/intfcm/Write //test_ref/c/intfm/Write //test_ref/c/func/Write //test_ref/c/ftmplt/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function WriteQuadlet
	@abstract Perform synchronous quadlet write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param val The value to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/WriteQuadlet //test_ref/c/clm/WriteQuadlet //test_ref/c/intfcm/WriteQuadlet //test_ref/c/intfm/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function CompareSwap
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param cmpVal The check/compare value
	@param newVal Value to set
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap //test_ref/c/clm/CompareSwap //test_ref/c/intfcm/CompareSwap //test_ref/c/intfm/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">// --- FireWire command object methods ---------</span>  
	    <span class="comment">/*!
	@function CreateReadCommand
	@abstract Create a block read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadCommand //test_ref/c/clm/CreateReadCommand //test_ref/c/intfcm/CreateReadCommand //test_ref/c/intfm/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateReadQuadletCommand
	@abstract Create a quadlet read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets where results should be stored
	@param numQuads Number of quadlets to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@param </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadQuadletCommand //test_ref/c/clm/CreateReadQuadletCommand //test_ref/c/intfcm/CreateReadQuadletCommand //test_ref/c/intfm/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateWriteCommand
	@abstract Create a block write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to the buffer containing the data to be written
	@param size Number of bytes to write
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteCommand //test_ref/c/clm/CreateWriteCommand //test_ref/c/intfcm/CreateWriteCommand //test_ref/c/intfm/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateWriteQuadletCommand
	@abstract Create a quadlet write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets containing quadlets to be written
	@param numQuads Number of quadlets to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteQuadletCommand //test_ref/c/clm/CreateWriteQuadletCommand //test_ref/c/intfcm/CreateWriteQuadletCommand //test_ref/c/intfm/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand
	@abstract Create a quadlet compare/swap command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 32-bit value expected at target address
	@param newVal 32-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand //test_ref/c/clm/CreateCompareSwapCommand //test_ref/c/intfcm/CreateCompareSwapCommand //test_ref/c/intfm/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- other methods ---------------------------</span> 
	    <span class="comment">/*!        @function BusReset
	@abstract Cause a bus reset</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/BusReset //test_ref/c/clm/BusReset //test_ref/c/intfcm/BusReset //test_ref/c/intfm/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!        @function GetCycleTime
	@abstract Get bus cycle time.
	@param self The device interface to use.
	@param outCycleTime A pointer to a UInt32 to hold the result</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetCycleTime //test_ref/c/clm/GetCycleTime //test_ref/c/intfcm/GetCycleTime //test_ref/c/intfm/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">/*!        @function GetGenerationAndNodeID
	@abstract (Obsolete) Get bus generation and remote device node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
	interface v4.
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the generation result
	@param outNodeID A pointer to a UInt16 to hold the remote device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetGenerationAndNodeID //test_ref/c/clm/GetGenerationAndNodeID //test_ref/c/intfcm/GetGenerationAndNodeID //test_ref/c/intfm/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outNodeID</span>);  
	    <span class="comment">/*!        @function GetLocalNodeID
	@abstract (Obsolete) Get local node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
	interface v4.
	@param self The device interface to use.
	@param outNodeID A pointer to a UInt16 to hold the local device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeID //test_ref/c/clm/GetLocalNodeID //test_ref/c/intfcm/GetLocalNodeID //test_ref/c/intfm/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span>);  
	    <span class="comment">/*!        @function GetResetTime
	@abstract Get time since last bus reset.
	@param self The device interface to use.
	@param outResetTime A pointer to an AbsolutTime to hold the result.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetResetTime //test_ref/c/clm/GetResetTime //test_ref/c/intfcm/GetResetTime //test_ref/c/intfm/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --><span class="type">*</span> <span class="param">outResetTime</span>);  
	    <span class="comment">// --- unit directory support ------------------</span> 
	    <span class="comment">/*!        @function CreateLocalUnitDirectory
	@abstract Creates a local unit directory object and returns an interface to it. An
	instance of a unit directory object corresponds to an instance of a unit 
	directory in the local machine's configuration ROM.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created unit directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalUnitDirectory //test_ref/c/clm/CreateLocalUnitDirectory //test_ref/c/intfcm/CreateLocalUnitDirectory //test_ref/c/intfm/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- config directory support ----------------</span> 
	    <span class="comment">/*!        @function GetConfigDirectory
	@abstract Creates a config directory object and returns an interface to it. The
	created config directory object represents the config directory in the remote
	device or unit to which the creating device interface is attached.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetConfigDirectory //test_ref/c/clm/GetConfigDirectory //test_ref/c/intfcm/GetConfigDirectory //test_ref/c/intfm/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateConfigDirectoryWithIOObject
	@abstract This function can be used to create a config directory object and a
	corresponding interface from an opaque IOObject reference. Some configuration
	directory interface methods may return an io_object_t instead of an
	IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
	IOFireWireLibConfigDirectoryRef from an io_object_t.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateConfigDirectoryWithIOObject //test_ref/c/clm/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- address space support -------------------</span> 
	    <span class="comment">/*!        @function CreatePseudoAddressSpace
	@abstract Creates a pseudo address space object and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine. 
	@param self The device interface to use.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePseudoAddressSpace //test_ref/c/clm/CreatePseudoAddressSpace //test_ref/c/intfcm/CreatePseudoAddressSpace //test_ref/c/intfm/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreatePhysicalAddressSpace
	@abstract Creates a physical address space object and returns an interface to it. This
	will create a physical address space on the local machine. 
	@param self The device interface to use.
	@param inBackingStore An block of allocated memory representing the contents of the address space.
	@param inSize The size in bytes of this address space
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space. For future use -- always pass 0.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created physical address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePhysicalAddressSpace //test_ref/c/clm/CreatePhysicalAddressSpace //test_ref/c/intfcm/CreatePhysicalAddressSpace //test_ref/c/intfm/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireBugMsg //test_ref/c/clm/FireBugMsg //test_ref/c/intfcm/FireBugMsg //test_ref/c/intfm/FireBugMsg //test_ref/c/func/FireBugMsg //test_ref/c/ftmplt/FireBugMsg //test_ref/c/defn/FireBugMsg //test_ref/c/macro/FireBugMsg //test_ref/doc/anysymbol/FireBugMsg" machineGenerated="true" --><span class="function">FireBugMsg</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">msg</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v2 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- eye-sock-run-U.S. -----------------------</span> 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not function
	before this function is called. This functions is similar to 
	AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
	from that passed to AddCallbackDispatcherToRunLoop. 
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!        @function CreateRemoteIsochPort
	@abstract Creates a remote isochronous port object and returns an interface to it. A
	remote isochronous port object is an abstract entity used to represent a remote
	talker or listener device on an isochronous channel. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created remote isochronous port object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateRemoteIsochPort //test_ref/c/clm/CreateRemoteIsochPort //test_ref/c/intfcm/CreateRemoteIsochPort //test_ref/c/intfm/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateLocalIsochPort
	@abstract Creates a local isochronous port object and returns an interface to it. A
	local isochronous port object is an abstract entity used to represent a
	talking or listening endpoint in the local machine. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param inDCLProgram A pointer to the first DCL command struct of the DCL program
	to be compiled and used to send or receive data on this port.
	@param inStartEvent Start event bits
	@param inStartState Start state bits
	@param inStartMask Start mask bits
	@param inDCLProgramRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
	structs or nil to ignore this parameter.
	@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
	Pass 0 for none.
	@param inBufferRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
	to an array of IOVirtualRange structs or nil to ignore this parameter.
	@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
	Pass 0 for none.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalIsochPort //test_ref/c/clm/CreateLocalIsochPort //test_ref/c/intfcm/CreateLocalIsochPort //test_ref/c/intfm/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateIsochChannel
	@abstract Creates an isochronous channel object and returns an interface to it. An
	isochronous channel object is an abstract entity used to represent a
	FireWire isochronous channel. 
	@param self The device interface to use.
	@param doIRM Controls whether the channel automatically performs IRM operations. 
	Pass true if the channel should allocate its channel and bandwidth with
	the IRM. Pass false to ignore the IRM.
	@param packetSize Size in bytes of packets being sent or received with this channel.
	This is automatically translated into a bandwidth allocation appropriate
	for the speed passed in prefSpeed.
	@param prefSpeed The preferred bus speed of this channel.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateIsochChannel //test_ref/c/clm/CreateIsochChannel //test_ref/c/intfcm/CreateIsochChannel //test_ref/c/intfm/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">/*!        @function CreateDCLCommandPool
	@abstract Creates a command pool object and returns an interface to it. The command 
	pool can be used to build DCL programs.
	@param self The device interface to use.
	@param size Starting size of command pool
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateDCLCommandPool //test_ref/c/clm/CreateDCLCommandPool //test_ref/c/intfcm/CreateDCLCommandPool //test_ref/c/intfm/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">// --- refcons ---------------------------------</span> 
	    <span class="comment">/*!        @function GetRefCon
	@abstract Get user reference value set on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span>(<span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/GetRefCon //test_ref/c/data/GetRefCon //test_ref/c/clconst/GetRefCon " machineGenerated="true" --><span class="var">GetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>); 
	    <span class="comment">/*!        @function SetRefCon
	@abstract Set user reference value on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetRefCon //test_ref/c/clm/SetRefCon //test_ref/c/intfcm/SetRefCon //test_ref/c/intfm/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">refCon</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <span class="comment">// do not use this function</span> 
	    <!-- a logicalPath="//test_ref/c/cl/CFTypeRef //test_ref/c/tdef/CFTypeRef //test_ref/c/tag/CFTypeRef //test_ref/c/struct/CFTypeRef //test_ref/c/intf/CFTypeRef //test_ref/doc/anysymbol/CFTypeRef" machineGenerated="true" --><span class="type">CFTypeRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDebugProperty //test_ref/c/clm/GetDebugProperty //test_ref/c/intfcm/GetDebugProperty //test_ref/c/intfm/GetDebugProperty //test_ref/c/func/GetDebugProperty //test_ref/c/ftmplt/GetDebugProperty //test_ref/c/defn/GetDebugProperty //test_ref/c/macro/GetDebugProperty //test_ref/doc/anysymbol/GetDebugProperty" machineGenerated="true" --><span class="function">GetDebugProperty</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">interface</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inPropertyName</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFTypeID //test_ref/c/tdef/CFTypeID //test_ref/c/tag/CFTypeID //test_ref/c/struct/CFTypeID //test_ref/c/intf/CFTypeID //test_ref/doc/anysymbol/CFTypeID" machineGenerated="true" --><span class="type">CFTypeID</span><!-- /a --><span class="type">*</span> <span class="param">outPropertyType</span>);  
	    <span class="comment">/*!        @function PrintDCLProgram
	@abstract Walk a DCL program linked list and print its contents
	@param self The device interface to use.
	@param inProgram A pointer to the first DCL of the program to print
	@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
	report an error if this number does not match the number of DCLs found</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/PrintDCLProgram //test_ref/c/clm/PrintDCLProgram //test_ref/c/intfcm/PrintDCLProgram //test_ref/c/intfm/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v3 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- v3 functions ----------</span> 
	    <span class="comment">/*!        @function CreateInitialUnitsPseudoAddressSpace
	@abstract Creates a pseudo address space in initial units space.
	@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine.
	
	Availablilty: IOFireWireDeviceInterface_v3,  and newer
	
	@param self The device interface to use.
	@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
	in initial units space.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write. Clients
	will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
	already has an address space at the requested address. All clients will be notified of writes to
	covered addresses.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>); 
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoopForMode
	@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
	@discussion Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function. With this function, you can additionally specify
	for which run loop modes this source should be added.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
	@discussion This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not be called unless
	this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
	The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!
	@function RemoveIsochCallbackDispatcherFromRunLoop
	@abstract Removes an IOFireWireLib-added run loop event source.
	@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function Seize
	@abstract Seize control of device/unit
	@discussion Allows a user space client to seize control of an in-kernel service even if
	that service has been Opened() by another client or in-kernel driver. This function should be
	used with care. Admin rights are required to use this function.
	
	Calling this method makes it appear to all other drivers that the device has been unplugged.
	Open() should be called after this method has been invoked.
	
	When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
	normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
	@param self The device interface to use.
	@param reserved Reserved for future use. Set to NULL.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Seize //test_ref/c/clm/Seize //test_ref/c/intfcm/Seize //test_ref/c/intfm/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	        ... );  
	    <span class="comment">/*!
	@function FireLog
	@abstract Logs string to in-kernel debug buffer
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireLog //test_ref/c/clm/FireLog //test_ref/c/intfcm/FireLog //test_ref/c/intfm/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">format</span>, 
	        ... );  
	    <span class="comment">/*!        @function GetBusCycleTime
	@abstract Get bus and cycle time.
	@param self The device interface to use.
	@param outBusTime A pointer to a UInt32 to hold the bus time
	@param outCycleTime A pointer to a UInt32 to hold the cycle time</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusCycleTime //test_ref/c/clm/GetBusCycleTime //test_ref/c/intfcm/GetBusCycleTime //test_ref/c/intfm/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outBusTime</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// v4</span> 
	    <span class="comment">//</span>  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand64
	@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 64-bit value expected at target address
	@param newVal 64-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand64 //test_ref/c/clm/CreateCompareSwapCommand64 //test_ref/c/intfcm/CreateCompareSwapCommand64 //test_ref/c/intfm/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CompareSwap64
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	
	If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
	successful.
	@param addr Command target address
	@param expectedVal Pointer to quadlets expected at target.
	@param newVal Pointer to quadlets to atomically set at target if compare is successful.
	@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
	@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap64 //test_ref/c/clm/CompareSwap64 //test_ref/c/intfcm/CompareSwap64 //test_ref/c/intfm/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">expectedVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">oldVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!        @function GetBusGeneration
	@abstract Get bus generation number.
	@discussion The bus generation number stays constant between bus resets and can be
	used in combination with a FireWire node ID to uniquely identify nodes on the bus.
	Pass the generation number to functions that take or return FireWire node IDs.
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the bus generation  number</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusGeneration //test_ref/c/clm/GetBusGeneration //test_ref/c/intfcm/GetBusGeneration //test_ref/c/intfm/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span> );  
	    <span class="comment">/*!        @function GetLocalNodeIDWithGeneration
	@abstract Get node ID of local machine.
	@discussion Use this function instead of GetLocalNodeID().
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeIDWithGeneration //test_ref/c/clm/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/GetLocalNodeIDWithGeneration //test_ref/c/intfm/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span> );  
	    <span class="comment">/*!        @function GetRemoteNodeID
	@abstract Get node ID of device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetRemoteNodeID //test_ref/c/clm/GetRemoteNodeID //test_ref/c/intfcm/GetRemoteNodeID //test_ref/c/intfm/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outRemoteNodeID</span> );  
	    <span class="comment">/*!        @function GetSpeedToNode
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedToNode //test_ref/c/clm/GetSpeedToNode //test_ref/c/intfcm/GetSpeedToNode //test_ref/c/intfm/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	    <span class="comment">/*!        @function GetSpeedBetweenNodes
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param srcNodeID A FireWire node ID.
	@param destNodeID A FireWire node ID.
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedBetweenNodes //test_ref/c/clm/GetSpeedBetweenNodes //test_ref/c/intfcm/GetSpeedBetweenNodes //test_ref/c/intfm/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	} <!-- a logicalPath="//test_ref/c/econst/IOFireWireDeviceInterface //test_ref/c/data/IOFireWireDeviceInterface //test_ref/c/clconst/IOFireWireDeviceInterface " machineGenerated="true" --><span class="var">IOFireWireDeviceInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireUnitInterface //test_ref/c/data/IOFireWireUnitInterface //test_ref/c/clconst/IOFireWireUnitInterface " machineGenerated="true" --><span class="var">IOFireWireUnitInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireNubInterface //test_ref/c/data/IOFireWireNubInterface //test_ref/c/clconst/IOFireWireNubInterface " machineGenerated="true" --><span class="var">IOFireWireNubInterface</span><!-- /a -->;  
END OF OBJECT


OBJECT: InterfaceIsInited (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/clm/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/intfcm/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/intfm/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: GetDevice (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetDevice //test_ref/c/clm/IOFireWireDeviceInterface/GetDevice //test_ref/c/intfcm/IOFireWireDeviceInterface/GetDevice //test_ref/c/intfm/IOFireWireDeviceInterface/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: Open (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Open //test_ref/c/clm/IOFireWireDeviceInterface/Open //test_ref/c/intfcm/IOFireWireDeviceInterface/Open //test_ref/c/intfm/IOFireWireDeviceInterface/Open //test_ref/c/func/Open //test_ref/c/ftmplt/IOFireWireDeviceInterface/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: OpenWithSessionRef (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/clm/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/intfcm/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/intfm/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
END OF OBJECT


OBJECT: Close (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Close //test_ref/c/clm/IOFireWireDeviceInterface/Close //test_ref/c/intfcm/IOFireWireDeviceInterface/Close //test_ref/c/intfm/IOFireWireDeviceInterface/Close //test_ref/c/func/Close //test_ref/c/ftmplt/IOFireWireDeviceInterface/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: NotificationIsOn (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/clm/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/intfcm/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/intfm/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: AddCallbackDispatcherToRunLoop (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/clm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
END OF OBJECT


OBJECT: RemoveCallbackDispatcherFromRunLoop (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: TurnOnNotification (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/clm/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/intfcm/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/intfm/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: TurnOffNotification (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/clm/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/intfcm/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/intfm/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: SetBusResetHandler (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/clm/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/intfcm/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/intfm/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
END OF OBJECT


OBJECT: SetBusResetDoneHandler (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/clm/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/intfcm/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/intfm/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>);  
END OF OBJECT


OBJECT: ClientCommandIsComplete (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/clm/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/intfcm/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/intfm/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
END OF OBJECT


OBJECT: Read (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Read //test_ref/c/clm/IOFireWireDeviceInterface/Read //test_ref/c/intfcm/IOFireWireDeviceInterface/Read //test_ref/c/intfm/IOFireWireDeviceInterface/Read //test_ref/c/func/Read //test_ref/c/ftmplt/IOFireWireDeviceInterface/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">buf</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">size</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: ReadQuadlet (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/clm/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/intfcm/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/intfm/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">val</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: Write (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Write //test_ref/c/clm/IOFireWireDeviceInterface/Write //test_ref/c/intfcm/IOFireWireDeviceInterface/Write //test_ref/c/intfm/IOFireWireDeviceInterface/Write //test_ref/c/func/Write //test_ref/c/ftmplt/IOFireWireDeviceInterface/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">buf</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">size</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: WriteQuadlet (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/clm/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/intfcm/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/intfm/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: CompareSwap (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CompareSwap //test_ref/c/clm/IOFireWireDeviceInterface/CompareSwap //test_ref/c/intfcm/IOFireWireDeviceInterface/CompareSwap //test_ref/c/intfm/IOFireWireDeviceInterface/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/IOFireWireDeviceInterface/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: CreateReadCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">buf</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateReadQuadletCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateWriteCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">buf</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateWriteQuadletCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateCompareSwapCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: BusReset (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/BusReset //test_ref/c/clm/IOFireWireDeviceInterface/BusReset //test_ref/c/intfcm/IOFireWireDeviceInterface/BusReset //test_ref/c/intfm/IOFireWireDeviceInterface/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/IOFireWireDeviceInterface/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: GetCycleTime (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/clm/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/intfcm/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/intfm/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outCycleTime</span>);  
END OF OBJECT


OBJECT: GetGenerationAndNodeID (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/clm/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/intfcm/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/intfm/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="type">*</span><span class="param">outNodeID</span>);  
END OF OBJECT


OBJECT: GetLocalNodeID (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/clm/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/intfcm/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/intfm/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="type">*</span><span class="param">outLocalNodeID</span>);  
END OF OBJECT


OBJECT: GetResetTime (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetResetTime //test_ref/c/clm/IOFireWireDeviceInterface/GetResetTime //test_ref/c/intfcm/IOFireWireDeviceInterface/GetResetTime //test_ref/c/intfm/IOFireWireDeviceInterface/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --> <span class="type">*</span><span class="param">outResetTime</span>);  
END OF OBJECT


OBJECT: CreateLocalUnitDirectory (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/clm/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/intfm/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: GetConfigDirectory (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/clm/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/intfcm/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/intfm/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateConfigDirectoryWithIOObject (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/clm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreatePseudoAddressSpace (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/clm/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/intfcm/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/intfm/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inBackingStore</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreatePhysicalAddressSpace (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/clm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/intfcm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/intfm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inBackingStore</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoop (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
END OF OBJECT


OBJECT: CreateRemoteIsochPort (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/clm/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/intfm/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateLocalIsochPort (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/clm/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/intfm/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateIsochChannel (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/clm/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/intfm/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
END OF OBJECT


OBJECT: CreateDCLCommandPool (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/clm/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/intfm/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
END OF OBJECT


OBJECT: GetRefCon (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetRefCon //test_ref/c/clm/IOFireWireDeviceInterface/GetRefCon //test_ref/c/intfcm/IOFireWireDeviceInterface/GetRefCon //test_ref/c/intfm/IOFireWireDeviceInterface/GetRefCon //test_ref/c/func/GetRefCon //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetRefCon //test_ref/c/defn/GetRefCon //test_ref/c/macro/GetRefCon //test_ref/doc/anysymbol/GetRefCon" machineGenerated="true" --><span class="function">GetRefCon</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: SetRefCon (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/SetRefCon //test_ref/c/clm/IOFireWireDeviceInterface/SetRefCon //test_ref/c/intfcm/IOFireWireDeviceInterface/SetRefCon //test_ref/c/intfm/IOFireWireDeviceInterface/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/IOFireWireDeviceInterface/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">refCon</span>);  
END OF OBJECT


OBJECT: PrintDCLProgram (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/clm/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/intfcm/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/intfm/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
END OF OBJECT


OBJECT: CreateInitialUnitsPseudoAddressSpace (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inBackingStore</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: AddCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> );  
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> );  
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> );  
END OF OBJECT


OBJECT: RemoveIsochCallbackDispatcherFromRunLoop (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: Seize (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Seize //test_ref/c/clm/IOFireWireDeviceInterface/Seize //test_ref/c/intfcm/IOFireWireDeviceInterface/Seize //test_ref/c/intfm/IOFireWireDeviceInterface/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/IOFireWireDeviceInterface/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	    ... );  
END OF OBJECT


OBJECT: FireLog (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/FireLog //test_ref/c/clm/IOFireWireDeviceInterface/FireLog //test_ref/c/intfcm/IOFireWireDeviceInterface/FireLog //test_ref/c/intfm/IOFireWireDeviceInterface/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/IOFireWireDeviceInterface/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --> <span class="type">*</span><span class="param">format</span>, 
	    ... );  
END OF OBJECT


OBJECT: GetBusCycleTime (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/clm/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/intfcm/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/intfm/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outBusTime</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outCycleTime</span>);  
END OF OBJECT


OBJECT: CreateCompareSwapCommand64 (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/clm/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/intfm/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CompareSwap64 (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/clm/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/intfcm/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/intfm/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">expectedVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">newVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">oldVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: GetBusGeneration (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/clm/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/intfcm/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/intfm/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outGeneration</span> );  
END OF OBJECT


OBJECT: GetLocalNodeIDWithGeneration (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/clm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/intfm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="type">*</span><span class="param">outLocalNodeID</span> );  
END OF OBJECT


OBJECT: GetRemoteNodeID (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/clm/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/intfcm/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/intfm/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="type">*</span><span class="param">outRemoteNodeID</span> );  
END OF OBJECT


OBJECT: GetSpeedToNode (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/clm/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/intfcm/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/intfm/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="type">*</span><span class="param">outSpeed</span>);  
END OF OBJECT


OBJECT: GetSpeedBetweenNodes (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/clm/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/intfcm/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/intfm/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="type">*</span><span class="param">outSpeed</span>);  
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireDeviceInterface_t //test_ref/c/tdef/IOFireWireDeviceInterface_t //test_ref/c/tag/IOFireWireDeviceInterface_t //test_ref/c/struct/IOFireWireDeviceInterface_t //test_ref/c/intf/IOFireWireDeviceInterface_t //test_ref/doc/anysymbol/IOFireWireDeviceInterface_t" machineGenerated="true" --><span class="type">IOFireWireDeviceInterface_t</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS //test_ref/c/clconst/IUNKNOWN_C_GUTS " machineGenerated="true" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->;  
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/version //test_ref/c/data/version //test_ref/c/clconst/version " machineGenerated="true" --><span class="var">version</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/revision //test_ref/c/data/revision //test_ref/c/clconst/revision " machineGenerated="true" --><span class="var">revision</span><!-- /a -->; <span class="comment">// version/revision</span>  
	    <span class="comment">// --- maintenance methods -------------</span> 
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function InterfaceIsInited
	@abstract Determine whether interface has been properly inited.
	@param self The device interface to use.
	@result Returns true if interface is inited and false if is it not.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/InterfaceIsInited //test_ref/c/clm/InterfaceIsInited //test_ref/c/intfcm/InterfaceIsInited //test_ref/c/intfm/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function GetDevice
	@abstract Get the IOKit service to which this interface is connected.
	@param self The device interface to use.
	@result Returns an io_object_t corresponding to the device the interface is
	using</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDevice //test_ref/c/clm/GetDevice //test_ref/c/intfcm/GetDevice //test_ref/c/intfm/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_2</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Open
	@abstract Open the connected device for exclusive access. When you have
	the device open using this method, all accesses by other clients of 
	this device will be denied until Close() is called.
	@param self The device interface to use.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Open //test_ref/c/clm/Open //test_ref/c/intfcm/Open //test_ref/c/intfm/Open //test_ref/c/func/Open //test_ref/c/ftmplt/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function OpenWithSessionRef
	@abstract An open function which allows this interface to have access
	to the device when already opened. The service which has already opened
	the device must be able to provide an IOFireWireSessionRef.
	@param self The device interface to use
	@param IOFireWireSessionRef The sessionRef returned from the client who has
	the device open
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/OpenWithSessionRef //test_ref/c/clm/OpenWithSessionRef //test_ref/c/intfcm/OpenWithSessionRef //test_ref/c/intfm/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Close
	@abstract Release exclusive access to the device
	@param self The device interface to use</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Close //test_ref/c/clm/Close //test_ref/c/intfcm/Close //test_ref/c/intfm/Close //test_ref/c/func/Close //test_ref/c/ftmplt/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">// --- notification --------------------</span> 
	    <span class="comment">/*!
	@function NotificationIsOn
	@abstract Determine whether callback notifications for this interface are currently active
	@param self The device interface to use
	@result A Boolean value where true indicates notifications are active</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/NotificationIsOn //test_ref/c/clm/NotificationIsOn //test_ref/c/intfcm/NotificationIsOn //test_ref/c/intfm/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoop
	@abstract Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function.
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoop //test_ref/c/clm/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!
	@function RemoveCallbackDispatcherFromRunLoop
	@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOnNotification
	@abstract Activates any callbacks specified for this device interface. Only works after 
	AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
	@param self The device interface to use.
	@result A Boolean value. Returns true on success.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOnNotification //test_ref/c/clm/TurnOnNotification //test_ref/c/intfcm/TurnOnNotification //test_ref/c/intfm/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOffNotification
	@abstract Deactivates and callbacks specified for this device interface. Reverses the 
	effects of TurnOnNotification()
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOffNotification //test_ref/c/clm/TurnOffNotification //test_ref/c/intfcm/TurnOffNotification //test_ref/c/intfm/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function SetBusResetHandler
	@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
	can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
	resets might occur before bus reconfiguration has completed.)
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetHandler //test_ref/c/clm/SetBusResetHandler //test_ref/c/intfcm/SetBusResetHandler //test_ref/c/intfm/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
	    <span class="comment">/*!
	@function SetBusResetDoneHandler
	@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
	of the bus has been completed. This function will only be called once per bus reset.
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetDoneHandler //test_ref/c/clm/SetBusResetDoneHandler //test_ref/c/intfcm/SetBusResetDoneHandler //test_ref/c/intfm/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>); 
	    <span class="comment">/*!
	@function ClientCommandIsComplete
	@abstract This function must be called from callback routines once they have completed processing
	a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
	parameter.
	@param commandID The command ID passed to the callback function when it was called
	@param status An IOReturn value indicating the completion status of the callback function</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ClientCommandIsComplete //test_ref/c/clm/ClientCommandIsComplete //test_ref/c/intfcm/ClientCommandIsComplete //test_ref/c/intfm/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
	    <span class="comment">// --- read/write/lock operations -------</span> 
	    <span class="comment">/*!
	@function Read
	@abstract Perform synchronous block read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Read //test_ref/c/clm/Read //test_ref/c/intfcm/Read //test_ref/c/intfm/Read //test_ref/c/func/Read //test_ref/c/ftmplt/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function ReadQuadlet
	@abstract Perform synchronous quadlet read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param value A pointer to where to data should be stored
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ReadQuadlet //test_ref/c/clm/ReadQuadlet //test_ref/c/intfcm/ReadQuadlet //test_ref/c/intfm/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">val</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>); 
	    <span class="comment">/*!
	@function Write
	@abstract Perform synchronous block write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Write //test_ref/c/clm/Write //test_ref/c/intfcm/Write //test_ref/c/intfm/Write //test_ref/c/func/Write //test_ref/c/ftmplt/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function WriteQuadlet
	@abstract Perform synchronous quadlet write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param val The value to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/WriteQuadlet //test_ref/c/clm/WriteQuadlet //test_ref/c/intfcm/WriteQuadlet //test_ref/c/intfm/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function CompareSwap
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param cmpVal The check/compare value
	@param newVal Value to set
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap //test_ref/c/clm/CompareSwap //test_ref/c/intfcm/CompareSwap //test_ref/c/intfm/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">// --- FireWire command object methods ---------</span>  
	    <span class="comment">/*!
	@function CreateReadCommand
	@abstract Create a block read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadCommand //test_ref/c/clm/CreateReadCommand //test_ref/c/intfcm/CreateReadCommand //test_ref/c/intfm/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateReadQuadletCommand
	@abstract Create a quadlet read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets where results should be stored
	@param numQuads Number of quadlets to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@param </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadQuadletCommand //test_ref/c/clm/CreateReadQuadletCommand //test_ref/c/intfcm/CreateReadQuadletCommand //test_ref/c/intfm/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateWriteCommand
	@abstract Create a block write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to the buffer containing the data to be written
	@param size Number of bytes to write
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteCommand //test_ref/c/clm/CreateWriteCommand //test_ref/c/intfcm/CreateWriteCommand //test_ref/c/intfm/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateWriteQuadletCommand
	@abstract Create a quadlet write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets containing quadlets to be written
	@param numQuads Number of quadlets to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteQuadletCommand //test_ref/c/clm/CreateWriteQuadletCommand //test_ref/c/intfcm/CreateWriteQuadletCommand //test_ref/c/intfm/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand
	@abstract Create a quadlet compare/swap command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 32-bit value expected at target address
	@param newVal 32-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand //test_ref/c/clm/CreateCompareSwapCommand //test_ref/c/intfcm/CreateCompareSwapCommand //test_ref/c/intfm/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- other methods ---------------------------</span> 
	    <span class="comment">/*!        @function BusReset
	@abstract Cause a bus reset</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/BusReset //test_ref/c/clm/BusReset //test_ref/c/intfcm/BusReset //test_ref/c/intfm/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!        @function GetCycleTime
	@abstract Get bus cycle time.
	@param self The device interface to use.
	@param outCycleTime A pointer to a UInt32 to hold the result</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetCycleTime //test_ref/c/clm/GetCycleTime //test_ref/c/intfcm/GetCycleTime //test_ref/c/intfm/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">/*!        @function GetGenerationAndNodeID
	@abstract (Obsolete) Get bus generation and remote device node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
	interface v4.
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the generation result
	@param outNodeID A pointer to a UInt16 to hold the remote device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetGenerationAndNodeID //test_ref/c/clm/GetGenerationAndNodeID //test_ref/c/intfcm/GetGenerationAndNodeID //test_ref/c/intfm/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outNodeID</span>);  
	    <span class="comment">/*!        @function GetLocalNodeID
	@abstract (Obsolete) Get local node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
	interface v4.
	@param self The device interface to use.
	@param outNodeID A pointer to a UInt16 to hold the local device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeID //test_ref/c/clm/GetLocalNodeID //test_ref/c/intfcm/GetLocalNodeID //test_ref/c/intfm/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span>);  
	    <span class="comment">/*!        @function GetResetTime
	@abstract Get time since last bus reset.
	@param self The device interface to use.
	@param outResetTime A pointer to an AbsolutTime to hold the result.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetResetTime //test_ref/c/clm/GetResetTime //test_ref/c/intfcm/GetResetTime //test_ref/c/intfm/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --><span class="type">*</span> <span class="param">outResetTime</span>);  
	    <span class="comment">// --- unit directory support ------------------</span> 
	    <span class="comment">/*!        @function CreateLocalUnitDirectory
	@abstract Creates a local unit directory object and returns an interface to it. An
	instance of a unit directory object corresponds to an instance of a unit 
	directory in the local machine's configuration ROM.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created unit directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalUnitDirectory //test_ref/c/clm/CreateLocalUnitDirectory //test_ref/c/intfcm/CreateLocalUnitDirectory //test_ref/c/intfm/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- config directory support ----------------</span> 
	    <span class="comment">/*!        @function GetConfigDirectory
	@abstract Creates a config directory object and returns an interface to it. The
	created config directory object represents the config directory in the remote
	device or unit to which the creating device interface is attached.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetConfigDirectory //test_ref/c/clm/GetConfigDirectory //test_ref/c/intfcm/GetConfigDirectory //test_ref/c/intfm/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateConfigDirectoryWithIOObject
	@abstract This function can be used to create a config directory object and a
	corresponding interface from an opaque IOObject reference. Some configuration
	directory interface methods may return an io_object_t instead of an
	IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
	IOFireWireLibConfigDirectoryRef from an io_object_t.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateConfigDirectoryWithIOObject //test_ref/c/clm/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- address space support -------------------</span> 
	    <span class="comment">/*!        @function CreatePseudoAddressSpace
	@abstract Creates a pseudo address space object and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine. 
	@param self The device interface to use.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePseudoAddressSpace //test_ref/c/clm/CreatePseudoAddressSpace //test_ref/c/intfcm/CreatePseudoAddressSpace //test_ref/c/intfm/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreatePhysicalAddressSpace
	@abstract Creates a physical address space object and returns an interface to it. This
	will create a physical address space on the local machine. 
	@param self The device interface to use.
	@param inBackingStore An block of allocated memory representing the contents of the address space.
	@param inSize The size in bytes of this address space
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space. For future use -- always pass 0.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created physical address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePhysicalAddressSpace //test_ref/c/clm/CreatePhysicalAddressSpace //test_ref/c/intfcm/CreatePhysicalAddressSpace //test_ref/c/intfm/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireBugMsg //test_ref/c/clm/FireBugMsg //test_ref/c/intfcm/FireBugMsg //test_ref/c/intfm/FireBugMsg //test_ref/c/func/FireBugMsg //test_ref/c/ftmplt/FireBugMsg //test_ref/c/defn/FireBugMsg //test_ref/c/macro/FireBugMsg //test_ref/doc/anysymbol/FireBugMsg" machineGenerated="true" --><span class="function">FireBugMsg</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">msg</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v2 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- eye-sock-run-U.S. -----------------------</span> 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not function
	before this function is called. This functions is similar to 
	AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
	from that passed to AddCallbackDispatcherToRunLoop. 
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!        @function CreateRemoteIsochPort
	@abstract Creates a remote isochronous port object and returns an interface to it. A
	remote isochronous port object is an abstract entity used to represent a remote
	talker or listener device on an isochronous channel. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created remote isochronous port object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateRemoteIsochPort //test_ref/c/clm/CreateRemoteIsochPort //test_ref/c/intfcm/CreateRemoteIsochPort //test_ref/c/intfm/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateLocalIsochPort
	@abstract Creates a local isochronous port object and returns an interface to it. A
	local isochronous port object is an abstract entity used to represent a
	talking or listening endpoint in the local machine. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param inDCLProgram A pointer to the first DCL command struct of the DCL program
	to be compiled and used to send or receive data on this port.
	@param inStartEvent Start event bits
	@param inStartState Start state bits
	@param inStartMask Start mask bits
	@param inDCLProgramRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
	structs or nil to ignore this parameter.
	@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
	Pass 0 for none.
	@param inBufferRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
	to an array of IOVirtualRange structs or nil to ignore this parameter.
	@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
	Pass 0 for none.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalIsochPort //test_ref/c/clm/CreateLocalIsochPort //test_ref/c/intfcm/CreateLocalIsochPort //test_ref/c/intfm/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateIsochChannel
	@abstract Creates an isochronous channel object and returns an interface to it. An
	isochronous channel object is an abstract entity used to represent a
	FireWire isochronous channel. 
	@param self The device interface to use.
	@param doIRM Controls whether the channel automatically performs IRM operations. 
	Pass true if the channel should allocate its channel and bandwidth with
	the IRM. Pass false to ignore the IRM.
	@param packetSize Size in bytes of packets being sent or received with this channel.
	This is automatically translated into a bandwidth allocation appropriate
	for the speed passed in prefSpeed.
	@param prefSpeed The preferred bus speed of this channel.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateIsochChannel //test_ref/c/clm/CreateIsochChannel //test_ref/c/intfcm/CreateIsochChannel //test_ref/c/intfm/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">/*!        @function CreateDCLCommandPool
	@abstract Creates a command pool object and returns an interface to it. The command 
	pool can be used to build DCL programs.
	@param self The device interface to use.
	@param size Starting size of command pool
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateDCLCommandPool //test_ref/c/clm/CreateDCLCommandPool //test_ref/c/intfcm/CreateDCLCommandPool //test_ref/c/intfm/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">// --- refcons ---------------------------------</span> 
	    <span class="comment">/*!        @function GetRefCon
	@abstract Get user reference value set on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span>(<span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/GetRefCon //test_ref/c/data/GetRefCon //test_ref/c/clconst/GetRefCon " machineGenerated="true" --><span class="var">GetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>); 
	    <span class="comment">/*!        @function SetRefCon
	@abstract Set user reference value on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetRefCon //test_ref/c/clm/SetRefCon //test_ref/c/intfcm/SetRefCon //test_ref/c/intfm/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">refCon</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <span class="comment">// do not use this function</span> 
	    <!-- a logicalPath="//test_ref/c/cl/CFTypeRef //test_ref/c/tdef/CFTypeRef //test_ref/c/tag/CFTypeRef //test_ref/c/struct/CFTypeRef //test_ref/c/intf/CFTypeRef //test_ref/doc/anysymbol/CFTypeRef" machineGenerated="true" --><span class="type">CFTypeRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDebugProperty //test_ref/c/clm/GetDebugProperty //test_ref/c/intfcm/GetDebugProperty //test_ref/c/intfm/GetDebugProperty //test_ref/c/func/GetDebugProperty //test_ref/c/ftmplt/GetDebugProperty //test_ref/c/defn/GetDebugProperty //test_ref/c/macro/GetDebugProperty //test_ref/doc/anysymbol/GetDebugProperty" machineGenerated="true" --><span class="function">GetDebugProperty</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">interface</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inPropertyName</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFTypeID //test_ref/c/tdef/CFTypeID //test_ref/c/tag/CFTypeID //test_ref/c/struct/CFTypeID //test_ref/c/intf/CFTypeID //test_ref/doc/anysymbol/CFTypeID" machineGenerated="true" --><span class="type">CFTypeID</span><!-- /a --><span class="type">*</span> <span class="param">outPropertyType</span>);  
	    <span class="comment">/*!        @function PrintDCLProgram
	@abstract Walk a DCL program linked list and print its contents
	@param self The device interface to use.
	@param inProgram A pointer to the first DCL of the program to print
	@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
	report an error if this number does not match the number of DCLs found</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/PrintDCLProgram //test_ref/c/clm/PrintDCLProgram //test_ref/c/intfcm/PrintDCLProgram //test_ref/c/intfm/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v3 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- v3 functions ----------</span> 
	    <span class="comment">/*!        @function CreateInitialUnitsPseudoAddressSpace
	@abstract Creates a pseudo address space in initial units space.
	@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine.
	
	Availablilty: IOFireWireDeviceInterface_v3,  and newer
	
	@param self The device interface to use.
	@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
	in initial units space.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write. Clients
	will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
	already has an address space at the requested address. All clients will be notified of writes to
	covered addresses.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>); 
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoopForMode
	@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
	@discussion Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function. With this function, you can additionally specify
	for which run loop modes this source should be added.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
	@discussion This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not be called unless
	this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
	The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!
	@function RemoveIsochCallbackDispatcherFromRunLoop
	@abstract Removes an IOFireWireLib-added run loop event source.
	@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function Seize
	@abstract Seize control of device/unit
	@discussion Allows a user space client to seize control of an in-kernel service even if
	that service has been Opened() by another client or in-kernel driver. This function should be
	used with care. Admin rights are required to use this function.
	
	Calling this method makes it appear to all other drivers that the device has been unplugged.
	Open() should be called after this method has been invoked.
	
	When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
	normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
	@param self The device interface to use.
	@param reserved Reserved for future use. Set to NULL.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Seize //test_ref/c/clm/Seize //test_ref/c/intfcm/Seize //test_ref/c/intfm/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	        ... );  
	    <span class="comment">/*!
	@function FireLog
	@abstract Logs string to in-kernel debug buffer
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireLog //test_ref/c/clm/FireLog //test_ref/c/intfcm/FireLog //test_ref/c/intfm/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">format</span>, 
	        ... );  
	    <span class="comment">/*!        @function GetBusCycleTime
	@abstract Get bus and cycle time.
	@param self The device interface to use.
	@param outBusTime A pointer to a UInt32 to hold the bus time
	@param outCycleTime A pointer to a UInt32 to hold the cycle time</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusCycleTime //test_ref/c/clm/GetBusCycleTime //test_ref/c/intfcm/GetBusCycleTime //test_ref/c/intfm/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outBusTime</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// v4</span> 
	    <span class="comment">//</span>  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand64
	@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 64-bit value expected at target address
	@param newVal 64-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand64 //test_ref/c/clm/CreateCompareSwapCommand64 //test_ref/c/intfcm/CreateCompareSwapCommand64 //test_ref/c/intfm/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CompareSwap64
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	
	If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
	successful.
	@param addr Command target address
	@param expectedVal Pointer to quadlets expected at target.
	@param newVal Pointer to quadlets to atomically set at target if compare is successful.
	@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
	@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap64 //test_ref/c/clm/CompareSwap64 //test_ref/c/intfcm/CompareSwap64 //test_ref/c/intfm/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">expectedVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">oldVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!        @function GetBusGeneration
	@abstract Get bus generation number.
	@discussion The bus generation number stays constant between bus resets and can be
	used in combination with a FireWire node ID to uniquely identify nodes on the bus.
	Pass the generation number to functions that take or return FireWire node IDs.
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the bus generation  number</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusGeneration //test_ref/c/clm/GetBusGeneration //test_ref/c/intfcm/GetBusGeneration //test_ref/c/intfm/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span> );  
	    <span class="comment">/*!        @function GetLocalNodeIDWithGeneration
	@abstract Get node ID of local machine.
	@discussion Use this function instead of GetLocalNodeID().
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeIDWithGeneration //test_ref/c/clm/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/GetLocalNodeIDWithGeneration //test_ref/c/intfm/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span> );  
	    <span class="comment">/*!        @function GetRemoteNodeID
	@abstract Get node ID of device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetRemoteNodeID //test_ref/c/clm/GetRemoteNodeID //test_ref/c/intfcm/GetRemoteNodeID //test_ref/c/intfm/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outRemoteNodeID</span> );  
	    <span class="comment">/*!        @function GetSpeedToNode
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedToNode //test_ref/c/clm/GetSpeedToNode //test_ref/c/intfcm/GetSpeedToNode //test_ref/c/intfm/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	    <span class="comment">/*!        @function GetSpeedBetweenNodes
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param srcNodeID A FireWire node ID.
	@param destNodeID A FireWire node ID.
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedBetweenNodes //test_ref/c/clm/GetSpeedBetweenNodes //test_ref/c/intfcm/GetSpeedBetweenNodes //test_ref/c/intfm/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	} <!-- a logicalPath="//test_ref/c/econst/IOFireWireDeviceInterface //test_ref/c/data/IOFireWireDeviceInterface //test_ref/c/clconst/IOFireWireDeviceInterface " machineGenerated="true" --><span class="var">IOFireWireDeviceInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireUnitInterface //test_ref/c/data/IOFireWireUnitInterface //test_ref/c/clconst/IOFireWireUnitInterface " machineGenerated="true" --><span class="var">IOFireWireUnitInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireNubInterface //test_ref/c/data/IOFireWireNubInterface //test_ref/c/clconst/IOFireWireNubInterface " machineGenerated="true" --><span class="var">IOFireWireNubInterface</span><!-- /a -->;  
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireDeviceInterface_t //test_ref/c/tdef/IOFireWireDeviceInterface_t //test_ref/c/tag/IOFireWireDeviceInterface_t //test_ref/c/struct/IOFireWireDeviceInterface_t //test_ref/c/intf/IOFireWireDeviceInterface_t //test_ref/doc/anysymbol/IOFireWireDeviceInterface_t" machineGenerated="true" --><span class="type">IOFireWireDeviceInterface_t</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS //test_ref/c/clconst/IUNKNOWN_C_GUTS " machineGenerated="true" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->;  
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/version //test_ref/c/data/version //test_ref/c/clconst/version " machineGenerated="true" --><span class="var">version</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/revision //test_ref/c/data/revision //test_ref/c/clconst/revision " machineGenerated="true" --><span class="var">revision</span><!-- /a -->; <span class="comment">// version/revision</span>  
	    <span class="comment">// --- maintenance methods -------------</span> 
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function InterfaceIsInited
	@abstract Determine whether interface has been properly inited.
	@param self The device interface to use.
	@result Returns true if interface is inited and false if is it not.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/InterfaceIsInited //test_ref/c/clm/InterfaceIsInited //test_ref/c/intfcm/InterfaceIsInited //test_ref/c/intfm/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function GetDevice
	@abstract Get the IOKit service to which this interface is connected.
	@param self The device interface to use.
	@result Returns an io_object_t corresponding to the device the interface is
	using</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDevice //test_ref/c/clm/GetDevice //test_ref/c/intfcm/GetDevice //test_ref/c/intfm/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_2</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Open
	@abstract Open the connected device for exclusive access. When you have
	the device open using this method, all accesses by other clients of 
	this device will be denied until Close() is called.
	@param self The device interface to use.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Open //test_ref/c/clm/Open //test_ref/c/intfcm/Open //test_ref/c/intfm/Open //test_ref/c/func/Open //test_ref/c/ftmplt/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function OpenWithSessionRef
	@abstract An open function which allows this interface to have access
	to the device when already opened. The service which has already opened
	the device must be able to provide an IOFireWireSessionRef.
	@param self The device interface to use
	@param IOFireWireSessionRef The sessionRef returned from the client who has
	the device open
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/OpenWithSessionRef //test_ref/c/clm/OpenWithSessionRef //test_ref/c/intfcm/OpenWithSessionRef //test_ref/c/intfm/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Close
	@abstract Release exclusive access to the device
	@param self The device interface to use</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Close //test_ref/c/clm/Close //test_ref/c/intfcm/Close //test_ref/c/intfm/Close //test_ref/c/func/Close //test_ref/c/ftmplt/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">// --- notification --------------------</span> 
	    <span class="comment">/*!
	@function NotificationIsOn
	@abstract Determine whether callback notifications for this interface are currently active
	@param self The device interface to use
	@result A Boolean value where true indicates notifications are active</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/NotificationIsOn //test_ref/c/clm/NotificationIsOn //test_ref/c/intfcm/NotificationIsOn //test_ref/c/intfm/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoop
	@abstract Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function.
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoop //test_ref/c/clm/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!
	@function RemoveCallbackDispatcherFromRunLoop
	@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOnNotification
	@abstract Activates any callbacks specified for this device interface. Only works after 
	AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
	@param self The device interface to use.
	@result A Boolean value. Returns true on success.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOnNotification //test_ref/c/clm/TurnOnNotification //test_ref/c/intfcm/TurnOnNotification //test_ref/c/intfm/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOffNotification
	@abstract Deactivates and callbacks specified for this device interface. Reverses the 
	effects of TurnOnNotification()
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOffNotification //test_ref/c/clm/TurnOffNotification //test_ref/c/intfcm/TurnOffNotification //test_ref/c/intfm/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function SetBusResetHandler
	@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
	can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
	resets might occur before bus reconfiguration has completed.)
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetHandler //test_ref/c/clm/SetBusResetHandler //test_ref/c/intfcm/SetBusResetHandler //test_ref/c/intfm/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
	    <span class="comment">/*!
	@function SetBusResetDoneHandler
	@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
	of the bus has been completed. This function will only be called once per bus reset.
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetDoneHandler //test_ref/c/clm/SetBusResetDoneHandler //test_ref/c/intfcm/SetBusResetDoneHandler //test_ref/c/intfm/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>); 
	    <span class="comment">/*!
	@function ClientCommandIsComplete
	@abstract This function must be called from callback routines once they have completed processing
	a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
	parameter.
	@param commandID The command ID passed to the callback function when it was called
	@param status An IOReturn value indicating the completion status of the callback function</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ClientCommandIsComplete //test_ref/c/clm/ClientCommandIsComplete //test_ref/c/intfcm/ClientCommandIsComplete //test_ref/c/intfm/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
	    <span class="comment">// --- read/write/lock operations -------</span> 
	    <span class="comment">/*!
	@function Read
	@abstract Perform synchronous block read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Read //test_ref/c/clm/Read //test_ref/c/intfcm/Read //test_ref/c/intfm/Read //test_ref/c/func/Read //test_ref/c/ftmplt/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function ReadQuadlet
	@abstract Perform synchronous quadlet read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param value A pointer to where to data should be stored
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ReadQuadlet //test_ref/c/clm/ReadQuadlet //test_ref/c/intfcm/ReadQuadlet //test_ref/c/intfm/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">val</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>); 
	    <span class="comment">/*!
	@function Write
	@abstract Perform synchronous block write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Write //test_ref/c/clm/Write //test_ref/c/intfcm/Write //test_ref/c/intfm/Write //test_ref/c/func/Write //test_ref/c/ftmplt/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function WriteQuadlet
	@abstract Perform synchronous quadlet write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param val The value to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/WriteQuadlet //test_ref/c/clm/WriteQuadlet //test_ref/c/intfcm/WriteQuadlet //test_ref/c/intfm/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function CompareSwap
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param cmpVal The check/compare value
	@param newVal Value to set
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap //test_ref/c/clm/CompareSwap //test_ref/c/intfcm/CompareSwap //test_ref/c/intfm/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">// --- FireWire command object methods ---------</span>  
	    <span class="comment">/*!
	@function CreateReadCommand
	@abstract Create a block read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadCommand //test_ref/c/clm/CreateReadCommand //test_ref/c/intfcm/CreateReadCommand //test_ref/c/intfm/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateReadQuadletCommand
	@abstract Create a quadlet read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets where results should be stored
	@param numQuads Number of quadlets to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@param </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadQuadletCommand //test_ref/c/clm/CreateReadQuadletCommand //test_ref/c/intfcm/CreateReadQuadletCommand //test_ref/c/intfm/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateWriteCommand
	@abstract Create a block write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to the buffer containing the data to be written
	@param size Number of bytes to write
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteCommand //test_ref/c/clm/CreateWriteCommand //test_ref/c/intfcm/CreateWriteCommand //test_ref/c/intfm/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateWriteQuadletCommand
	@abstract Create a quadlet write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets containing quadlets to be written
	@param numQuads Number of quadlets to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteQuadletCommand //test_ref/c/clm/CreateWriteQuadletCommand //test_ref/c/intfcm/CreateWriteQuadletCommand //test_ref/c/intfm/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand
	@abstract Create a quadlet compare/swap command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 32-bit value expected at target address
	@param newVal 32-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand //test_ref/c/clm/CreateCompareSwapCommand //test_ref/c/intfcm/CreateCompareSwapCommand //test_ref/c/intfm/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- other methods ---------------------------</span> 
	    <span class="comment">/*!        @function BusReset
	@abstract Cause a bus reset</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/BusReset //test_ref/c/clm/BusReset //test_ref/c/intfcm/BusReset //test_ref/c/intfm/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!        @function GetCycleTime
	@abstract Get bus cycle time.
	@param self The device interface to use.
	@param outCycleTime A pointer to a UInt32 to hold the result</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetCycleTime //test_ref/c/clm/GetCycleTime //test_ref/c/intfcm/GetCycleTime //test_ref/c/intfm/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">/*!        @function GetGenerationAndNodeID
	@abstract (Obsolete) Get bus generation and remote device node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
	interface v4.
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the generation result
	@param outNodeID A pointer to a UInt16 to hold the remote device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetGenerationAndNodeID //test_ref/c/clm/GetGenerationAndNodeID //test_ref/c/intfcm/GetGenerationAndNodeID //test_ref/c/intfm/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outNodeID</span>);  
	    <span class="comment">/*!        @function GetLocalNodeID
	@abstract (Obsolete) Get local node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
	interface v4.
	@param self The device interface to use.
	@param outNodeID A pointer to a UInt16 to hold the local device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeID //test_ref/c/clm/GetLocalNodeID //test_ref/c/intfcm/GetLocalNodeID //test_ref/c/intfm/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span>);  
	    <span class="comment">/*!        @function GetResetTime
	@abstract Get time since last bus reset.
	@param self The device interface to use.
	@param outResetTime A pointer to an AbsolutTime to hold the result.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetResetTime //test_ref/c/clm/GetResetTime //test_ref/c/intfcm/GetResetTime //test_ref/c/intfm/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --><span class="type">*</span> <span class="param">outResetTime</span>);  
	    <span class="comment">// --- unit directory support ------------------</span> 
	    <span class="comment">/*!        @function CreateLocalUnitDirectory
	@abstract Creates a local unit directory object and returns an interface to it. An
	instance of a unit directory object corresponds to an instance of a unit 
	directory in the local machine's configuration ROM.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created unit directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalUnitDirectory //test_ref/c/clm/CreateLocalUnitDirectory //test_ref/c/intfcm/CreateLocalUnitDirectory //test_ref/c/intfm/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- config directory support ----------------</span> 
	    <span class="comment">/*!        @function GetConfigDirectory
	@abstract Creates a config directory object and returns an interface to it. The
	created config directory object represents the config directory in the remote
	device or unit to which the creating device interface is attached.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetConfigDirectory //test_ref/c/clm/GetConfigDirectory //test_ref/c/intfcm/GetConfigDirectory //test_ref/c/intfm/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateConfigDirectoryWithIOObject
	@abstract This function can be used to create a config directory object and a
	corresponding interface from an opaque IOObject reference. Some configuration
	directory interface methods may return an io_object_t instead of an
	IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
	IOFireWireLibConfigDirectoryRef from an io_object_t.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateConfigDirectoryWithIOObject //test_ref/c/clm/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- address space support -------------------</span> 
	    <span class="comment">/*!        @function CreatePseudoAddressSpace
	@abstract Creates a pseudo address space object and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine. 
	@param self The device interface to use.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePseudoAddressSpace //test_ref/c/clm/CreatePseudoAddressSpace //test_ref/c/intfcm/CreatePseudoAddressSpace //test_ref/c/intfm/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreatePhysicalAddressSpace
	@abstract Creates a physical address space object and returns an interface to it. This
	will create a physical address space on the local machine. 
	@param self The device interface to use.
	@param inBackingStore An block of allocated memory representing the contents of the address space.
	@param inSize The size in bytes of this address space
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space. For future use -- always pass 0.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created physical address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePhysicalAddressSpace //test_ref/c/clm/CreatePhysicalAddressSpace //test_ref/c/intfcm/CreatePhysicalAddressSpace //test_ref/c/intfm/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireBugMsg //test_ref/c/clm/FireBugMsg //test_ref/c/intfcm/FireBugMsg //test_ref/c/intfm/FireBugMsg //test_ref/c/func/FireBugMsg //test_ref/c/ftmplt/FireBugMsg //test_ref/c/defn/FireBugMsg //test_ref/c/macro/FireBugMsg //test_ref/doc/anysymbol/FireBugMsg" machineGenerated="true" --><span class="function">FireBugMsg</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">msg</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v2 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- eye-sock-run-U.S. -----------------------</span> 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not function
	before this function is called. This functions is similar to 
	AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
	from that passed to AddCallbackDispatcherToRunLoop. 
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!        @function CreateRemoteIsochPort
	@abstract Creates a remote isochronous port object and returns an interface to it. A
	remote isochronous port object is an abstract entity used to represent a remote
	talker or listener device on an isochronous channel. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created remote isochronous port object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateRemoteIsochPort //test_ref/c/clm/CreateRemoteIsochPort //test_ref/c/intfcm/CreateRemoteIsochPort //test_ref/c/intfm/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateLocalIsochPort
	@abstract Creates a local isochronous port object and returns an interface to it. A
	local isochronous port object is an abstract entity used to represent a
	talking or listening endpoint in the local machine. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param inDCLProgram A pointer to the first DCL command struct of the DCL program
	to be compiled and used to send or receive data on this port.
	@param inStartEvent Start event bits
	@param inStartState Start state bits
	@param inStartMask Start mask bits
	@param inDCLProgramRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
	structs or nil to ignore this parameter.
	@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
	Pass 0 for none.
	@param inBufferRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
	to an array of IOVirtualRange structs or nil to ignore this parameter.
	@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
	Pass 0 for none.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalIsochPort //test_ref/c/clm/CreateLocalIsochPort //test_ref/c/intfcm/CreateLocalIsochPort //test_ref/c/intfm/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateIsochChannel
	@abstract Creates an isochronous channel object and returns an interface to it. An
	isochronous channel object is an abstract entity used to represent a
	FireWire isochronous channel. 
	@param self The device interface to use.
	@param doIRM Controls whether the channel automatically performs IRM operations. 
	Pass true if the channel should allocate its channel and bandwidth with
	the IRM. Pass false to ignore the IRM.
	@param packetSize Size in bytes of packets being sent or received with this channel.
	This is automatically translated into a bandwidth allocation appropriate
	for the speed passed in prefSpeed.
	@param prefSpeed The preferred bus speed of this channel.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateIsochChannel //test_ref/c/clm/CreateIsochChannel //test_ref/c/intfcm/CreateIsochChannel //test_ref/c/intfm/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">/*!        @function CreateDCLCommandPool
	@abstract Creates a command pool object and returns an interface to it. The command 
	pool can be used to build DCL programs.
	@param self The device interface to use.
	@param size Starting size of command pool
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateDCLCommandPool //test_ref/c/clm/CreateDCLCommandPool //test_ref/c/intfcm/CreateDCLCommandPool //test_ref/c/intfm/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">// --- refcons ---------------------------------</span> 
	    <span class="comment">/*!        @function GetRefCon
	@abstract Get user reference value set on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span>(<span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/GetRefCon //test_ref/c/data/GetRefCon //test_ref/c/clconst/GetRefCon " machineGenerated="true" --><span class="var">GetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>); 
	    <span class="comment">/*!        @function SetRefCon
	@abstract Set user reference value on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetRefCon //test_ref/c/clm/SetRefCon //test_ref/c/intfcm/SetRefCon //test_ref/c/intfm/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">refCon</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <span class="comment">// do not use this function</span> 
	    <!-- a logicalPath="//test_ref/c/cl/CFTypeRef //test_ref/c/tdef/CFTypeRef //test_ref/c/tag/CFTypeRef //test_ref/c/struct/CFTypeRef //test_ref/c/intf/CFTypeRef //test_ref/doc/anysymbol/CFTypeRef" machineGenerated="true" --><span class="type">CFTypeRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDebugProperty //test_ref/c/clm/GetDebugProperty //test_ref/c/intfcm/GetDebugProperty //test_ref/c/intfm/GetDebugProperty //test_ref/c/func/GetDebugProperty //test_ref/c/ftmplt/GetDebugProperty //test_ref/c/defn/GetDebugProperty //test_ref/c/macro/GetDebugProperty //test_ref/doc/anysymbol/GetDebugProperty" machineGenerated="true" --><span class="function">GetDebugProperty</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">interface</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inPropertyName</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFTypeID //test_ref/c/tdef/CFTypeID //test_ref/c/tag/CFTypeID //test_ref/c/struct/CFTypeID //test_ref/c/intf/CFTypeID //test_ref/doc/anysymbol/CFTypeID" machineGenerated="true" --><span class="type">CFTypeID</span><!-- /a --><span class="type">*</span> <span class="param">outPropertyType</span>);  
	    <span class="comment">/*!        @function PrintDCLProgram
	@abstract Walk a DCL program linked list and print its contents
	@param self The device interface to use.
	@param inProgram A pointer to the first DCL of the program to print
	@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
	report an error if this number does not match the number of DCLs found</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/PrintDCLProgram //test_ref/c/clm/PrintDCLProgram //test_ref/c/intfcm/PrintDCLProgram //test_ref/c/intfm/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v3 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- v3 functions ----------</span> 
	    <span class="comment">/*!        @function CreateInitialUnitsPseudoAddressSpace
	@abstract Creates a pseudo address space in initial units space.
	@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine.
	
	Availablilty: IOFireWireDeviceInterface_v3,  and newer
	
	@param self The device interface to use.
	@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
	in initial units space.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write. Clients
	will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
	already has an address space at the requested address. All clients will be notified of writes to
	covered addresses.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>); 
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoopForMode
	@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
	@discussion Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function. With this function, you can additionally specify
	for which run loop modes this source should be added.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
	@discussion This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not be called unless
	this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
	The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!
	@function RemoveIsochCallbackDispatcherFromRunLoop
	@abstract Removes an IOFireWireLib-added run loop event source.
	@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function Seize
	@abstract Seize control of device/unit
	@discussion Allows a user space client to seize control of an in-kernel service even if
	that service has been Opened() by another client or in-kernel driver. This function should be
	used with care. Admin rights are required to use this function.
	
	Calling this method makes it appear to all other drivers that the device has been unplugged.
	Open() should be called after this method has been invoked.
	
	When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
	normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
	@param self The device interface to use.
	@param reserved Reserved for future use. Set to NULL.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Seize //test_ref/c/clm/Seize //test_ref/c/intfcm/Seize //test_ref/c/intfm/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	        ... );  
	    <span class="comment">/*!
	@function FireLog
	@abstract Logs string to in-kernel debug buffer
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireLog //test_ref/c/clm/FireLog //test_ref/c/intfcm/FireLog //test_ref/c/intfm/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">format</span>, 
	        ... );  
	    <span class="comment">/*!        @function GetBusCycleTime
	@abstract Get bus and cycle time.
	@param self The device interface to use.
	@param outBusTime A pointer to a UInt32 to hold the bus time
	@param outCycleTime A pointer to a UInt32 to hold the cycle time</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusCycleTime //test_ref/c/clm/GetBusCycleTime //test_ref/c/intfcm/GetBusCycleTime //test_ref/c/intfm/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outBusTime</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// v4</span> 
	    <span class="comment">//</span>  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand64
	@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 64-bit value expected at target address
	@param newVal 64-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand64 //test_ref/c/clm/CreateCompareSwapCommand64 //test_ref/c/intfcm/CreateCompareSwapCommand64 //test_ref/c/intfm/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CompareSwap64
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	
	If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
	successful.
	@param addr Command target address
	@param expectedVal Pointer to quadlets expected at target.
	@param newVal Pointer to quadlets to atomically set at target if compare is successful.
	@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
	@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap64 //test_ref/c/clm/CompareSwap64 //test_ref/c/intfcm/CompareSwap64 //test_ref/c/intfm/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">expectedVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">oldVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!        @function GetBusGeneration
	@abstract Get bus generation number.
	@discussion The bus generation number stays constant between bus resets and can be
	used in combination with a FireWire node ID to uniquely identify nodes on the bus.
	Pass the generation number to functions that take or return FireWire node IDs.
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the bus generation  number</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusGeneration //test_ref/c/clm/GetBusGeneration //test_ref/c/intfcm/GetBusGeneration //test_ref/c/intfm/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span> );  
	    <span class="comment">/*!        @function GetLocalNodeIDWithGeneration
	@abstract Get node ID of local machine.
	@discussion Use this function instead of GetLocalNodeID().
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeIDWithGeneration //test_ref/c/clm/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/GetLocalNodeIDWithGeneration //test_ref/c/intfm/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span> );  
	    <span class="comment">/*!        @function GetRemoteNodeID
	@abstract Get node ID of device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetRemoteNodeID //test_ref/c/clm/GetRemoteNodeID //test_ref/c/intfcm/GetRemoteNodeID //test_ref/c/intfm/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outRemoteNodeID</span> );  
	    <span class="comment">/*!        @function GetSpeedToNode
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedToNode //test_ref/c/clm/GetSpeedToNode //test_ref/c/intfcm/GetSpeedToNode //test_ref/c/intfm/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	    <span class="comment">/*!        @function GetSpeedBetweenNodes
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param srcNodeID A FireWire node ID.
	@param destNodeID A FireWire node ID.
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedBetweenNodes //test_ref/c/clm/GetSpeedBetweenNodes //test_ref/c/intfcm/GetSpeedBetweenNodes //test_ref/c/intfm/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	} <!-- a logicalPath="//test_ref/c/econst/IOFireWireDeviceInterface //test_ref/c/data/IOFireWireDeviceInterface //test_ref/c/clconst/IOFireWireDeviceInterface " machineGenerated="true" --><span class="var">IOFireWireDeviceInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireUnitInterface //test_ref/c/data/IOFireWireUnitInterface //test_ref/c/clconst/IOFireWireUnitInterface " machineGenerated="true" --><span class="var">IOFireWireUnitInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireNubInterface //test_ref/c/data/IOFireWireNubInterface //test_ref/c/clconst/IOFireWireNubInterface " machineGenerated="true" --><span class="var">IOFireWireNubInterface</span><!-- /a -->;  
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireDeviceInterface_t //test_ref/c/tdef/IOFireWireDeviceInterface_t //test_ref/c/tag/IOFireWireDeviceInterface_t //test_ref/c/struct/IOFireWireDeviceInterface_t //test_ref/c/intf/IOFireWireDeviceInterface_t //test_ref/doc/anysymbol/IOFireWireDeviceInterface_t" machineGenerated="true" --><span class="type">IOFireWireDeviceInterface_t</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS //test_ref/c/clconst/IUNKNOWN_C_GUTS " machineGenerated="true" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->;  
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/version //test_ref/c/data/version //test_ref/c/clconst/version " machineGenerated="true" --><span class="var">version</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/revision //test_ref/c/data/revision //test_ref/c/clconst/revision " machineGenerated="true" --><span class="var">revision</span><!-- /a -->; <span class="comment">// version/revision</span>  
	    <span class="comment">// --- maintenance methods -------------</span> 
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function InterfaceIsInited
	@abstract Determine whether interface has been properly inited.
	@param self The device interface to use.
	@result Returns true if interface is inited and false if is it not.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/InterfaceIsInited //test_ref/c/clm/InterfaceIsInited //test_ref/c/intfcm/InterfaceIsInited //test_ref/c/intfm/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function GetDevice
	@abstract Get the IOKit service to which this interface is connected.
	@param self The device interface to use.
	@result Returns an io_object_t corresponding to the device the interface is
	using</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDevice //test_ref/c/clm/GetDevice //test_ref/c/intfcm/GetDevice //test_ref/c/intfm/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_2</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Open
	@abstract Open the connected device for exclusive access. When you have
	the device open using this method, all accesses by other clients of 
	this device will be denied until Close() is called.
	@param self The device interface to use.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Open //test_ref/c/clm/Open //test_ref/c/intfcm/Open //test_ref/c/intfm/Open //test_ref/c/func/Open //test_ref/c/ftmplt/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function OpenWithSessionRef
	@abstract An open function which allows this interface to have access
	to the device when already opened. The service which has already opened
	the device must be able to provide an IOFireWireSessionRef.
	@param self The device interface to use
	@param IOFireWireSessionRef The sessionRef returned from the client who has
	the device open
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/OpenWithSessionRef //test_ref/c/clm/OpenWithSessionRef //test_ref/c/intfcm/OpenWithSessionRef //test_ref/c/intfm/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Close
	@abstract Release exclusive access to the device
	@param self The device interface to use</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Close //test_ref/c/clm/Close //test_ref/c/intfcm/Close //test_ref/c/intfm/Close //test_ref/c/func/Close //test_ref/c/ftmplt/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">// --- notification --------------------</span> 
	    <span class="comment">/*!
	@function NotificationIsOn
	@abstract Determine whether callback notifications for this interface are currently active
	@param self The device interface to use
	@result A Boolean value where true indicates notifications are active</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/NotificationIsOn //test_ref/c/clm/NotificationIsOn //test_ref/c/intfcm/NotificationIsOn //test_ref/c/intfm/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoop
	@abstract Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function.
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoop //test_ref/c/clm/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!
	@function RemoveCallbackDispatcherFromRunLoop
	@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOnNotification
	@abstract Activates any callbacks specified for this device interface. Only works after 
	AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
	@param self The device interface to use.
	@result A Boolean value. Returns true on success.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOnNotification //test_ref/c/clm/TurnOnNotification //test_ref/c/intfcm/TurnOnNotification //test_ref/c/intfm/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOffNotification
	@abstract Deactivates and callbacks specified for this device interface. Reverses the 
	effects of TurnOnNotification()
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOffNotification //test_ref/c/clm/TurnOffNotification //test_ref/c/intfcm/TurnOffNotification //test_ref/c/intfm/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function SetBusResetHandler
	@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
	can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
	resets might occur before bus reconfiguration has completed.)
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetHandler //test_ref/c/clm/SetBusResetHandler //test_ref/c/intfcm/SetBusResetHandler //test_ref/c/intfm/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
	    <span class="comment">/*!
	@function SetBusResetDoneHandler
	@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
	of the bus has been completed. This function will only be called once per bus reset.
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetDoneHandler //test_ref/c/clm/SetBusResetDoneHandler //test_ref/c/intfcm/SetBusResetDoneHandler //test_ref/c/intfm/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>); 
	    <span class="comment">/*!
	@function ClientCommandIsComplete
	@abstract This function must be called from callback routines once they have completed processing
	a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
	parameter.
	@param commandID The command ID passed to the callback function when it was called
	@param status An IOReturn value indicating the completion status of the callback function</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ClientCommandIsComplete //test_ref/c/clm/ClientCommandIsComplete //test_ref/c/intfcm/ClientCommandIsComplete //test_ref/c/intfm/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
	    <span class="comment">// --- read/write/lock operations -------</span> 
	    <span class="comment">/*!
	@function Read
	@abstract Perform synchronous block read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Read //test_ref/c/clm/Read //test_ref/c/intfcm/Read //test_ref/c/intfm/Read //test_ref/c/func/Read //test_ref/c/ftmplt/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function ReadQuadlet
	@abstract Perform synchronous quadlet read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param value A pointer to where to data should be stored
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ReadQuadlet //test_ref/c/clm/ReadQuadlet //test_ref/c/intfcm/ReadQuadlet //test_ref/c/intfm/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">val</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>); 
	    <span class="comment">/*!
	@function Write
	@abstract Perform synchronous block write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Write //test_ref/c/clm/Write //test_ref/c/intfcm/Write //test_ref/c/intfm/Write //test_ref/c/func/Write //test_ref/c/ftmplt/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function WriteQuadlet
	@abstract Perform synchronous quadlet write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param val The value to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/WriteQuadlet //test_ref/c/clm/WriteQuadlet //test_ref/c/intfcm/WriteQuadlet //test_ref/c/intfm/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function CompareSwap
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param cmpVal The check/compare value
	@param newVal Value to set
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap //test_ref/c/clm/CompareSwap //test_ref/c/intfcm/CompareSwap //test_ref/c/intfm/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">// --- FireWire command object methods ---------</span>  
	    <span class="comment">/*!
	@function CreateReadCommand
	@abstract Create a block read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadCommand //test_ref/c/clm/CreateReadCommand //test_ref/c/intfcm/CreateReadCommand //test_ref/c/intfm/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateReadQuadletCommand
	@abstract Create a quadlet read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets where results should be stored
	@param numQuads Number of quadlets to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@param </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadQuadletCommand //test_ref/c/clm/CreateReadQuadletCommand //test_ref/c/intfcm/CreateReadQuadletCommand //test_ref/c/intfm/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateWriteCommand
	@abstract Create a block write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to the buffer containing the data to be written
	@param size Number of bytes to write
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteCommand //test_ref/c/clm/CreateWriteCommand //test_ref/c/intfcm/CreateWriteCommand //test_ref/c/intfm/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateWriteQuadletCommand
	@abstract Create a quadlet write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets containing quadlets to be written
	@param numQuads Number of quadlets to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteQuadletCommand //test_ref/c/clm/CreateWriteQuadletCommand //test_ref/c/intfcm/CreateWriteQuadletCommand //test_ref/c/intfm/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand
	@abstract Create a quadlet compare/swap command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 32-bit value expected at target address
	@param newVal 32-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand //test_ref/c/clm/CreateCompareSwapCommand //test_ref/c/intfcm/CreateCompareSwapCommand //test_ref/c/intfm/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- other methods ---------------------------</span> 
	    <span class="comment">/*!        @function BusReset
	@abstract Cause a bus reset</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/BusReset //test_ref/c/clm/BusReset //test_ref/c/intfcm/BusReset //test_ref/c/intfm/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!        @function GetCycleTime
	@abstract Get bus cycle time.
	@param self The device interface to use.
	@param outCycleTime A pointer to a UInt32 to hold the result</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetCycleTime //test_ref/c/clm/GetCycleTime //test_ref/c/intfcm/GetCycleTime //test_ref/c/intfm/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">/*!        @function GetGenerationAndNodeID
	@abstract (Obsolete) Get bus generation and remote device node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
	interface v4.
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the generation result
	@param outNodeID A pointer to a UInt16 to hold the remote device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetGenerationAndNodeID //test_ref/c/clm/GetGenerationAndNodeID //test_ref/c/intfcm/GetGenerationAndNodeID //test_ref/c/intfm/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outNodeID</span>);  
	    <span class="comment">/*!        @function GetLocalNodeID
	@abstract (Obsolete) Get local node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
	interface v4.
	@param self The device interface to use.
	@param outNodeID A pointer to a UInt16 to hold the local device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeID //test_ref/c/clm/GetLocalNodeID //test_ref/c/intfcm/GetLocalNodeID //test_ref/c/intfm/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span>);  
	    <span class="comment">/*!        @function GetResetTime
	@abstract Get time since last bus reset.
	@param self The device interface to use.
	@param outResetTime A pointer to an AbsolutTime to hold the result.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetResetTime //test_ref/c/clm/GetResetTime //test_ref/c/intfcm/GetResetTime //test_ref/c/intfm/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --><span class="type">*</span> <span class="param">outResetTime</span>);  
	    <span class="comment">// --- unit directory support ------------------</span> 
	    <span class="comment">/*!        @function CreateLocalUnitDirectory
	@abstract Creates a local unit directory object and returns an interface to it. An
	instance of a unit directory object corresponds to an instance of a unit 
	directory in the local machine's configuration ROM.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created unit directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalUnitDirectory //test_ref/c/clm/CreateLocalUnitDirectory //test_ref/c/intfcm/CreateLocalUnitDirectory //test_ref/c/intfm/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- config directory support ----------------</span> 
	    <span class="comment">/*!        @function GetConfigDirectory
	@abstract Creates a config directory object and returns an interface to it. The
	created config directory object represents the config directory in the remote
	device or unit to which the creating device interface is attached.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetConfigDirectory //test_ref/c/clm/GetConfigDirectory //test_ref/c/intfcm/GetConfigDirectory //test_ref/c/intfm/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateConfigDirectoryWithIOObject
	@abstract This function can be used to create a config directory object and a
	corresponding interface from an opaque IOObject reference. Some configuration
	directory interface methods may return an io_object_t instead of an
	IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
	IOFireWireLibConfigDirectoryRef from an io_object_t.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateConfigDirectoryWithIOObject //test_ref/c/clm/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- address space support -------------------</span> 
	    <span class="comment">/*!        @function CreatePseudoAddressSpace
	@abstract Creates a pseudo address space object and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine. 
	@param self The device interface to use.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePseudoAddressSpace //test_ref/c/clm/CreatePseudoAddressSpace //test_ref/c/intfcm/CreatePseudoAddressSpace //test_ref/c/intfm/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreatePhysicalAddressSpace
	@abstract Creates a physical address space object and returns an interface to it. This
	will create a physical address space on the local machine. 
	@param self The device interface to use.
	@param inBackingStore An block of allocated memory representing the contents of the address space.
	@param inSize The size in bytes of this address space
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space. For future use -- always pass 0.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created physical address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePhysicalAddressSpace //test_ref/c/clm/CreatePhysicalAddressSpace //test_ref/c/intfcm/CreatePhysicalAddressSpace //test_ref/c/intfm/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireBugMsg //test_ref/c/clm/FireBugMsg //test_ref/c/intfcm/FireBugMsg //test_ref/c/intfm/FireBugMsg //test_ref/c/func/FireBugMsg //test_ref/c/ftmplt/FireBugMsg //test_ref/c/defn/FireBugMsg //test_ref/c/macro/FireBugMsg //test_ref/doc/anysymbol/FireBugMsg" machineGenerated="true" --><span class="function">FireBugMsg</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">msg</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v2 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- eye-sock-run-U.S. -----------------------</span> 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not function
	before this function is called. This functions is similar to 
	AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
	from that passed to AddCallbackDispatcherToRunLoop. 
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!        @function CreateRemoteIsochPort
	@abstract Creates a remote isochronous port object and returns an interface to it. A
	remote isochronous port object is an abstract entity used to represent a remote
	talker or listener device on an isochronous channel. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created remote isochronous port object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateRemoteIsochPort //test_ref/c/clm/CreateRemoteIsochPort //test_ref/c/intfcm/CreateRemoteIsochPort //test_ref/c/intfm/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateLocalIsochPort
	@abstract Creates a local isochronous port object and returns an interface to it. A
	local isochronous port object is an abstract entity used to represent a
	talking or listening endpoint in the local machine. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param inDCLProgram A pointer to the first DCL command struct of the DCL program
	to be compiled and used to send or receive data on this port.
	@param inStartEvent Start event bits
	@param inStartState Start state bits
	@param inStartMask Start mask bits
	@param inDCLProgramRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
	structs or nil to ignore this parameter.
	@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
	Pass 0 for none.
	@param inBufferRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
	to an array of IOVirtualRange structs or nil to ignore this parameter.
	@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
	Pass 0 for none.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalIsochPort //test_ref/c/clm/CreateLocalIsochPort //test_ref/c/intfcm/CreateLocalIsochPort //test_ref/c/intfm/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateIsochChannel
	@abstract Creates an isochronous channel object and returns an interface to it. An
	isochronous channel object is an abstract entity used to represent a
	FireWire isochronous channel. 
	@param self The device interface to use.
	@param doIRM Controls whether the channel automatically performs IRM operations. 
	Pass true if the channel should allocate its channel and bandwidth with
	the IRM. Pass false to ignore the IRM.
	@param packetSize Size in bytes of packets being sent or received with this channel.
	This is automatically translated into a bandwidth allocation appropriate
	for the speed passed in prefSpeed.
	@param prefSpeed The preferred bus speed of this channel.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateIsochChannel //test_ref/c/clm/CreateIsochChannel //test_ref/c/intfcm/CreateIsochChannel //test_ref/c/intfm/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">/*!        @function CreateDCLCommandPool
	@abstract Creates a command pool object and returns an interface to it. The command 
	pool can be used to build DCL programs.
	@param self The device interface to use.
	@param size Starting size of command pool
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateDCLCommandPool //test_ref/c/clm/CreateDCLCommandPool //test_ref/c/intfcm/CreateDCLCommandPool //test_ref/c/intfm/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">// --- refcons ---------------------------------</span> 
	    <span class="comment">/*!        @function GetRefCon
	@abstract Get user reference value set on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span>(<span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/GetRefCon //test_ref/c/data/GetRefCon //test_ref/c/clconst/GetRefCon " machineGenerated="true" --><span class="var">GetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>); 
	    <span class="comment">/*!        @function SetRefCon
	@abstract Set user reference value on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetRefCon //test_ref/c/clm/SetRefCon //test_ref/c/intfcm/SetRefCon //test_ref/c/intfm/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">refCon</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <span class="comment">// do not use this function</span> 
	    <!-- a logicalPath="//test_ref/c/cl/CFTypeRef //test_ref/c/tdef/CFTypeRef //test_ref/c/tag/CFTypeRef //test_ref/c/struct/CFTypeRef //test_ref/c/intf/CFTypeRef //test_ref/doc/anysymbol/CFTypeRef" machineGenerated="true" --><span class="type">CFTypeRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDebugProperty //test_ref/c/clm/GetDebugProperty //test_ref/c/intfcm/GetDebugProperty //test_ref/c/intfm/GetDebugProperty //test_ref/c/func/GetDebugProperty //test_ref/c/ftmplt/GetDebugProperty //test_ref/c/defn/GetDebugProperty //test_ref/c/macro/GetDebugProperty //test_ref/doc/anysymbol/GetDebugProperty" machineGenerated="true" --><span class="function">GetDebugProperty</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">interface</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inPropertyName</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFTypeID //test_ref/c/tdef/CFTypeID //test_ref/c/tag/CFTypeID //test_ref/c/struct/CFTypeID //test_ref/c/intf/CFTypeID //test_ref/doc/anysymbol/CFTypeID" machineGenerated="true" --><span class="type">CFTypeID</span><!-- /a --><span class="type">*</span> <span class="param">outPropertyType</span>);  
	    <span class="comment">/*!        @function PrintDCLProgram
	@abstract Walk a DCL program linked list and print its contents
	@param self The device interface to use.
	@param inProgram A pointer to the first DCL of the program to print
	@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
	report an error if this number does not match the number of DCLs found</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/PrintDCLProgram //test_ref/c/clm/PrintDCLProgram //test_ref/c/intfcm/PrintDCLProgram //test_ref/c/intfm/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v3 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- v3 functions ----------</span> 
	    <span class="comment">/*!        @function CreateInitialUnitsPseudoAddressSpace
	@abstract Creates a pseudo address space in initial units space.
	@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine.
	
	Availablilty: IOFireWireDeviceInterface_v3,  and newer
	
	@param self The device interface to use.
	@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
	in initial units space.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write. Clients
	will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
	already has an address space at the requested address. All clients will be notified of writes to
	covered addresses.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>); 
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoopForMode
	@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
	@discussion Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function. With this function, you can additionally specify
	for which run loop modes this source should be added.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
	@discussion This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not be called unless
	this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
	The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!
	@function RemoveIsochCallbackDispatcherFromRunLoop
	@abstract Removes an IOFireWireLib-added run loop event source.
	@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function Seize
	@abstract Seize control of device/unit
	@discussion Allows a user space client to seize control of an in-kernel service even if
	that service has been Opened() by another client or in-kernel driver. This function should be
	used with care. Admin rights are required to use this function.
	
	Calling this method makes it appear to all other drivers that the device has been unplugged.
	Open() should be called after this method has been invoked.
	
	When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
	normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
	@param self The device interface to use.
	@param reserved Reserved for future use. Set to NULL.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Seize //test_ref/c/clm/Seize //test_ref/c/intfcm/Seize //test_ref/c/intfm/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	        ... );  
	    <span class="comment">/*!
	@function FireLog
	@abstract Logs string to in-kernel debug buffer
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireLog //test_ref/c/clm/FireLog //test_ref/c/intfcm/FireLog //test_ref/c/intfm/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">format</span>, 
	        ... );  
	    <span class="comment">/*!        @function GetBusCycleTime
	@abstract Get bus and cycle time.
	@param self The device interface to use.
	@param outBusTime A pointer to a UInt32 to hold the bus time
	@param outCycleTime A pointer to a UInt32 to hold the cycle time</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusCycleTime //test_ref/c/clm/GetBusCycleTime //test_ref/c/intfcm/GetBusCycleTime //test_ref/c/intfm/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outBusTime</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// v4</span> 
	    <span class="comment">//</span>  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand64
	@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 64-bit value expected at target address
	@param newVal 64-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand64 //test_ref/c/clm/CreateCompareSwapCommand64 //test_ref/c/intfcm/CreateCompareSwapCommand64 //test_ref/c/intfm/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CompareSwap64
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	
	If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
	successful.
	@param addr Command target address
	@param expectedVal Pointer to quadlets expected at target.
	@param newVal Pointer to quadlets to atomically set at target if compare is successful.
	@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
	@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap64 //test_ref/c/clm/CompareSwap64 //test_ref/c/intfcm/CompareSwap64 //test_ref/c/intfm/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">expectedVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">oldVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!        @function GetBusGeneration
	@abstract Get bus generation number.
	@discussion The bus generation number stays constant between bus resets and can be
	used in combination with a FireWire node ID to uniquely identify nodes on the bus.
	Pass the generation number to functions that take or return FireWire node IDs.
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the bus generation  number</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusGeneration //test_ref/c/clm/GetBusGeneration //test_ref/c/intfcm/GetBusGeneration //test_ref/c/intfm/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span> );  
	    <span class="comment">/*!        @function GetLocalNodeIDWithGeneration
	@abstract Get node ID of local machine.
	@discussion Use this function instead of GetLocalNodeID().
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeIDWithGeneration //test_ref/c/clm/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/GetLocalNodeIDWithGeneration //test_ref/c/intfm/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span> );  
	    <span class="comment">/*!        @function GetRemoteNodeID
	@abstract Get node ID of device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetRemoteNodeID //test_ref/c/clm/GetRemoteNodeID //test_ref/c/intfcm/GetRemoteNodeID //test_ref/c/intfm/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outRemoteNodeID</span> );  
	    <span class="comment">/*!        @function GetSpeedToNode
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedToNode //test_ref/c/clm/GetSpeedToNode //test_ref/c/intfcm/GetSpeedToNode //test_ref/c/intfm/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	    <span class="comment">/*!        @function GetSpeedBetweenNodes
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param srcNodeID A FireWire node ID.
	@param destNodeID A FireWire node ID.
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedBetweenNodes //test_ref/c/clm/GetSpeedBetweenNodes //test_ref/c/intfcm/GetSpeedBetweenNodes //test_ref/c/intfm/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	} <!-- a logicalPath="//test_ref/c/econst/IOFireWireDeviceInterface //test_ref/c/data/IOFireWireDeviceInterface //test_ref/c/clconst/IOFireWireDeviceInterface " machineGenerated="true" --><span class="var">IOFireWireDeviceInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireUnitInterface //test_ref/c/data/IOFireWireUnitInterface //test_ref/c/clconst/IOFireWireUnitInterface " machineGenerated="true" --><span class="var">IOFireWireUnitInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireNubInterface //test_ref/c/data/IOFireWireNubInterface //test_ref/c/clconst/IOFireWireNubInterface " machineGenerated="true" --><span class="var">IOFireWireNubInterface</span><!-- /a -->;  
END OF OBJECT



$1967333|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 1
inInterface: 1
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 0
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 0
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/COM_interface_1.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{FULLPATH} => /test_suite_bogus_path/COM_interface_1.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => struct
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 1
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{curvarstars} => ************************************************************************************************************
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => 
$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 0
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inEnum} => 0
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{inTypedef} => 1
$parserState->{inUnion} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 291
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => C
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => IOFireWireDeviceInterface,IOFireWireUnitInterface,IOFireWireNubInterface;
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => IOFireWireDeviceInterface_t
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 3
$parserState->{onlyComments} => 0
$parserState->{parsedParamAtBrace} => ARRAY(OBJID)
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 1
$parserState->{parsedParamStateAtBrace} => ARRAY(OBJID)
$parserState->{posstypes} =>  typedef struct
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{returntype} =>  typedef struct IOFireWireDeviceInterface_t  {
         IUNKNOWN_C_GUTS
$parserState->{seenBraces} => 0
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => 
$parserState->{sodname} => 
$parserState->{sodtype} => 
$parserState->{stackFrozen} => 0
$parserState->{startOfDec} => 1
$parserState->{sublang} => C
$parserState->{temponlyComments} => 0
$parserState->{treePopTwo} => 0
$parserState->{typestring} => typedef
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 291
typelist: typedef typedef typedef struct
namelist: IOFireWireDeviceInterface,IOFireWireUnitInterface,IOFireWireNubInterface,IOFireWireDeviceInterface_t
posstypes:  typedef struct
value: 
returntype:  typedef struct IOFireWireDeviceInterface_t  {         IUNKNOWN_C_GUTS
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 606
conformsToList: 
functionContents: 
extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => IUNKNOWN_C_GUTS
Parsed Param 1 => UInt32 version, revision
Parsed Param 2 => Boolean                                (*InterfaceIsInited)(IOFireWireLibDeviceRef self)
Parsed Param 3 => io_object_t                        (*GetDevice)(IOFireWireLibDeviceRef self)
Parsed Param 4 => IOReturn                        (*Open)(IOFireWireLibDeviceRef self)
Parsed Param 5 => IOReturn                        (*OpenWithSessionRef)(IOFireWireLibDeviceRef self, IOFireWireSessionRef sessionRef)
Parsed Param 6 => void                                (*Close)(IOFireWireLibDeviceRef self)
Parsed Param 7 => const Boolean                (*NotificationIsOn)(IOFireWireLibDeviceRef self)
Parsed Param 8 => const IOReturn                 (*AddCallbackDispatcherToRunLoop)(IOFireWireLibDeviceRef self, CFRunLoopRef inRunLoop)
Parsed Param 9 => const void                        (*RemoveCallbackDispatcherFromRunLoop)(IOFireWireLibDeviceRef self)
Parsed Param 10 => const Boolean                 (*TurnOnNotification)(IOFireWireLibDeviceRef self)
Parsed Param 11 => void                                (*TurnOffNotification)(IOFireWireLibDeviceRef self)
Parsed Param 12 => const IOFireWireBusResetHandler                                                 (*SetBusResetHandler)(IOFireWireLibDeviceRef self, IOFireWireBusResetHandler handler)
Parsed Param 13 => const IOFireWireBusResetDoneHandler                                                 (*SetBusResetDoneHandler)(IOFireWireLibDeviceRef self, IOFireWireBusResetDoneHandler handler)
Parsed Param 14 => void                                (*ClientCommandIsComplete)(IOFireWireLibDeviceRef self, FWClientCommandID commandID, IOReturn status)
Parsed Param 15 => IOReturn                        (*Read)(IOFireWireLibDeviceRef        self,
                                                                io_object_t                 device,
                                                                const FWAddress* addr,
                                                                void*                                 buf,
                                                                UInt32*                         size,
                                                                Boolean                         failOnReset,
                                                                UInt32                                 generation)
Parsed Param 16 => IOReturn                        (*ReadQuadlet)(        IOFireWireLibDeviceRef        self,
                                                                                io_object_t                         device,
                                                                                const FWAddress*                 addr,
                                                                                UInt32*                                 val,
                                                                                Boolean                                 failOnReset,
                                                                                UInt32                                         generation)
Parsed Param 17 => IOReturn                        (*Write)(        IOFireWireLibDeviceRef         self,
                                                                        io_object_t                         device,
                                                                        const FWAddress*                 addr,
                                                                        const void*                         buf,
                                                                        UInt32*                                 size,
                                                                        Boolean                                 failOnReset,
                                                                        UInt32                                         generation)
Parsed Param 18 => IOReturn (*WriteQuadlet)(IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr, const UInt32 val, Boolean failOnReset, UInt32 generation)
Parsed Param 19 => IOReturn (*CompareSwap)(IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr, UInt32 cmpVal, UInt32 newVal, Boolean failOnReset, UInt32 generation)
Parsed Param 20 => IOFireWireLibCommandRef (*CreateReadCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress * addr, void* buf, UInt32 size, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 21 => IOFireWireLibCommandRef (*CreateReadQuadletCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress * addr, UInt32 quads[], UInt32 numQuads, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 22 => IOFireWireLibCommandRef (*CreateWriteCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress * addr, void* buf, UInt32  size, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 23 => IOFireWireLibCommandRef (*CreateWriteQuadletCommand)(IOFireWireLibDeviceRef        self, io_object_t device, const FWAddress *        addr, UInt32 quads[], UInt32 numQuads, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 24 => IOFireWireLibCommandRef (*CreateCompareSwapCommand)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress *  addr, UInt32      cmpVal, UInt32      newVal, IOFireWireLibCommandCallback callback, Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 25 => IOReturn (*BusReset)( IOFireWireLibDeviceRef  self)
Parsed Param 26 => IOReturn (*GetCycleTime)( IOFireWireLibDeviceRef  self, UInt32*  outCycleTime)
Parsed Param 27 => IOReturn (*GetGenerationAndNodeID)( IOFireWireLibDeviceRef  self, UInt32*  outGeneration, UInt16*  outNodeID)
Parsed Param 28 => IOReturn (*GetLocalNodeID)( IOFireWireLibDeviceRef  self, UInt16*  outLocalNodeID)
Parsed Param 29 => IOReturn                        (*GetResetTime)(
                                                                IOFireWireLibDeviceRef         self,
                                                                AbsoluteTime*                         outResetTime)
Parsed Param 30 => IOFireWireLibLocalUnitDirectoryRef (*CreateLocalUnitDirectory)( IOFireWireLibDeviceRef  self, REFIID  iid)
Parsed Param 31 => IOFireWireLibConfigDirectoryRef (*GetConfigDirectory)( IOFireWireLibDeviceRef  self, REFIID  iid)
Parsed Param 32 => IOFireWireLibConfigDirectoryRef (*CreateConfigDirectoryWithIOObject)( IOFireWireLibDeviceRef  self, io_object_t  inObject, REFIID  iid)
Parsed Param 33 => IOFireWireLibPseudoAddressSpaceRef        (*CreatePseudoAddressSpace)(
                                                                                                IOFireWireLibDeviceRef          self,
                                                                                                UInt32                                          inSize,
                                                                                                void*                                                  inRefCon,
                                                                                                UInt32                                          inQueueBufferSize,
                                                                                                void*                                                  inBackingStore,
                                                                                                UInt32                                          inFlags,
                                                                                                REFIID                                          iid)
Parsed Param 34 => IOFireWireLibPhysicalAddressSpaceRef (*CreatePhysicalAddressSpace)( IOFireWireLibDeviceRef  self, UInt32  inSize, void*  inBackingStore, UInt32  inFlags, REFIID  iid)
Parsed Param 35 => IOReturn (*FireBugMsg)( IOFireWireLibDeviceRef  self, const char*  msg)
Parsed Param 36 => IOReturn                        (*AddIsochCallbackDispatcherToRunLoop)(
                                                                IOFireWireLibDeviceRef         self,
                                                                CFRunLoopRef                         inRunLoop)
Parsed Param 37 => IOFireWireLibRemoteIsochPortRef                                                 (*CreateRemoteIsochPort)(
                                                                IOFireWireLibDeviceRef        self,
                                                                Boolean                                        inTalking,
                                                                REFIID                                        iid)
Parsed Param 38 => IOFireWireLibLocalIsochPortRef                                                 (*CreateLocalIsochPort)(
                                                                IOFireWireLibDeviceRef         self,
                                                                Boolean                                        inTalking,
                                                                DCLCommandPtr                        inDCLProgram,
                                                                UInt32                                        inStartEvent,
                                                                UInt32                                        inStartState,
                                                                UInt32                                        inStartMask,
                                                                IOVirtualRange                        inDCLProgramRanges[],        
                                                                UInt32                                        inDCLProgramRangeCount,
                                                                IOVirtualRange                        inBufferRanges[],
                                                                UInt32                                        inBufferRangeCount,
                                                                REFIID                                         iid)
Parsed Param 39 => IOFireWireLibIsochChannelRef                                                 (*CreateIsochChannel)(
                                                                IOFireWireLibDeviceRef         self,
                                                                Boolean                                 doIrm,
                                                                UInt32                                         packetSize,
                                                                IOFWSpeed                                 prefSpeed,
                                                                REFIID                                         iid )
Parsed Param 40 => IOFireWireLibDCLCommandPoolRef                                                 (*CreateDCLCommandPool)(
                                                                IOFireWireLibDeviceRef        self,
                                                                IOByteCount                         size,
                                                                REFIID                                         iid )
Parsed Param 41 => void*                                (*GetRefCon)(
                                                                IOFireWireLibDeviceRef        self)
Parsed Param 42 => void                                (*SetRefCon)(
                                                                IOFireWireLibDeviceRef        self,
                                                                const void*                                refCon)
Parsed Param 43 => CFTypeRef                        (*GetDebugProperty)(
                                                                IOFireWireLibDeviceRef        self,
                                                                void*                                        interface,
                                                                CFStringRef                                inPropertyName,
                                                                CFTypeID*                                outPropertyType)
Parsed Param 44 => void                                 (*PrintDCLProgram)(
                                                                IOFireWireLibDeviceRef        self,
                                                                const DCLCommandPtr                inProgram,
                                                                UInt32                                         inLength)
Parsed Param 45 => IOFireWireLibPseudoAddressSpaceRef        (*CreateInitialUnitsPseudoAddressSpace)(
                                                                                                IOFireWireLibDeviceRef          self,
                                                                                                UInt32                                                inAddressLo,
                                                                                                UInt32                                          inSize,
                                                                                                void*                                                  inRefCon,
                                                                                                UInt32                                          inQueueBufferSize,
                                                                                                void*                                                  inBackingStore,
                                                                                                UInt32                                          inFlags,
                                                                                                REFIID                                          iid)
Parsed Param 46 => IOReturn                         (*AddCallbackDispatcherToRunLoopForMode)(
                                                                IOFireWireLibDeviceRef         self,
                                                                CFRunLoopRef                         inRunLoop,
                                                                CFStringRef                                inRunLoopMode )
Parsed Param 47 => IOReturn                        (*AddIsochCallbackDispatcherToRunLoopForMode)(
                                                                IOFireWireLibDeviceRef         self,
                                                                CFRunLoopRef                        inRunLoop,
                                                                CFStringRef                         inRunLoopMode )
Parsed Param 48 => void                                (*RemoveIsochCallbackDispatcherFromRunLoop)(
                                                                IOFireWireLibDeviceRef         self)
Parsed Param 49 => IOReturn                        (*Seize)(
                                                                IOFireWireLibDeviceRef         self,
                                                                IOOptionBits                        inFlags,
                                                                ... )
Parsed Param 50 => IOReturn                        (*FireLog)(
                                                                IOFireWireLibDeviceRef         self,
                                                                const char*                                format,
                                                                ... )
Parsed Param 51 => IOReturn (*GetBusCycleTime)( IOFireWireLibDeviceRef  self, UInt32*  outBusTime, UInt32*  outCycleTime)
Parsed Param 52 => IOFireWireLibCommandRef (*CreateCompareSwapCommand64)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr,
                                                                                                                                UInt64 cmpVal, UInt64 newVal, IOFireWireLibCommandCallback callback,
                                                                                                                                Boolean failOnReset, UInt32 generation, void* inRefCon, REFIID iid)
Parsed Param 53 => IOReturn (*CompareSwap64)( IOFireWireLibDeviceRef self, io_object_t device, const FWAddress* addr,
                                                                                UInt32* expectedVal, UInt32* newVal, UInt32* oldVal, IOByteCount size,
                                                                                Boolean failOnReset, UInt32 generation)
Parsed Param 54 => IOReturn (*GetBusGeneration)( IOFireWireLibDeviceRef self, UInt32* outGeneration )
Parsed Param 55 => IOReturn (*GetLocalNodeIDWithGeneration)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, UInt16* outLocalNodeID )
Parsed Param 56 => IOReturn (*GetRemoteNodeID)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, UInt16* outRemoteNodeID )
Parsed Param 57 => IOReturn (*GetSpeedToNode)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, IOFWSpeed* outSpeed)
Parsed Param 58 => IOReturn (*GetSpeedBetweenNodes)( IOFireWireLibDeviceRef self, UInt32 checkGeneration, UInt16 srcNodeID, UInt16 destNodeID,  IOFWSpeed* outSpeed)
-=: DUMP OF PARSE TREE :=-
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: COM interface 1
APIUID: //test_ref/doc/header/COM_interface_1.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: 
LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::CPPClass
    NAME: IOFireWireDeviceInterface
    APIUID: //test_ref/c/cl/IOFireWireDeviceInterface
    ABSTRACT: "<p>IOFireWireDeviceInterface is your primary gateway to the functionality contained in
IOFireWireLib.
"
    DISCUSSION: "<p>You can use IOFireWireDeviceInterface to:<br>
</p>
<ul>
<li><p>perform synchronous read, write and lock operations</p></li>
<li><p>perform other miscellanous bus operations, such as reset the FireWire bus. </p></li>
<li><p>create FireWire command objects and interfaces used to perform
synchronous/asynchronous read, write and lock operations. These include:</p></li>
<ul type="square">
<li><p>IOFireWireReadCommandInterface
</p>
</li><li><p>IOFireWireReadQuadletCommandInterface
</p>
</li><li><p>IOFireWireWriteCommandInterface
</p>
</li><li><p>IOFireWireWriteQuadletCommandInterface
</p>
</li><li><p>IOFireWireCompareSwapCommandInterface
</p></li></ul>
<li><p>create interfaces which provide a other extended services. These include:</p></li>
<ul type="square">	
<li><p>IOFireWirePseudoAddressSpaceInterface -- pseudo address space services</p></li>
<li><p>IOFireWirePhysicalAddressSpaceInterface -- physical address space services</p></li>
<li><p>IOFireWireLocalUnitDirectoryInterface -- manage local unit directories in the mac</p></li>
<li><p>IOFireWireConfigDirectoryInterface -- access and browse remote device config directories</p></li>
</ul>
<li><p>create interfaces which provide isochronous services (see IOFireWireLibIsoch.h). These include:</p></li>
<ul type="square">	
<li><p>IOFireWireIsochChannelInterface -- create/manage talker and listener isoch channels</p></li>
<li><p>IOFireWireLocalIsochPortInterface -- create local isoch ports</p></li>
<li><p>IOFireWireRemoteIsochPortInterface -- create remote isoch ports</p></li>
<li><p>IOFireWireDCLCommandPoolInterface -- create a DCL command pool allocator.</p></li>
</ul>
</ul>

"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::CPPClass"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p><b>Declared In</b></p><p><a href="../../index.html" logicalPath="//test_ref/doc/header/COM_interface_1.test" target="_top" machineGenerated="true">COM interface 1</a></p>

    LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: InterfaceIsInited
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/InterfaceIsInited
        ABSTRACT: "<p>Determine whether interface has been properly inited.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "Boolean"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/InterfaceIsInited/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetDevice
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetDevice
        ABSTRACT: "<p>Get the IOKit service to which this interface is connected.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "io_object_t"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetDevice/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Open
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Open
        ABSTRACT: "<p>Open the connected device for exclusive access. When you have
the device open using this method, all accesses by other clients of 
this device will be denied until Close() is called.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_2"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Open/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: OpenWithSessionRef
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/OpenWithSessionRef
        ABSTRACT: "<p>An open function which allows this interface to have access
to the device when already opened. The service which has already opened
the device must be able to provide an IOFireWireSessionRef.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_2"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: sessionRef
            TYPE: IOFireWireSessionRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/OpenWithSessionRef/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: IOFireWireSessionRef
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/OpenWithSessionRef/IOFireWireSessionRef
            ABSTRACT: ""
            DISCUSSION: "<p>The sessionRef returned from the client who has
the device open"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Close
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Close
        ABSTRACT: "<p>Release exclusive access to the device
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Close/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: NotificationIsOn
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/NotificationIsOn
        ABSTRACT: "<p>Determine whether callback notifications for this interface are currently active
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const Boolean"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/NotificationIsOn/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddCallbackDispatcherToRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop
        ABSTRACT: "<p>Installs the proper run loop event source to allow callbacks to function. This method
must be called before callback notifications for this interface or any interfaces
created using this interface can function.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop on which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: RemoveCallbackDispatcherFromRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop
        ABSTRACT: "<p>Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
the run loop event source that was added to the specified run loop preventing any 
future callbacks from being called
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: TurnOnNotification
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/TurnOnNotification
        ABSTRACT: "<p>Activates any callbacks specified for this device interface. Only works after 
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const Boolean"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/TurnOnNotification/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: TurnOffNotification
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/TurnOffNotification
        ABSTRACT: "<p>Deactivates and callbacks specified for this device interface. Reverses the 
effects of TurnOnNotification()
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/TurnOffNotification/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: SetBusResetHandler
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/SetBusResetHandler
        ABSTRACT: "<p>Sets the callback that should be called when a bus reset occurs. Note that this callback
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
resets might occur before bus reconfiguration has completed.)
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const IOFireWireBusResetHandler"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: handler
            TYPE: IOFireWireBusResetHandler
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetBusResetHandler/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: handler
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetBusResetHandler/handler
            ABSTRACT: ""
            DISCUSSION: "<p>Function pointer to the handler to install"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: SetBusResetDoneHandler
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/SetBusResetDoneHandler
        ABSTRACT: "<p>Sets the callback that should be called after a bus reset has occurred and reconfiguration
of the bus has been completed. This function will only be called once per bus reset.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "const IOFireWireBusResetDoneHandler"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: handler
            TYPE: IOFireWireBusResetDoneHandler
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetBusResetDoneHandler/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: handler
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetBusResetDoneHandler/handler
            ABSTRACT: ""
            DISCUSSION: "<p>Function pointer to the handler to install"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: ClientCommandIsComplete
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/ClientCommandIsComplete
        ABSTRACT: "<p>This function must be called from callback routines once they have completed processing
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
parameter.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: commandID
            TYPE: FWClientCommandID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: status
            TYPE: IOReturn
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: commandID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ClientCommandIsComplete/commandID
            ABSTRACT: ""
            DISCUSSION: "<p>The command ID passed to the callback function when it was called"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: status
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ClientCommandIsComplete/status
            ABSTRACT: ""
            DISCUSSION: "<p>An IOReturn value indicating the completion status of the callback function"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Read
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Read
        ABSTRACT: "<p>Perform synchronous block read
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to read. 
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/buf
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a buffer where the results will be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/size
            ABSTRACT: ""
            DISCUSSION: "<p>Number of bytes to read"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in generation. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Read/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: ReadQuadlet
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/ReadQuadlet
        ABSTRACT: "<p>Perform synchronous quadlet read
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: val
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to read. 
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: value
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/value
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to where to data should be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in generation. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/ReadQuadlet/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Write
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Write
        ABSTRACT: "<p>Perform synchronous block write
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: const void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/buf
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a buffer where the results will be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/size
            ABSTRACT: ""
            DISCUSSION: "<p>Number of bytes to read"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Write/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: WriteQuadlet
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/WriteQuadlet
        ABSTRACT: "<p>Perform synchronous quadlet write
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: val
            TYPE: const UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: val
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/val
            ABSTRACT: ""
            DISCUSSION: "<p>The value to write"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/WriteQuadlet/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CompareSwap
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CompareSwap
        ABSTRACT: "<p>Perform synchronous lock operation
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/cmpVal
            ABSTRACT: ""
            DISCUSSION: "<p>The check/compare value"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/newVal
            ABSTRACT: ""
            DISCUSSION: "<p>Value to set"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateReadCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateReadCommand
        ABSTRACT: "<p>Create a block read command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/buf
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a buffer where the results will be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/size
            ABSTRACT: ""
            DISCUSSION: "<p>Number of bytes to read"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/callback
            ABSTRACT: ""
            DISCUSSION: "<p>Command completion callback."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateReadQuadletCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateReadQuadletCommand
        ABSTRACT: "<p>Create a quadlet read command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: quads
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: numQuads
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: quads
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/quads
            ABSTRACT: ""
            DISCUSSION: "<p>An array of quadlets where results should be stored"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: numQuads
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/numQuads
            ABSTRACT: ""
            DISCUSSION: "<p>Number of quadlets to read"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateReadQuadletCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: 
            TYPE: 
            APIUID: //test_ref/c/internal_temporary_object/CreateReadQuadletCommand
            ABSTRACT: ""
            DISCUSSION: " "
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateWriteCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateWriteCommand
        ABSTRACT: "<p>Create a block write command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: buf
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/buf
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to the buffer containing the data to be written"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/size
            ABSTRACT: ""
            DISCUSSION: "<p>Number of bytes to write"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/callback
            ABSTRACT: ""
            DISCUSSION: "<p>Command completion callback."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateWriteQuadletCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateWriteQuadletCommand
        ABSTRACT: "<p>Create a quadlet write command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: quads
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: numQuads
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: quads
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/quads
            ABSTRACT: ""
            DISCUSSION: "<p>An array of quadlets containing quadlets to be written"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: numQuads
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/numQuads
            ABSTRACT: ""
            DISCUSSION: "<p>Number of quadlets to write"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateWriteQuadletCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateCompareSwapCommand
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateCompareSwapCommand
        ABSTRACT: "<p>Create a quadlet compare/swap command object.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/cmpVal
            ABSTRACT: ""
            DISCUSSION: "<p>32-bit value expected at target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/newVal
            ABSTRACT: ""
            DISCUSSION: "<p>32-bit value to be set at target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/callback
            ABSTRACT: ""
            DISCUSSION: "<p>Command completion callback."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: BusReset
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/BusReset
        ABSTRACT: "<p>Cause a bus reset
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/BusReset/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetCycleTime
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetCycleTime
        ABSTRACT: "<p>Get bus cycle time.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outCycleTime
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetCycleTime/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outCycleTime
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetCycleTime/outCycleTime
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the result"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetGenerationAndNodeID
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetGenerationAndNodeID
        ABSTRACT: "<p>(Obsolete) Get bus generation and remote device node ID.
"
        DISCUSSION: "<p>Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
interface v4.
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outGeneration
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outNodeID
            TYPE: UInt16 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetGenerationAndNodeID/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetGenerationAndNodeID/outGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the generation result"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetGenerationAndNodeID/outNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt16 to hold the remote device node ID"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetLocalNodeID
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetLocalNodeID
        ABSTRACT: "<p>(Obsolete) Get local node ID.
"
        DISCUSSION: "<p>Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
interface v4.
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outLocalNodeID
            TYPE: UInt16 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeID/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeID/outNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt16 to hold the local device node ID"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetResetTime
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetResetTime
        ABSTRACT: "<p>Get time since last bus reset.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outResetTime
            TYPE: AbsoluteTime *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetResetTime/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outResetTime
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetResetTime/outResetTime
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to an AbsolutTime to hold the result."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateLocalUnitDirectory
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateLocalUnitDirectory
        ABSTRACT: "<p>Creates a local unit directory object and returns an interface to it. An
instance of a unit directory object corresponds to an instance of a unit 
directory in the local machine's configuration ROM.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibLocalUnitDirectoryRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalUnitDirectory/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalUnitDirectory/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created unit directory object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetConfigDirectory
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetConfigDirectory
        ABSTRACT: "<p>Creates a config directory object and returns an interface to it. The
created config directory object represents the config directory in the remote
device or unit to which the creating device interface is attached.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibConfigDirectoryRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetConfigDirectory/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetConfigDirectory/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created config directory object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateConfigDirectoryWithIOObject
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject
        ABSTRACT: "<p>This function can be used to create a config directory object and a
corresponding interface from an opaque IOObject reference. Some configuration
directory interface methods may return an io_object_t instead of an
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
IOFireWireLibConfigDirectoryRef from an io_object_t.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibConfigDirectoryRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inObject
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created config directory object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreatePseudoAddressSpace
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreatePseudoAddressSpace
        ABSTRACT: "<p>Creates a pseudo address space object and returns an interface to it. This
will create a pseudo address space (software-backed) on the local machine. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibPseudoAddressSpaceRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inQueueBufferSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size in bytes of this address space"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inRefCon
            ABSTRACT: ""
            DISCUSSION: "<p>A user specified reference value. This will be passed to all callback functions."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inQueueBufferSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inQueueBufferSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size of the queue which receives packets from the bus before they are handed to
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
the packet dropped callback will be called."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inBackingStore
            ABSTRACT: ""
            DISCUSSION: "<p>An optional block of allocated memory representing the contents of the address space."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/inFlags
            ABSTRACT: ""
            DISCUSSION: "<p>A UInt32 with bits set corresponding to the flags that should be set
for this address space.
</p>
<ul>
<li><p>kFWAddressSpaceNoFlags -- All flags off</p></li>
<li><p>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
Setting this flag also disables compare/swap transactions on this address space.</p></li>
<li><p>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
Setting this flag also disables compare/swap transactions on this address space.</p></li>
<li><p>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
of the backing store. The user process will not be notified of writes.</p></li>
<li><p>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
using the contents of the backing store. The user process will not be notified of reads.</p></li>
<li><p>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
to the backing store at the same time the user process is notified of a write.</p></li>
</ul>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePseudoAddressSpace/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created pseudo address space object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreatePhysicalAddressSpace
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace
        ABSTRACT: "<p>Creates a physical address space object and returns an interface to it. This
will create a physical address space on the local machine. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibPhysicalAddressSpaceRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/inBackingStore
            ABSTRACT: ""
            DISCUSSION: "<p>An block of allocated memory representing the contents of the address space."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/inSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size in bytes of this address space"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/inFlags
            ABSTRACT: ""
            DISCUSSION: "<p>A UInt32 with bits set corresponding to the flags that should be set
for this address space. For future use -- always pass 0."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreatePhysicalAddressSpace/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created physical address space object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddIsochCallbackDispatcherToRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop
        ABSTRACT: "<p>This function adds an event source for the isochronous callback dispatcher
to the specified CFRunLoop. Isochronous related callbacks will not function
before this function is called. This functions is similar to 
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
from that passed to AddCallbackDispatcherToRunLoop. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>A CFRunLoopRef for the run loop to which the event loop source 
should be added"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateRemoteIsochPort
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateRemoteIsochPort
        ABSTRACT: "<p>Creates a remote isochronous port object and returns an interface to it. A
remote isochronous port object is an abstract entity used to represent a remote
talker or listener device on an isochronous channel. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibRemoteIsochPortRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inTalking
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateRemoteIsochPort/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inTalking
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateRemoteIsochPort/inTalking
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if this port represents an isochronous talker. Pass
false if this port represents an isochronous listener."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateRemoteIsochPort/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created remote isochronous port object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateLocalIsochPort
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateLocalIsochPort
        ABSTRACT: "<p>Creates a local isochronous port object and returns an interface to it. A
local isochronous port object is an abstract entity used to represent a
talking or listening endpoint in the local machine. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibLocalIsochPortRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inTalking
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgram
            TYPE: DCLCommandPtr
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartEvent
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartState
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartMask
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgramRanges
            TYPE: IOVirtualRange
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgramRangeCount
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBufferRanges
            TYPE: IOVirtualRange
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBufferRangeCount
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inTalking
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inTalking
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if this port represents an isochronous talker. Pass
false if this port represents an isochronous listener."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgram
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inDCLProgram
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to the first DCL command struct of the DCL program
to be compiled and used to send or receive data on this port."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartEvent
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inStartEvent
            ABSTRACT: ""
            DISCUSSION: "<p>Start event bits"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartState
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inStartState
            ABSTRACT: ""
            DISCUSSION: "<p>Start state bits"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inStartMask
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inStartMask
            ABSTRACT: ""
            DISCUSSION: "<p>Start mask bits"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgramRanges
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inDCLProgramRanges
            ABSTRACT: ""
            DISCUSSION: "<p>This is an optional optimization parameter which can be used
to decrease the time the local port object spends determining which set of virtual
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
structs or nil to ignore this parameter."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inDCLProgramRangeCount
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inDCLProgramRangeCount
            ABSTRACT: ""
            DISCUSSION: "<p>The number of virtual ranges passed to inDCLProgramRanges.
Pass 0 for none."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBufferRanges
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inBufferRanges
            ABSTRACT: ""
            DISCUSSION: "<p>This is an optional optimization parameter which can be used
to decrease the time the local port object spends determining which set of virtual
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
to an array of IOVirtualRange structs or nil to ignore this parameter."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBufferRangeCount
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/inBufferRangeCount
            ABSTRACT: ""
            DISCUSSION: "<p>The number of virtual ranges passed to inBufferRanges.
Pass 0 for none."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateLocalIsochPort/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateIsochChannel
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateIsochChannel
        ABSTRACT: "<p>Creates an isochronous channel object and returns an interface to it. An
isochronous channel object is an abstract entity used to represent a
FireWire isochronous channel. 
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibIsochChannelRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: doIrm
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: packetSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: prefSpeed
            TYPE: IOFWSpeed
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: doIRM
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/doIRM
            ABSTRACT: ""
            DISCUSSION: "<p>Controls whether the channel automatically performs IRM operations. 
Pass true if the channel should allocate its channel and bandwidth with
the IRM. Pass false to ignore the IRM."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: packetSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/packetSize
            ABSTRACT: ""
            DISCUSSION: "<p>Size in bytes of packets being sent or received with this channel.
This is automatically translated into a bandwidth allocation appropriate
for the speed passed in prefSpeed."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: prefSpeed
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/prefSpeed
            ABSTRACT: ""
            DISCUSSION: "<p>The preferred bus speed of this channel."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateIsochChannel/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateDCLCommandPool
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateDCLCommandPool
        ABSTRACT: "<p>Creates a command pool object and returns an interface to it. The command 
pool can be used to build DCL programs.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibDCLCommandPoolRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: IOByteCount
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateDCLCommandPool/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateDCLCommandPool/size
            ABSTRACT: ""
            DISCUSSION: "<p>Starting size of command pool"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateDCLCommandPool/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetRefCon
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetRefCon
        ABSTRACT: "<p>Get user reference value set on this interface
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void *"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetRefCon/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: SetRefCon
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/SetRefCon
        ABSTRACT: "<p>Set user reference value on this interface
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: refCon
            TYPE: const void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetRefCon/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: refCon
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/SetRefCon/refCon
            ABSTRACT: ""
            DISCUSSION: "<p>The reference value to set."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: PrintDCLProgram
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/PrintDCLProgram
        ABSTRACT: "<p>Walk a DCL program linked list and print its contents
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inProgram
            TYPE: const DCLCommandPtr
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inLength
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/PrintDCLProgram/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inProgram
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/PrintDCLProgram/inProgram
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to the first DCL of the program to print"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inLength
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/PrintDCLProgram/inLength
            ABSTRACT: ""
            DISCUSSION: "<p>Number of DCLs expected in the program. PrintDCLProgram() will
report an error if this number does not match the number of DCLs found
in the program."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateInitialUnitsPseudoAddressSpace
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace
        ABSTRACT: "<p>Creates a pseudo address space in initial units space.
"
        DISCUSSION: "<p>Creates a pseudo address space object in initial units space and returns an interface to it. This
will create a pseudo address space (software-backed) on the local machine.
</p>
<p>Availablilty: IOFireWireDeviceInterface_v3,  and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibPseudoAddressSpaceRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inAddressLo
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inQueueBufferSize
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inAddressLo
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inAddressLo
            ABSTRACT: ""
            DISCUSSION: "<p>The lower 32 bits of the base address of the address space to be created. The address is always
in initial units space."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size in bytes of this address space"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inRefCon
            ABSTRACT: ""
            DISCUSSION: "<p>A user specified reference value. This will be passed to all callback functions."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inQueueBufferSize
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inQueueBufferSize
            ABSTRACT: ""
            DISCUSSION: "<p>The size of the queue which receives packets from the bus before they are handed to
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
the packet dropped callback will be called."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inBackingStore
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inBackingStore
            ABSTRACT: ""
            DISCUSSION: "<p>An optional block of allocated memory representing the contents of the address space."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/inFlags
            ABSTRACT: ""
            DISCUSSION: "<p>A UInt32 with bits set corresponding to the flags that should be set
for this address space.
</p>
<ul>
<li><p>kFWAddressSpaceNoFlags -- All flags off</p></li>
<li><p>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
Setting this flag also disables compare/swap transactions on this address space.</p></li>
<li><p>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
Setting this flag also disables compare/swap transactions on this address space.</p></li>
<li><p>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
of the backing store. The user process will not be notified of writes.</p></li>
<li><p>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
using the contents of the backing store. The user process will not be notified of reads.</p></li>
<li><p>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
to the backing store at the same time the user process is notified of a write. Clients
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</p></li>
<li><p>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
already has an address space at the requested address. All clients will be notified of writes to
covered addresses.</p></li>
</ul>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace/iid
            ABSTRACT: ""
            DISCUSSION: "<p>An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
type of interface to be returned for the created pseudo address space object."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddCallbackDispatcherToRunLoopForMode
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode
        ABSTRACT: "<p>Add a run loop event source to allow IOFireWireLib callbacks to function.
"
        DISCUSSION: "<p>Installs the proper run loop event source to allow callbacks to function. This method
must be called before callback notifications for this interface or any interfaces
created using this interface can function. With this function, you can additionally specify
for which run loop modes this source should be added.
</p>
<p>Availability: IOFireWireDeviceInterface_v3, and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: CFStringRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop on which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode/inRunLoopMode
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop mode(s) for which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddIsochCallbackDispatcherToRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop_DONTLINK_1
        ABSTRACT: "<p>Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
"
        DISCUSSION: "<p>This function adds an event source for the isochronous callback dispatcher
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
</p>
<p>Availability: IOFireWireDeviceInterface_v3, and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: CFStringRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>A CFRunLoopRef for the run loop to which the event loop source 
should be added"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop/inRunLoopMode
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop mode(s) for which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: AddIsochCallbackDispatcherToRunLoopForMode
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode
        ABSTRACT: "<p>Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
"
        DISCUSSION: "<p>This function adds an event source for the isochronous callback dispatcher
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
</p>
<p>Availability: IOFireWireDeviceInterface_v3, and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: CFRunLoopRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: CFStringRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoop
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode/inRunLoop
            ABSTRACT: ""
            DISCUSSION: "<p>A CFRunLoopRef for the run loop to which the event loop source 
should be added"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRunLoopMode
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode/inRunLoopMode
            ABSTRACT: ""
            DISCUSSION: "<p>The run loop mode(s) for which to install the event source"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: RemoveIsochCallbackDispatcherFromRunLoop
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop
        ABSTRACT: "<p>Removes an IOFireWireLib-added run loop event source.
"
        DISCUSSION: "<p>Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
the run loop event source that was added to the specified run loop preventing any 
future callbacks from being called.
</p>
<p>Availability: IOFireWireDeviceInterface_v3, and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "void"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: Seize
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/Seize
        ABSTRACT: "<p>Seize control of device/unit
"
        DISCUSSION: "<p>Allows a user space client to seize control of an in-kernel service even if
that service has been Opened() by another client or in-kernel driver. This function should be
used with care. Admin rights are required to use this function.
</p>
<p>Calling this method makes it appear to all other drivers that the device has been unplugged.
Open() should be called after this method has been invoked.
</p>
<p>When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inFlags
            TYPE: IOOptionBits
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: ...
            TYPE:  ...
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Seize/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: reserved
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/Seize/reserved
            ABSTRACT: ""
            DISCUSSION: "<p>Reserved for future use. Set to NULL."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: FireLog
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/FireLog
        ABSTRACT: "<p>Logs string to in-kernel debug buffer
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: format
            TYPE: const char *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: ...
            TYPE:  ...
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/FireLog/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetBusCycleTime
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetBusCycleTime
        ABSTRACT: "<p>Get bus and cycle time.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outBusTime
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outCycleTime
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusCycleTime/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outBusTime
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusCycleTime/outBusTime
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the bus time"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outCycleTime
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusCycleTime/outCycleTime
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the cycle time"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CreateCompareSwapCommand64
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CreateCompareSwapCommand64
        ABSTRACT: "<p>Create a quadlet compare/swap command object and initialize it with 64-bit values.
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOFireWireLibCommandRef"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: UInt64
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: UInt64
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: IOFireWireLibCommandCallback
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: inRefCon
            TYPE: void *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: iid
            TYPE: REFIID
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported. Setting the callback value to nil defaults to synchronous execution."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: cmpVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/cmpVal
            ABSTRACT: ""
            DISCUSSION: "<p>64-bit value expected at target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/newVal
            ABSTRACT: ""
            DISCUSSION: "<p>64-bit value to be set at target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: callback
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/callback
            ABSTRACT: ""
            DISCUSSION: "<p>Command completion callback."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CreateCompareSwapCommand64/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: CompareSwap64
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/CompareSwap64
        ABSTRACT: "<p>Perform synchronous lock operation
"
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: io_object_t
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: const FWAddress *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: expectedVal
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: oldVal
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: IOByteCount
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: Boolean
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: device
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/device
            ABSTRACT: ""
            DISCUSSION: "<p>The service (representing an attached FireWire device) to which to write.
For 48-bit, device relative addressing, pass the service used to create the device interface. This
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
unsupported.
</p>
<p>If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
successful."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: addr
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/addr
            ABSTRACT: ""
            DISCUSSION: "<p>Command target address"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: expectedVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/expectedVal
            ABSTRACT: ""
            DISCUSSION: "<p>Pointer to quadlets expected at target."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: newVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/newVal
            ABSTRACT: ""
            DISCUSSION: "<p>Pointer to quadlets to atomically set at target if compare is successful."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: oldVal
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/oldVal
            ABSTRACT: ""
            DISCUSSION: "<p>Pointer to quadlets to hold value found at target address after transaction if completed."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: size
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/size
            ABSTRACT: ""
            DISCUSSION: "<p>Size in bytes of compare swap transaction to perform. Value values are 4 and 8."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: failOnReset
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/failOnReset
            ABSTRACT: ""
            DISCUSSION: "<p>Pass true if the command should only be executed during the FireWire bus generation
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
obtained by calling GetGenerationAndNodeID()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: generation
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/CompareSwap64/generation
            ABSTRACT: ""
            DISCUSSION: "<p>The FireWire bus generation during which the command should be executed. Ignored
if failOnReset is false."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetBusGeneration
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetBusGeneration
        ABSTRACT: "<p>Get bus generation number.
"
        DISCUSSION: "<p>The bus generation number stays constant between bus resets and can be
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
Pass the generation number to functions that take or return FireWire node IDs.
</p>
<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outGeneration
            TYPE: UInt32 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusGeneration/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetBusGeneration/outGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt32 to hold the bus generation  number"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetLocalNodeIDWithGeneration
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration
        ABSTRACT: "<p>Get node ID of local machine.
"
        DISCUSSION: "<p>Use this function instead of GetLocalNodeID().
</p>
<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outLocalNodeID
            TYPE: UInt16 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration/checkGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A bus generation number obtained from GetBusGeneration()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outLocalNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration/outLocalNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt16 to hold the node ID of the local machine."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetRemoteNodeID
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetRemoteNodeID
        ABSTRACT: "<p>Get node ID of device to which this interface is attached.
"
        DISCUSSION: "<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outRemoteNodeID
            TYPE: UInt16 *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetRemoteNodeID/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetRemoteNodeID/checkGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A bus generation number obtained from GetBusGeneration()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outRemoteNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetRemoteNodeID/outRemoteNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to a UInt16 to hold the node ID of the remote device."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetSpeedToNode
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetSpeedToNode
        ABSTRACT: "<p>Get maximum transfer speed to device to which this interface is attached.
"
        DISCUSSION: "<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outSpeed
            TYPE: IOFWSpeed *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedToNode/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedToNode/checkGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A bus generation number obtained from GetBusGeneration()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outSpeed
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedToNode/outSpeed
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to an IOFWSpeed to hold the maximum speed to the remote device."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TREE COUNT: 1
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::Function
        NAME: GetSpeedBetweenNodes
        APIUID: //test_ref/doc/com/intfm/IOFireWireDeviceInterface/GetSpeedBetweenNodes
        ABSTRACT: "<p>Get maximum transfer speed to device to which this interface is attached.
"
        DISCUSSION: "<p>Availability: IOFireWireDeviceInterface_v4 and newer
</p>
"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: "class_group_1"
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: "IOReturn"
        LINENUM: ""
        CLASS: "HeaderDoc::Function"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: "0"
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        PARSED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: IOFireWireLibDeviceRef
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: UInt32
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: srcNodeID
            TYPE: UInt16
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: destNodeID
            TYPE: UInt16
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outSpeed
            TYPE: IOFWSpeed *
            APIUID: 
            ABSTRACT: ""
            DISCUSSION: "<p></p>"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
        TAGGED PARAMETERS:
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: self
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/self
            ABSTRACT: ""
            DISCUSSION: "<p>The device interface to use."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: checkGeneration
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/checkGeneration
            ABSTRACT: ""
            DISCUSSION: "<p>A bus generation number obtained from GetBusGeneration()"
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: srcNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/srcNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A FireWire node ID."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: destNodeID
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/destNodeID
            ABSTRACT: ""
            DISCUSSION: "<p>A FireWire node ID."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
            TREE COUNT: 0
            INDEX GROUP: 
            IS BLOCK: 
            OBJECT TYPE: HeaderDoc::MinorAPIElement
            NAME: outSpeed
            TYPE: 
            APIUID: //test_ref/doc/functionparam/IOFireWireDeviceInterface/GetSpeedBetweenNodes/outSpeed
            ABSTRACT: ""
            DISCUSSION: "<p>A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'."
            UPDATED: ""
            COPYRIGHT: ""
            HTMLMETA: ""
            PRIVATEDECLARATION: ""
            GROUP: ""
            INDEXGROUP: ""
            THROWS: ""
            XMLTHROWS: ""
            UPDATED: ""
            LINKAGESTATE: ""
            ACCESSCONTROL: ""
            AVAILABILITY: ""
            LINKUID: ""
            ORIGCLASS: ""
            ISDEFINE: ""
            ISTEMPLATE: ""
            VALUE: "UNKNOWN"
            RETURNTYPE: ""
            LINENUM: ""
            CLASS: "HeaderDoc::MinorAPIElement"
            MASTERENUM: ""
            APIREFSETUPDONE: "1"
            TPCDONE: ""
            NOREGISTERUID: ""
            SUPPRESSCHILDREN: ""
            NAMELINE_DISCUSSION: ""
            HIDEDOC: ""
            HIDESINGLETONS: ""
            HIDECONTENTS: ""
            MAINOBJECT: ""
            LIST ATTRIBUTES: 
            SHORT ATTRIBUTES: 
            LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::CPPClass
    NAME: IOFireWireUnitInterface
    APIUID: //test_ref/c/cl/IOFireWireUnitInterface
    ABSTRACT: "<p>IOFireWireDeviceInterface is your primary gateway to the functionality contained in
IOFireWireLib.
"
    DISCUSSION: "<p>You can use IOFireWireDeviceInterface to:<br>
</p>
<ul>
<li><p>perform synchronous read, write and lock operations</p></li>
<li><p>perform other miscellanous bus operations, such as reset the FireWire bus. </p></li>
<li><p>create FireWire command objects and interfaces used to perform
synchronous/asynchronous read, write and lock operations. These include:</p></li>
<ul type="square">
<li><p>IOFireWireReadCommandInterface
</p>
</li><li><p>IOFireWireReadQuadletCommandInterface
</p>
</li><li><p>IOFireWireWriteCommandInterface
</p>
</li><li><p>IOFireWireWriteQuadletCommandInterface
</p>
</li><li><p>IOFireWireCompareSwapCommandInterface
</p></li></ul>
<li><p>create interfaces which provide a other extended services. These include:</p></li>
<ul type="square">	
<li><p>IOFireWirePseudoAddressSpaceInterface -- pseudo address space services</p></li>
<li><p>IOFireWirePhysicalAddressSpaceInterface -- physical address space services</p></li>
<li><p>IOFireWireLocalUnitDirectoryInterface -- manage local unit directories in the mac</p></li>
<li><p>IOFireWireConfigDirectoryInterface -- access and browse remote device config directories</p></li>
</ul>
<li><p>create interfaces which provide isochronous services (see IOFireWireLibIsoch.h). These include:</p></li>
<ul type="square">	
<li><p>IOFireWireIsochChannelInterface -- create/manage talker and listener isoch channels</p></li>
<li><p>IOFireWireLocalIsochPortInterface -- create local isoch ports</p></li>
<li><p>IOFireWireRemoteIsochPortInterface -- create remote isoch ports</p></li>
<li><p>IOFireWireDCLCommandPoolInterface -- create a DCL command pool allocator.</p></li>
</ul>
</ul>

"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::CPPClass"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p><b>Declared In</b></p><p><a href="../../index.html" logicalPath="//test_ref/doc/header/COM_interface_1.test" target="_top" machineGenerated="true">COM interface 1</a></p>

    LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::CPPClass
    NAME: IOFireWireNubInterface
    APIUID: //test_ref/c/cl/IOFireWireNubInterface
    ABSTRACT: "<p>IOFireWireDeviceInterface is your primary gateway to the functionality contained in
IOFireWireLib.
"
    DISCUSSION: "<p>You can use IOFireWireDeviceInterface to:<br>
</p>
<ul>
<li><p>perform synchronous read, write and lock operations</p></li>
<li><p>perform other miscellanous bus operations, such as reset the FireWire bus. </p></li>
<li><p>create FireWire command objects and interfaces used to perform
synchronous/asynchronous read, write and lock operations. These include:</p></li>
<ul type="square">
<li><p>IOFireWireReadCommandInterface
</p>
</li><li><p>IOFireWireReadQuadletCommandInterface
</p>
</li><li><p>IOFireWireWriteCommandInterface
</p>
</li><li><p>IOFireWireWriteQuadletCommandInterface
</p>
</li><li><p>IOFireWireCompareSwapCommandInterface
</p></li></ul>
<li><p>create interfaces which provide a other extended services. These include:</p></li>
<ul type="square">	
<li><p>IOFireWirePseudoAddressSpaceInterface -- pseudo address space services</p></li>
<li><p>IOFireWirePhysicalAddressSpaceInterface -- physical address space services</p></li>
<li><p>IOFireWireLocalUnitDirectoryInterface -- manage local unit directories in the mac</p></li>
<li><p>IOFireWireConfigDirectoryInterface -- access and browse remote device config directories</p></li>
</ul>
<li><p>create interfaces which provide isochronous services (see IOFireWireLibIsoch.h). These include:</p></li>
<ul type="square">	
<li><p>IOFireWireIsochChannelInterface -- create/manage talker and listener isoch channels</p></li>
<li><p>IOFireWireLocalIsochPortInterface -- create local isoch ports</p></li>
<li><p>IOFireWireRemoteIsochPortInterface -- create remote isoch ports</p></li>
<li><p>IOFireWireDCLCommandPoolInterface -- create a DCL command pool allocator.</p></li>
</ul>
</ul>

"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::CPPClass"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p><b>Declared In</b></p><p><a href="../../index.html" logicalPath="//test_ref/doc/header/COM_interface_1.test" target="_top" machineGenerated="true">COM interface 1</a></p>

    LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::CPPClass
    NAME: IOFireWireDeviceInterface_t
    APIUID: //test_ref/c/cl/IOFireWireDeviceInterface_t
    ABSTRACT: "<p>IOFireWireDeviceInterface is your primary gateway to the functionality contained in
IOFireWireLib.
"
    DISCUSSION: "<p>You can use IOFireWireDeviceInterface to:<br>
</p>
<ul>
<li><p>perform synchronous read, write and lock operations</p></li>
<li><p>perform other miscellanous bus operations, such as reset the FireWire bus. </p></li>
<li><p>create FireWire command objects and interfaces used to perform
synchronous/asynchronous read, write and lock operations. These include:</p></li>
<ul type="square">
<li><p>IOFireWireReadCommandInterface
</p>
</li><li><p>IOFireWireReadQuadletCommandInterface
</p>
</li><li><p>IOFireWireWriteCommandInterface
</p>
</li><li><p>IOFireWireWriteQuadletCommandInterface
</p>
</li><li><p>IOFireWireCompareSwapCommandInterface
</p></li></ul>
<li><p>create interfaces which provide a other extended services. These include:</p></li>
<ul type="square">	
<li><p>IOFireWirePseudoAddressSpaceInterface -- pseudo address space services</p></li>
<li><p>IOFireWirePhysicalAddressSpaceInterface -- physical address space services</p></li>
<li><p>IOFireWireLocalUnitDirectoryInterface -- manage local unit directories in the mac</p></li>
<li><p>IOFireWireConfigDirectoryInterface -- access and browse remote device config directories</p></li>
</ul>
<li><p>create interfaces which provide isochronous services (see IOFireWireLibIsoch.h). These include:</p></li>
<ul type="square">	
<li><p>IOFireWireIsochChannelInterface -- create/manage talker and listener isoch channels</p></li>
<li><p>IOFireWireLocalIsochPortInterface -- create local isoch ports</p></li>
<li><p>IOFireWireRemoteIsochPortInterface -- create remote isoch ports</p></li>
<li><p>IOFireWireDCLCommandPoolInterface -- create a DCL command pool allocator.</p></li>
</ul>
</ul>

"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::CPPClass"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p><b>Declared In</b></p><p><a href="../../index.html" logicalPath="//test_ref/doc/header/COM_interface_1.test" target="_top" machineGenerated="true">COM interface 1</a></p>

    LONG ATTRIBUTES: 
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: InterfaceIsInited (HeaderDoc::Function)
+---Boolean
+---                                
+---(
|   +---*
|   +---InterfaceIsInited
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetDevice (HeaderDoc::Function)
+---io_object_t
+---                        
+---(
|   +---*
|   +---GetDevice
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Open (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---Open
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: OpenWithSessionRef (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---OpenWithSessionRef
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---IOFireWireSessionRef
|   +--- 
|   +---sessionRef
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Close (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---Close
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: NotificationIsOn (HeaderDoc::Function)
+---const
+--- 
+---Boolean
+---                
+---(
|   +---*
|   +---NotificationIsOn
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddCallbackDispatcherToRunLoop (HeaderDoc::Function)
+---const
+--- 
+---IOReturn
+---                 
+---(
|   +---*
|   +---AddCallbackDispatcherToRunLoop
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---CFRunLoopRef
|   +--- 
|   +---inRunLoop
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: RemoveCallbackDispatcherFromRunLoop (HeaderDoc::Function)
+---const
+--- 
+---void
+---                        
+---(
|   +---*
|   +---RemoveCallbackDispatcherFromRunLoop
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: TurnOnNotification (HeaderDoc::Function)
+---const
+--- 
+---Boolean
+---                 
+---(
|   +---*
|   +---TurnOnNotification
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: TurnOffNotification (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---TurnOffNotification
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: SetBusResetHandler (HeaderDoc::Function)
+---const
+--- 
+---IOFireWireBusResetHandler
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---SetBusResetHandler
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---IOFireWireBusResetHandler
|   +--- 
|   +---handler
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: SetBusResetDoneHandler (HeaderDoc::Function)
+---const
+--- 
+---IOFireWireBusResetDoneHandler
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---SetBusResetDoneHandler
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +--- 
|   +---handler
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: ClientCommandIsComplete (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---ClientCommandIsComplete
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---FWClientCommandID
|   +--- 
|   +---commandID
|   +---,
|   +--- 
|   +---IOReturn
|   +--- 
|   +---status
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Read (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---Read
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---io_object_t
|   +---                 
|   +---device
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---void
|   +---*
|   +---                                 
|   +---buf
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---*
|   +---                         
|   +---size
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---Boolean
|   +---                         
|   +---failOnReset
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                 
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: ReadQuadlet (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---ReadQuadlet
|   +---)
+---(
|   +---        
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---io_object_t
|   +---                         
|   +---device
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +---                 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---UInt32
|   +---*
|   +---                                 
|   +---val
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---Boolean
|   +---                                 
|   +---failOnReset
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---UInt32
|   +---                                         
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Write (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---Write
|   +---)
+---(
|   +---        
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---io_object_t
|   +---                         
|   +---device
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +---                 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---const
|   +--- 
|   +---void
|   +---*
|   +---                         
|   +---buf
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---UInt32
|   +---*
|   +---                                 
|   +---size
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---Boolean
|   +---                                 
|   +---failOnReset
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                        
|   +---UInt32
|   +---                                         
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: WriteQuadlet (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---WriteQuadlet
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---UInt32
|   +--- 
|   +---val
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CompareSwap (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---CompareSwap
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---cmpVal
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---newVal
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateReadCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateReadCommand
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---buf
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---size
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateReadQuadletCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateReadQuadletCommand
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---quads
|   +---[
|   |   +---]
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---numQuads
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateWriteCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateWriteCommand
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---buf
|   +---,
|   +--- 
|   +---UInt32
|   +---  
|   +---size
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateWriteQuadletCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateWriteQuadletCommand
|   +---)
+---(
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +---        
|   +---addr
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---quads
|   +---[
|   |   +---]
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---numQuads
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateCompareSwapCommand (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateCompareSwapCommand
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +--- 
|   +---*
|   +---  
|   +---addr
|   +---,
|   +--- 
|   +---UInt32
|   +---      
|   +---cmpVal
|   +---,
|   +--- 
|   +---UInt32
|   +---      
|   +---newVal
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +--- 
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: BusReset (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---BusReset
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetCycleTime (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetCycleTime
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +---  
|   +---outCycleTime
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetGenerationAndNodeID (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetGenerationAndNodeID
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +---  
|   +---outGeneration
|   +---,
|   +--- 
|   +---UInt16
|   +---*
|   +---  
|   +---outNodeID
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetLocalNodeID (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetLocalNodeID
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt16
|   +---*
|   +---  
|   +---outLocalNodeID
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetResetTime (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---GetResetTime
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---AbsoluteTime
|   +---*
|   +---                         
|   +---outResetTime
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateLocalUnitDirectory (HeaderDoc::Function)
+---IOFireWireLibLocalUnitDirectoryRef
+--- 
+---(
|   +---*
|   +---CreateLocalUnitDirectory
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---REFIID
|   +---  
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetConfigDirectory (HeaderDoc::Function)
+---IOFireWireLibConfigDirectoryRef
+--- 
+---(
|   +---*
|   +---GetConfigDirectory
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---REFIID
|   +---  
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateConfigDirectoryWithIOObject (HeaderDoc::Function)
+---IOFireWireLibConfigDirectoryRef
+--- 
+---(
|   +---*
|   +---CreateConfigDirectoryWithIOObject
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +---  
|   +---inObject
|   +---,
|   +--- 
|   +---REFIID
|   +---  
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreatePseudoAddressSpace (HeaderDoc::Function)
+---IOFireWireLibPseudoAddressSpaceRef
+---        
+---(
|   +---*
|   +---CreatePseudoAddressSpace
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---IOFireWireLibDeviceRef
|   +---          
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---void
|   +---*
|   +---                                                  
|   +---inRefCon
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inQueueBufferSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---void
|   +---*
|   +---                                                  
|   +---inBackingStore
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inFlags
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---REFIID
|   +---                                          
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreatePhysicalAddressSpace (HeaderDoc::Function)
+---IOFireWireLibPhysicalAddressSpaceRef
+--- 
+---(
|   +---*
|   +---CreatePhysicalAddressSpace
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---  
|   +---inSize
|   +---,
|   +--- 
|   +---void
|   +---*
|   +---  
|   +---inBackingStore
|   +---,
|   +--- 
|   +---UInt32
|   +---  
|   +---inFlags
|   +---,
|   +--- 
|   +---REFIID
|   +---  
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoop (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---AddIsochCallbackDispatcherToRunLoop
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFRunLoopRef
|   +---                         
|   +---inRunLoop
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateRemoteIsochPort (HeaderDoc::Function)
+---IOFireWireLibRemoteIsochPortRef
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---CreateRemoteIsochPort
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---Boolean
|   +---                                        
|   +---inTalking
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---REFIID
|   +---                                        
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateLocalIsochPort (HeaderDoc::Function)
+---IOFireWireLibLocalIsochPortRef
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---CreateLocalIsochPort
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---Boolean
|   +---                                        
|   +---inTalking
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---DCLCommandPtr
|   +---                        
|   +---inDCLProgram
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inStartEvent
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inStartState
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inStartMask
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOVirtualRange
|   +---                        
|   +---inDCLProgramRanges
|   +---[
|   |   +---]
|   +---,
|   +---        
|   +---//
|   |   +--- 
|   |   +---optional optimization parameters
|   |   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inDCLProgramRangeCount
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOVirtualRange
|   +---                        
|   +---inBufferRanges
|   +---[
|   |   +---]
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                        
|   +---inBufferRangeCount
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---REFIID
|   +---                                         
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateIsochChannel (HeaderDoc::Function)
+---IOFireWireLibIsochChannelRef
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---CreateIsochChannel
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---Boolean
|   +---                                 
|   +---doIrm
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                         
|   +---packetSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFWSpeed
|   +---                                 
|   +---prefSpeed
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---REFIID
|   +---                                         
|   +---iid
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateDCLCommandPool (HeaderDoc::Function)
+---IOFireWireLibDCLCommandPoolRef
+---[ NEWLINE ]
+---                                                
+---(
|   +---*
|   +---CreateDCLCommandPool
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOByteCount
|   +---                         
|   +---size
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---REFIID
|   +---                                         
|   +---iid
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetRefCon (HeaderDoc::Function)
+---void
+---*
+---                                
+---(
|   +---*
|   +---GetRefCon
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: SetRefCon (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---SetRefCon
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---const
|   +--- 
|   +---void
|   +---*
|   +---                                
|   +---refCon
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: PrintDCLProgram (HeaderDoc::Function)
+---void
+---                                 
+---(
|   +---*
|   +---PrintDCLProgram
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---        
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---const
|   +--- 
|   +---DCLCommandPtr
|   +---                
|   +---inProgram
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---UInt32
|   +---                                         
|   +---inLength
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateInitialUnitsPseudoAddressSpace (HeaderDoc::Function)
+---IOFireWireLibPseudoAddressSpaceRef
+---        
+---(
|   +---*
|   +---CreateInitialUnitsPseudoAddressSpace
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---IOFireWireLibDeviceRef
|   +---          
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                                
|   +---inAddressLo
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---void
|   +---*
|   +---                                                  
|   +---inRefCon
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inQueueBufferSize
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---void
|   +---*
|   +---                                                  
|   +---inBackingStore
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---UInt32
|   +---                                          
|   +---inFlags
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                
|   +---REFIID
|   +---                                          
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
+---IOReturn
+---                         
+---(
|   +---*
|   +---AddCallbackDispatcherToRunLoopForMode
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFRunLoopRef
|   +---                         
|   +---inRunLoop
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFStringRef
|   +---                                
|   +---inRunLoopMode
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---AddIsochCallbackDispatcherToRunLoopForMode
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFRunLoopRef
|   +---                        
|   +---inRunLoop
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFStringRef
|   +---                         
|   +---inRunLoopMode
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---AddIsochCallbackDispatcherToRunLoopForMode
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFRunLoopRef
|   +---                        
|   +---inRunLoop
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---CFStringRef
|   +---                         
|   +---inRunLoopMode
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: RemoveIsochCallbackDispatcherFromRunLoop (HeaderDoc::Function)
+---void
+---                                
+---(
|   +---*
|   +---RemoveIsochCallbackDispatcherFromRunLoop
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: Seize (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---Seize
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOOptionBits
|   +---                        
|   +---inFlags
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---.
|   +---.
|   +---.
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: FireLog (HeaderDoc::Function)
+---IOReturn
+---                        
+---(
|   +---*
|   +---FireLog
|   +---)
+---(
|   +---[ NEWLINE ]
|   +---                                                                
|   +---IOFireWireLibDeviceRef
|   +---         
|   +---self
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---const
|   +--- 
|   +---char
|   +---*
|   +---                                
|   +---format
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                
|   +---.
|   +---.
|   +---.
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetBusCycleTime (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetBusCycleTime
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +---  
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +---  
|   +---outBusTime
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +---  
|   +---outCycleTime
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CreateCompareSwapCommand64 (HeaderDoc::Function)
+---IOFireWireLibCommandRef
+--- 
+---(
|   +---*
|   +---CreateCompareSwapCommand64
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                                                
|   +---UInt64
|   +--- 
|   +---cmpVal
|   +---,
|   +--- 
|   +---UInt64
|   +--- 
|   +---newVal
|   +---,
|   +--- 
|   +---IOFireWireLibCommandCallback
|   +--- 
|   +---callback
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                                                                
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---,
|   +--- 
|   +---void
|   +---*
|   +--- 
|   +---inRefCon
|   +---,
|   +--- 
|   +---REFIID
|   +--- 
|   +---iid
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: CompareSwap64 (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---CompareSwap64
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---io_object_t
|   +--- 
|   +---device
|   +---,
|   +--- 
|   +---const
|   +--- 
|   +---FWAddress
|   +---*
|   +--- 
|   +---addr
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---UInt32
|   +---*
|   +--- 
|   +---expectedVal
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +--- 
|   +---newVal
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +--- 
|   +---oldVal
|   +---,
|   +--- 
|   +---IOByteCount
|   +--- 
|   +---size
|   +---,
|   +---[ NEWLINE ]
|   +---                                                                                
|   +---Boolean
|   +--- 
|   +---failOnReset
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---generation
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetBusGeneration (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetBusGeneration
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +---*
|   +--- 
|   +---outGeneration
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetLocalNodeIDWithGeneration (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetLocalNodeIDWithGeneration
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---checkGeneration
|   +---,
|   +--- 
|   +---UInt16
|   +---*
|   +--- 
|   +---outLocalNodeID
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetRemoteNodeID (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetRemoteNodeID
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---checkGeneration
|   +---,
|   +--- 
|   +---UInt16
|   +---*
|   +--- 
|   +---outRemoteNodeID
|   +--- 
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetSpeedToNode (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetSpeedToNode
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---checkGeneration
|   +---,
|   +--- 
|   +---IOFWSpeed
|   +---*
|   +--- 
|   +---outSpeed
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: GetSpeedBetweenNodes (HeaderDoc::Function)
+---IOReturn
+--- 
+---(
|   +---*
|   +---GetSpeedBetweenNodes
|   +---)
+---(
|   +--- 
|   +---IOFireWireLibDeviceRef
|   +--- 
|   +---self
|   +---,
|   +--- 
|   +---UInt32
|   +--- 
|   +---checkGeneration
|   +---,
|   +--- 
|   +---UInt16
|   +--- 
|   +---srcNodeID
|   +---,
|   +--- 
|   +---UInt16
|   +--- 
|   +---destNodeID
|   +---,
|   +---  
|   +---IOFWSpeed
|   +---*
|   +--- 
|   +---outSpeed
|   +---)
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
+---typedef
+--- 
+---struct
+--- 
+---IOFireWireDeviceInterface_t
+---[ NEWLINE ]
+---{
|   +---[ NEWLINE ]
|   +---        
|   +---IUNKNOWN_C_GUTS
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---UInt32
|   +--- 
|   +---version
|   +---,
|   +--- 
|   +---revision
|   +--- 
|   +---;
|   +--- 
|   +---//
|   |   +--- 
|   |   +---version/revision
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ maintenance methods -------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function InterfaceIsInited
|   |   +---
@abstract Determine whether interface has been properly inited.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns true if interface is inited and false if is it not.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---Boolean
|   +---                                
|   +---(
|   |   +---*
|   |   +---InterfaceIsInited
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function GetDevice
|   |   +---
@abstract Get the IOKit service to which this interface is connected.
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns an io_object_t corresponding to the device the interface is
|   |   +---
using
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---io_object_t
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDevice
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_2
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Open
|   |   +---
@abstract Open the connected device for exclusive access. When you have
|   |   +---
the device open using this method, all accesses by other clients of 
|   |   +---
this device will be denied until Close() is called.
|   |   +---
@param self The device interface to use.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Open
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function OpenWithSessionRef
|   |   +---
@abstract An open function which allows this interface to have access
|   |   +---
to the device when already opened. The service which has already opened
|   |   +---
the device must be able to provide an IOFireWireSessionRef.
|   |   +---
@param self The device interface to use
|   |   +---
@param IOFireWireSessionRef The sessionRef returned from the client who has
|   |   +---
the device open
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---OpenWithSessionRef
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireSessionRef
|   |   +--- 
|   |   +---sessionRef
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@functiongroup class_group_1
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Close
|   |   +---
@abstract Release exclusive access to the device
|   |   +---
@param self The device interface to use
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---Close
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ notification --------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function NotificationIsOn
|   |   +---
@abstract Determine whether callback notifications for this interface are currently active
|   |   +---
@param self The device interface to use
|   |   +---
@result A Boolean value where true indicates notifications are active
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                
|   +---(
|   |   +---*
|   |   +---NotificationIsOn
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoop
|   |   +---
@abstract Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function.
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOReturn
|   +---                 
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---CFRunLoopRef
|   |   +--- 
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveCallbackDispatcherFromRunLoop
|   |   +---
@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---void
|   +---                        
|   +---(
|   |   +---*
|   |   +---RemoveCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOnNotification
|   |   +---
@abstract Activates any callbacks specified for this device interface. Only works after 
|   |   +---
AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
|   |   +---
@param self The device interface to use.
|   |   +---
@result A Boolean value. Returns true on success.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---Boolean
|   +---                 
|   +---(
|   |   +---*
|   |   +---TurnOnNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function TurnOffNotification
|   |   +---
@abstract Deactivates and callbacks specified for this device interface. Reverses the 
|   |   +---
effects of TurnOnNotification()
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---TurnOffNotification
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetHandler
|   |   +---
@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
|   |   +---
can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
|   |   +---
resets might occur before bus reconfiguration has completed.)
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function SetBusResetDoneHandler
|   |   +---
@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
|   |   +---
of the bus has been completed. This function will only be called once per bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param handler Function pointer to the handler to install
|   |   +---
@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
|   |   +---
bus reset handler. Returns 0 if none was set.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---const
|   +--- 
|   +---IOFireWireBusResetDoneHandler
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---SetBusResetDoneHandler
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireBusResetDoneHandler
|   |   +--- 
|   |   +---handler
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ClientCommandIsComplete
|   |   +---
@abstract This function must be called from callback routines once they have completed processing
|   |   +---
a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
|   |   +---
parameter.
|   |   +---
@param commandID The command ID passed to the callback function when it was called
|   |   +---
@param status An IOReturn value indicating the completion status of the callback function
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---ClientCommandIsComplete
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---FWClientCommandID
|   |   +--- 
|   |   +---commandID
|   |   +---,
|   |   +--- 
|   |   +---IOReturn
|   |   +--- 
|   |   +---status
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ read/write/lock operations -------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Read
|   |   +---
@abstract Perform synchronous block read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Read
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---io_object_t
|   |   +---                 
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                 
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                         
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function ReadQuadlet
|   |   +---
@abstract Perform synchronous quadlet read
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to read. 
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param value A pointer to where to data should be stored
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in generation. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---ReadQuadlet
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---val
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Write
|   |   +---
@abstract Perform synchronous block write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Write
|   |   +---)
|   +---(
|   |   +---        
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---io_object_t
|   |   +---                         
|   |   +---device
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +---                 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                         
|   |   +---buf
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---*
|   |   +---                                 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---Boolean
|   |   +---                                 
|   |   +---failOnReset
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                        
|   |   +---UInt32
|   |   +---                                         
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function WriteQuadlet
|   |   +---
@abstract Perform synchronous quadlet write
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param val The value to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---WriteQuadlet
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---val
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal The check/compare value
|   |   +---
@param newVal Value to set
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ FireWire command object methods ---------
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateReadCommand
|   |   +---
@abstract Create a block read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to a buffer where the results will be stored
|   |   +---
@param size Number of bytes to read
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateReadQuadletCommand
|   |   +---
@abstract Create a quadlet read command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets where results should be stored
|   |   +---
@param numQuads Number of quadlets to read
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@param 
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateReadQuadletCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateWriteCommand
|   |   +---
@abstract Create a block write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param buf A pointer to the buffer containing the data to be written
|   |   +---
@param size Number of bytes to write
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---buf
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---size
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateWriteQuadletCommand
|   |   +---
@abstract Create a quadlet write command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param quads An array of quadlets containing quadlets to be written
|   |   +---
@param numQuads Number of quadlets to write
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateWriteQuadletCommand
|   |   +---)
|   +---(
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---        
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---quads
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---numQuads
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand
|   |   +---
@abstract Create a quadlet compare/swap command object.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 32-bit value expected at target address
|   |   +---
@param newVal 32-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +--- 
|   |   +---*
|   |   +---  
|   |   +---addr
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---      
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +--- 
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ other methods ---------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function BusReset
|   |   +---
@abstract Cause a bus reset
|   |   +---
@param self The device interface to use. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---BusReset
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetCycleTime
|   |   +---
@abstract Get bus cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the result
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetGenerationAndNodeID
|   |   +---
@abstract (Obsolete) Get bus generation and remote device node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the generation result
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the remote device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetGenerationAndNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeID
|   |   +---
@abstract (Obsolete) Get local node ID.
|   |   +---
@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
|   |   +---
interface v4.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outNodeID A pointer to a UInt16 to hold the local device node ID
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +---  
|   |   +---outLocalNodeID
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetResetTime
|   |   +---
@abstract Get time since last bus reset.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outResetTime A pointer to an AbsolutTime to hold the result.
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetResetTime
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---AbsoluteTime
|   |   +---*
|   |   +---                         
|   |   +---outResetTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ unit directory support ------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalUnitDirectory
|   |   +---
@abstract Creates a local unit directory object and returns an interface to it. An
|   |   +---
instance of a unit directory object corresponds to an instance of a unit 
|   |   +---
directory in the local machine's configuration ROM.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created unit directory object.
|   |   +---
@result An IOFireWireLibLocalUnitDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---         
|   +---IOFireWireLibLocalUnitDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateLocalUnitDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ config directory support ----------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetConfigDirectory
|   |   +---
@abstract Creates a config directory object and returns an interface to it. The
|   |   +---
created config directory object represents the config directory in the remote
|   |   +---
device or unit to which the creating device interface is attached.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetConfigDirectory
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateConfigDirectoryWithIOObject
|   |   +---
@abstract This function can be used to create a config directory object and a
|   |   +---
corresponding interface from an opaque IOObject reference. Some configuration
|   |   +---
directory interface methods may return an io_object_t instead of an
|   |   +---
IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
|   |   +---
IOFireWireLibConfigDirectoryRef from an io_object_t.
|   |   +---
@param self The device interface to use.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created config directory object.
|   |   +---
@result An IOFireWireLibConfigDirectoryRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibConfigDirectoryRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateConfigDirectoryWithIOObject
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +---  
|   |   +---inObject
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ address space support -------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space object and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreatePseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreatePhysicalAddressSpace
|   |   +---
@abstract Creates a physical address space object and returns an interface to it. This
|   |   +---
will create a physical address space on the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inBackingStore An block of allocated memory representing the contents of the address space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space. For future use -- always pass 0.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created physical address space object.
|   |   +---
@result An IOFireWireLibPhysicalAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPhysicalAddressSpaceRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreatePhysicalAddressSpace
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inSize
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---  
|   |   +---inBackingStore
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---  
|   |   +---inFlags
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +---  
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---FireBugMsg
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---  
|   |   +---msg
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v2 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---                
|   +---//
|   |   +--- 
|   |   +------ eye-sock-run-U.S. -----------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not function
|   |   +---
before this function is called. This functions is similar to 
|   |   +---
AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
|   |   +---
from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateRemoteIsochPort
|   |   +---
@abstract Creates a remote isochronous port object and returns an interface to it. A
|   |   +---
remote isochronous port object is an abstract entity used to represent a remote
|   |   +---
talker or listener device on an isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created remote isochronous port object.
|   |   +---
@result An IOFireWireLibRemoteIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibRemoteIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateRemoteIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                        
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateLocalIsochPort
|   |   +---
@abstract Creates a local isochronous port object and returns an interface to it. A
|   |   +---
local isochronous port object is an abstract entity used to represent a
|   |   +---
talking or listening endpoint in the local machine. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param inTalking Pass true if this port represents an isochronous talker. Pass
|   |   +---
false if this port represents an isochronous listener.
|   |   +---
@param inDCLProgram A pointer to the first DCL command struct of the DCL program
|   |   +---
to be compiled and used to send or receive data on this port.
|   |   +---
@param inStartEvent Start event bits
|   |   +---
@param inStartState Start state bits
|   |   +---
@param inStartMask Start mask bits
|   |   +---
@param inDCLProgramRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
|   |   +---
structs or nil to ignore this parameter.
|   |   +---
@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param inBufferRanges This is an optional optimization parameter which can be used
|   |   +---
to decrease the time the local port object spends determining which set of virtual
|   |   +---
ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
|   |   +---
to an array of IOVirtualRange structs or nil to ignore this parameter.
|   |   +---
@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
|   |   +---
Pass 0 for none.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibLocalIsochPortRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibLocalIsochPortRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateLocalIsochPort
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                        
|   |   +---inTalking
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---DCLCommandPtr
|   |   +---                        
|   |   +---inDCLProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartEvent
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartState
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inStartMask
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inDCLProgramRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---        
|   |   +---//
|   |   |   +--- 
|   |   |   +---optional optimization parameters
|   |   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inDCLProgramRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOVirtualRange
|   |   +---                        
|   |   +---inBufferRanges
|   |   +---[
|   |   |   +---]
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                        
|   |   +---inBufferRangeCount
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateIsochChannel
|   |   +---
@abstract Creates an isochronous channel object and returns an interface to it. An
|   |   +---
isochronous channel object is an abstract entity used to represent a
|   |   +---
FireWire isochronous channel. 
|   |   +---
@param self The device interface to use.
|   |   +---
@param doIRM Controls whether the channel automatically performs IRM operations. 
|   |   +---
Pass true if the channel should allocate its channel and bandwidth with
|   |   +---
the IRM. Pass false to ignore the IRM.
|   |   +---
@param packetSize Size in bytes of packets being sent or received with this channel.
|   |   +---
This is automatically translated into a bandwidth allocation appropriate
|   |   +---
for the speed passed in prefSpeed.
|   |   +---
@param prefSpeed The preferred bus speed of this channel.
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibIsochChannelRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibIsochChannelRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateIsochChannel
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---Boolean
|   |   +---                                 
|   |   +---doIrm
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---packetSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFWSpeed
|   |   +---                                 
|   |   +---prefSpeed
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateDCLCommandPool
|   |   +---
@abstract Creates a command pool object and returns an interface to it. The command 
|   |   +---
pool can be used to build DCL programs.
|   |   +---
@param self The device interface to use.
|   |   +---
@param size Starting size of command pool
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created object.
|   |   +---
@result An IOFireWireLibDCLCommandPoolRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibDCLCommandPoolRef
|   +---[ NEWLINE ]
|   +---                                                
|   +---(
|   |   +---*
|   |   +---CreateDCLCommandPool
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOByteCount
|   |   +---                         
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---REFIID
|   |   +---                                         
|   |   +---iid
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ refcons ---------------------------------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRefCon
|   |   +---
@abstract Get user reference value set on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@result Returns the user's reference value set on this interface. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---*
|   +---                                
|   +---(
|   |   +---*
|   |   +---GetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function SetRefCon
|   |   +---
@abstract Set user reference value on this interface
|   |   +---
@param self The device interface to use.
|   |   +---
@param refCon The reference value to set. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---SetRefCon
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +---                                
|   |   +---refCon
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ debugging -------------------------------
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---do not use this function
|   |   +---[ NEWLINE ]
|   +---        
|   +---CFTypeRef
|   +---                        
|   +---(
|   |   +---*
|   |   +---GetDebugProperty
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---void
|   |   +---*
|   |   +---                                        
|   |   +---interface
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inPropertyName
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFTypeID
|   |   +---*
|   |   +---                                
|   |   +---outPropertyType
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function PrintDCLProgram
|   |   +---
@abstract Walk a DCL program linked list and print its contents
|   |   +---
@param self The device interface to use.
|   |   +---
@param inProgram A pointer to the first DCL of the program to print
|   |   +---
@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
|   |   +---
report an error if this number does not match the number of DCLs found
|   |   +---
in the program. 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                 
|   +---(
|   |   +---*
|   |   +---PrintDCLProgram
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---        
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---DCLCommandPtr
|   |   +---                
|   |   +---inProgram
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---UInt32
|   |   +---                                         
|   |   +---inLength
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---NOTE: the following methods available only in interface v3 and later
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +------ v3 functions ----------
|   |   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function CreateInitialUnitsPseudoAddressSpace
|   |   +---
@abstract Creates a pseudo address space in initial units space.
|   |   +---
@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
|   |   +---
will create a pseudo address space (software-backed) on the local machine.
|   |   +---[ NEWLINE ]
|   |   +---
Availablilty: IOFireWireDeviceInterface_v3,  and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
|   |   +---
in initial units space.
|   |   +---
@param inSize The size in bytes of this address space
|   |   +---
@param inRefCon A user specified reference value. This will be passed to all callback functions.
|   |   +---
@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
|   |   +---
the client and/or put in the backing store. A larger queue can help eliminate dropped packets
|   |   +---
when receiving large bursts of data. When a packet is received which can not fit into the queue, 
|   |   +---
the packet dropped callback will be called. 
|   |   +---
@param inBackingStore An optional block of allocated memory representing the contents of the address space.
|   |   +---
@param inFlags A UInt32 with bits set corresponding to the flags that should be set
|   |   +---
for this address space.
|   |   +---
<ul>
|   |   +---
<li>kFWAddressSpaceNoFlags -- All flags off</li>
|   |   +---
<li>kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
|   |   +---
Setting this flag also disables compare/swap transactions on this address space.</li>
|   |   +---
<li>kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
|   |   +---
of the backing store. The user process will not be notified of writes.</li>
|   |   +---
<li>kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
|   |   +---
using the contents of the backing store. The user process will not be notified of reads.</li>
|   |   +---
<li>kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
|   |   +---
to the backing store at the same time the user process is notified of a write. Clients
|   |   +---
will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.</li>
|   |   +---
<li>kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
|   |   +---
already has an address space at the requested address. All clients will be notified of writes to
|   |   +---
covered addresses.</li>
|   |   +---
</ul>
|   |   +---
@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
|   |   +---
type of interface to be returned for the created pseudo address space object.
|   |   +---
@result An IOFireWireLibPseudoAddressSpaceRef. Returns 0 upon failure 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibPseudoAddressSpaceRef
|   +---        
|   +---(
|   |   +---*
|   |   +---CreateInitialUnitsPseudoAddressSpace
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---          
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                                
|   |   +---inAddressLo
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inRefCon
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inQueueBufferSize
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---void
|   |   +---*
|   |   +---                                                  
|   |   +---inBackingStore
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---UInt32
|   |   +---                                          
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                
|   |   +---REFIID
|   |   +---                                          
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function AddCallbackDispatcherToRunLoopForMode
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
|   |   +---
@discussion Installs the proper run loop event source to allow callbacks to function. This method
|   |   +---
must be called before callback notifications for this interface or any interfaces
|   |   +---
created using this interface can function. With this function, you can additionally specify
|   |   +---
for which run loop modes this source should be added.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop The run loop on which to install the event source
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                         
|   +---(
|   |   +---*
|   |   +---AddCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                         
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                                
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function AddIsochCallbackDispatcherToRunLoop
|   |   +---
@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
|   |   +---
@discussion This function adds an event source for the isochronous callback dispatcher
|   |   +---
to the specified CFRunLoop. Isochronous related callbacks will not be called unless
|   |   +---
this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
|   |   +---
The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
|   |   +---
should be added
|   |   +---
@param inRunLoopMode The run loop mode(s) for which to install the event source
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---AddIsochCallbackDispatcherToRunLoopForMode
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFRunLoopRef
|   |   +---                        
|   |   +---inRunLoop
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---CFStringRef
|   |   +---                         
|   |   +---inRunLoopMode
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---
@abstract Removes an IOFireWireLib-added run loop event source.
|   |   +---
@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
|   |   +---
the run loop event source that was added to the specified run loop preventing any 
|   |   +---
future callbacks from being called.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v3, and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.                        
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---void
|   +---                                
|   +---(
|   |   +---*
|   |   +---RemoveIsochCallbackDispatcherFromRunLoop
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function Seize
|   |   +---
@abstract Seize control of device/unit
|   |   +---
@discussion Allows a user space client to seize control of an in-kernel service even if
|   |   +---
that service has been Opened() by another client or in-kernel driver. This function should be
|   |   +---
used with care. Admin rights are required to use this function.
|   |   +---[ NEWLINE ]
|   |   +---
Calling this method makes it appear to all other drivers that the device has been unplugged.
|   |   +---
Open() should be called after this method has been invoked.
|   |   +---[ NEWLINE ]
|   |   +---
When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
|   |   +---
normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
|   |   +---
@param self The device interface to use.
|   |   +---
@param reserved Reserved for future use. Set to NULL.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---Seize
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOOptionBits
|   |   +---                        
|   |   +---inFlags
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function FireLog
|   |   +---
@abstract Logs string to in-kernel debug buffer
|   |   +---
@param self The device interface to use.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +---                        
|   +---(
|   |   +---*
|   |   +---FireLog
|   |   +---)
|   +---(
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---IOFireWireLibDeviceRef
|   |   +---         
|   |   +---self
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---const
|   |   +--- 
|   |   +---char
|   |   +---*
|   |   +---                                
|   |   +---format
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                
|   |   +---.
|   |   +---.
|   |   +---.
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusCycleTime
|   |   +---
@abstract Get bus and cycle time.
|   |   +---
@param self The device interface to use.
|   |   +---
@param outBusTime A pointer to a UInt32 to hold the bus time
|   |   +---
@param outCycleTime A pointer to a UInt32 to hold the cycle time
|   |   +---
@result An IOReturn error code.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusCycleTime
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +---  
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outBusTime
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +---  
|   |   +---outCycleTime
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +--- 
|   |   +---v4
|   |   +---[ NEWLINE ]
|   +---        
|   +---//
|   |   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CreateCompareSwapCommand64
|   |   +---
@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported. Setting the callback value to nil defaults to synchronous execution.
|   |   +---
@param addr Command target address
|   |   +---
@param cmpVal 64-bit value expected at target address
|   |   +---
@param newVal 64-bit value to be set at target address
|   |   +---
@param callback Command completion callback.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.        
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOFireWireLibCommandRef
|   +--- 
|   +---(
|   |   +---*
|   |   +---CreateCompareSwapCommand64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---UInt64
|   |   +--- 
|   |   +---cmpVal
|   |   +---,
|   |   +--- 
|   |   +---UInt64
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---IOFireWireLibCommandCallback
|   |   +--- 
|   |   +---callback
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---,
|   |   +--- 
|   |   +---void
|   |   +---*
|   |   +--- 
|   |   +---inRefCon
|   |   +---,
|   |   +--- 
|   |   +---REFIID
|   |   +--- 
|   |   +---iid
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---
@function CompareSwap64
|   |   +---
@abstract Perform synchronous lock operation
|   |   +---
@param self The device interface to use.
|   |   +---
@param device The service (representing an attached FireWire device) to which to write.
|   |   +---
For 48-bit, device relative addressing, pass the service used to create the device interface. This
|   |   +---
can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
|   |   +---
unsupported.
|   |   +---[ NEWLINE ]
|   |   +---
If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
|   |   +---
successful.
|   |   +---
@param addr Command target address
|   |   +---
@param expectedVal Pointer to quadlets expected at target.
|   |   +---
@param newVal Pointer to quadlets to atomically set at target if compare is successful.
|   |   +---
@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
|   |   +---
@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
|   |   +---
@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
|   |   +---
specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
|   |   +---
obtained by calling GetGenerationAndNodeID()
|   |   +---
@param generation The FireWire bus generation during which the command should be executed. Ignored
|   |   +---
if failOnReset is false.
|   |   +---
@result An IOReturn error code
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---CompareSwap64
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---io_object_t
|   |   +--- 
|   |   +---device
|   |   +---,
|   |   +--- 
|   |   +---const
|   |   +--- 
|   |   +---FWAddress
|   |   +---*
|   |   +--- 
|   |   +---addr
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---expectedVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---newVal
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---oldVal
|   |   +---,
|   |   +--- 
|   |   +---IOByteCount
|   |   +--- 
|   |   +---size
|   |   +---,
|   |   +---[ NEWLINE ]
|   |   +---                                                                                
|   |   +---Boolean
|   |   +--- 
|   |   +---failOnReset
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---generation
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetBusGeneration
|   |   +---
@abstract Get bus generation number.
|   |   +---
@discussion The bus generation number stays constant between bus resets and can be
|   |   +---
used in combination with a FireWire node ID to uniquely identify nodes on the bus.
|   |   +---
Pass the generation number to functions that take or return FireWire node IDs.
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param outGeneration A pointer to a UInt32 to hold the bus generation  number
|   |   +---
@result Returns kIOReturnSuccess if a valid bus generation has been returned in 'outGeneration'.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetBusGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +---*
|   |   +--- 
|   |   +---outGeneration
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetLocalNodeIDWithGeneration
|   |   +---
@abstract Get node ID of local machine.
|   |   +---
@discussion Use this function instead of GetLocalNodeID().
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetLocalNodeIDWithGeneration
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outLocalNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetRemoteNodeID
|   |   +---
@abstract Get node ID of device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetRemoteNodeID
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +---*
|   |   +--- 
|   |   +---outRemoteNodeID
|   |   +--- 
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedToNode
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedToNode
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +---        @function GetSpeedBetweenNodes
|   |   +---
@abstract Get maximum transfer speed to device to which this interface is attached.
|   |   +---
@discussion
|   |   +---[ NEWLINE ]
|   |   +---
Availability: IOFireWireDeviceInterface_v4 and newer
|   |   +---[ NEWLINE ]
|   |   +---
@param self The device interface to use.
|   |   +---
@param checkGeneration A bus generation number obtained from GetBusGeneration()
|   |   +---
@param srcNodeID A FireWire node ID.
|   |   +---
@param destNodeID A FireWire node ID.
|   |   +---
@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
|   |   +---
@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns
|   |   +---
kIOFireWireBusReset if 'checkGeneration' does not match the current bus generation number.
|   |   +---*/
|   +---[ NEWLINE ]
|   +---        
|   +---IOReturn
|   +--- 
|   +---(
|   |   +---*
|   |   +---GetSpeedBetweenNodes
|   |   +---)
|   +---(
|   |   +--- 
|   |   +---IOFireWireLibDeviceRef
|   |   +--- 
|   |   +---self
|   |   +---,
|   |   +--- 
|   |   +---UInt32
|   |   +--- 
|   |   +---checkGeneration
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---srcNodeID
|   |   +---,
|   |   +--- 
|   |   +---UInt16
|   |   +--- 
|   |   +---destNodeID
|   |   +---,
|   |   +---  
|   |   +---IOFWSpeed
|   |   +---*
|   |   +--- 
|   |   +---outSpeed
|   |   +---)
|   +--- 
|   +---;
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---}
+--- 
+---IOFireWireDeviceInterface
+---,
+--- 
+---IOFireWireUnitInterface
+---,
+--- 
+---IOFireWireNubInterface
+--- 
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireDeviceInterface_t //test_ref/c/tdef/IOFireWireDeviceInterface_t //test_ref/c/tag/IOFireWireDeviceInterface_t //test_ref/c/struct/IOFireWireDeviceInterface_t //test_ref/c/intf/IOFireWireDeviceInterface_t //test_ref/doc/anysymbol/IOFireWireDeviceInterface_t" machineGenerated="true" --><span class="type">IOFireWireDeviceInterface_t</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS //test_ref/c/clconst/IUNKNOWN_C_GUTS " machineGenerated="true" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->;  
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/version //test_ref/c/data/version //test_ref/c/clconst/version " machineGenerated="true" --><span class="var">version</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/revision //test_ref/c/data/revision //test_ref/c/clconst/revision " machineGenerated="true" --><span class="var">revision</span><!-- /a -->; <span class="comment">// version/revision</span>  
	    <span class="comment">// --- maintenance methods -------------</span> 
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function InterfaceIsInited
	@abstract Determine whether interface has been properly inited.
	@param self The device interface to use.
	@result Returns true if interface is inited and false if is it not.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/InterfaceIsInited //test_ref/c/clm/InterfaceIsInited //test_ref/c/intfcm/InterfaceIsInited //test_ref/c/intfm/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function GetDevice
	@abstract Get the IOKit service to which this interface is connected.
	@param self The device interface to use.
	@result Returns an io_object_t corresponding to the device the interface is
	using</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDevice //test_ref/c/clm/GetDevice //test_ref/c/intfcm/GetDevice //test_ref/c/intfm/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_2</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Open
	@abstract Open the connected device for exclusive access. When you have
	the device open using this method, all accesses by other clients of 
	this device will be denied until Close() is called.
	@param self The device interface to use.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Open //test_ref/c/clm/Open //test_ref/c/intfcm/Open //test_ref/c/intfm/Open //test_ref/c/func/Open //test_ref/c/ftmplt/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function OpenWithSessionRef
	@abstract An open function which allows this interface to have access
	to the device when already opened. The service which has already opened
	the device must be able to provide an IOFireWireSessionRef.
	@param self The device interface to use
	@param IOFireWireSessionRef The sessionRef returned from the client who has
	the device open
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/OpenWithSessionRef //test_ref/c/clm/OpenWithSessionRef //test_ref/c/intfcm/OpenWithSessionRef //test_ref/c/intfm/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Close
	@abstract Release exclusive access to the device
	@param self The device interface to use</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Close //test_ref/c/clm/Close //test_ref/c/intfcm/Close //test_ref/c/intfm/Close //test_ref/c/func/Close //test_ref/c/ftmplt/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">// --- notification --------------------</span> 
	    <span class="comment">/*!
	@function NotificationIsOn
	@abstract Determine whether callback notifications for this interface are currently active
	@param self The device interface to use
	@result A Boolean value where true indicates notifications are active</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/NotificationIsOn //test_ref/c/clm/NotificationIsOn //test_ref/c/intfcm/NotificationIsOn //test_ref/c/intfm/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoop
	@abstract Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function.
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoop //test_ref/c/clm/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!
	@function RemoveCallbackDispatcherFromRunLoop
	@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOnNotification
	@abstract Activates any callbacks specified for this device interface. Only works after 
	AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
	@param self The device interface to use.
	@result A Boolean value. Returns true on success.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOnNotification //test_ref/c/clm/TurnOnNotification //test_ref/c/intfcm/TurnOnNotification //test_ref/c/intfm/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOffNotification
	@abstract Deactivates and callbacks specified for this device interface. Reverses the 
	effects of TurnOnNotification()
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOffNotification //test_ref/c/clm/TurnOffNotification //test_ref/c/intfcm/TurnOffNotification //test_ref/c/intfm/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function SetBusResetHandler
	@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
	can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
	resets might occur before bus reconfiguration has completed.)
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetHandler //test_ref/c/clm/SetBusResetHandler //test_ref/c/intfcm/SetBusResetHandler //test_ref/c/intfm/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
	    <span class="comment">/*!
	@function SetBusResetDoneHandler
	@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
	of the bus has been completed. This function will only be called once per bus reset.
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetDoneHandler //test_ref/c/clm/SetBusResetDoneHandler //test_ref/c/intfcm/SetBusResetDoneHandler //test_ref/c/intfm/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>); 
	    <span class="comment">/*!
	@function ClientCommandIsComplete
	@abstract This function must be called from callback routines once they have completed processing
	a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
	parameter.
	@param commandID The command ID passed to the callback function when it was called
	@param status An IOReturn value indicating the completion status of the callback function</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ClientCommandIsComplete //test_ref/c/clm/ClientCommandIsComplete //test_ref/c/intfcm/ClientCommandIsComplete //test_ref/c/intfm/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
	    <span class="comment">// --- read/write/lock operations -------</span> 
	    <span class="comment">/*!
	@function Read
	@abstract Perform synchronous block read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Read //test_ref/c/clm/Read //test_ref/c/intfcm/Read //test_ref/c/intfm/Read //test_ref/c/func/Read //test_ref/c/ftmplt/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function ReadQuadlet
	@abstract Perform synchronous quadlet read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param value A pointer to where to data should be stored
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ReadQuadlet //test_ref/c/clm/ReadQuadlet //test_ref/c/intfcm/ReadQuadlet //test_ref/c/intfm/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">val</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>); 
	    <span class="comment">/*!
	@function Write
	@abstract Perform synchronous block write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Write //test_ref/c/clm/Write //test_ref/c/intfcm/Write //test_ref/c/intfm/Write //test_ref/c/func/Write //test_ref/c/ftmplt/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function WriteQuadlet
	@abstract Perform synchronous quadlet write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param val The value to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/WriteQuadlet //test_ref/c/clm/WriteQuadlet //test_ref/c/intfcm/WriteQuadlet //test_ref/c/intfm/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function CompareSwap
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param cmpVal The check/compare value
	@param newVal Value to set
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap //test_ref/c/clm/CompareSwap //test_ref/c/intfcm/CompareSwap //test_ref/c/intfm/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">// --- FireWire command object methods ---------</span>  
	    <span class="comment">/*!
	@function CreateReadCommand
	@abstract Create a block read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadCommand //test_ref/c/clm/CreateReadCommand //test_ref/c/intfcm/CreateReadCommand //test_ref/c/intfm/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateReadQuadletCommand
	@abstract Create a quadlet read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets where results should be stored
	@param numQuads Number of quadlets to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@param </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadQuadletCommand //test_ref/c/clm/CreateReadQuadletCommand //test_ref/c/intfcm/CreateReadQuadletCommand //test_ref/c/intfm/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateWriteCommand
	@abstract Create a block write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to the buffer containing the data to be written
	@param size Number of bytes to write
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteCommand //test_ref/c/clm/CreateWriteCommand //test_ref/c/intfcm/CreateWriteCommand //test_ref/c/intfm/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateWriteQuadletCommand
	@abstract Create a quadlet write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets containing quadlets to be written
	@param numQuads Number of quadlets to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteQuadletCommand //test_ref/c/clm/CreateWriteQuadletCommand //test_ref/c/intfcm/CreateWriteQuadletCommand //test_ref/c/intfm/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand
	@abstract Create a quadlet compare/swap command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 32-bit value expected at target address
	@param newVal 32-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand //test_ref/c/clm/CreateCompareSwapCommand //test_ref/c/intfcm/CreateCompareSwapCommand //test_ref/c/intfm/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- other methods ---------------------------</span> 
	    <span class="comment">/*!        @function BusReset
	@abstract Cause a bus reset</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/BusReset //test_ref/c/clm/BusReset //test_ref/c/intfcm/BusReset //test_ref/c/intfm/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!        @function GetCycleTime
	@abstract Get bus cycle time.
	@param self The device interface to use.
	@param outCycleTime A pointer to a UInt32 to hold the result</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetCycleTime //test_ref/c/clm/GetCycleTime //test_ref/c/intfcm/GetCycleTime //test_ref/c/intfm/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">/*!        @function GetGenerationAndNodeID
	@abstract (Obsolete) Get bus generation and remote device node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
	interface v4.
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the generation result
	@param outNodeID A pointer to a UInt16 to hold the remote device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetGenerationAndNodeID //test_ref/c/clm/GetGenerationAndNodeID //test_ref/c/intfcm/GetGenerationAndNodeID //test_ref/c/intfm/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outNodeID</span>);  
	    <span class="comment">/*!        @function GetLocalNodeID
	@abstract (Obsolete) Get local node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
	interface v4.
	@param self The device interface to use.
	@param outNodeID A pointer to a UInt16 to hold the local device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeID //test_ref/c/clm/GetLocalNodeID //test_ref/c/intfcm/GetLocalNodeID //test_ref/c/intfm/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span>);  
	    <span class="comment">/*!        @function GetResetTime
	@abstract Get time since last bus reset.
	@param self The device interface to use.
	@param outResetTime A pointer to an AbsolutTime to hold the result.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetResetTime //test_ref/c/clm/GetResetTime //test_ref/c/intfcm/GetResetTime //test_ref/c/intfm/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --><span class="type">*</span> <span class="param">outResetTime</span>);  
	    <span class="comment">// --- unit directory support ------------------</span> 
	    <span class="comment">/*!        @function CreateLocalUnitDirectory
	@abstract Creates a local unit directory object and returns an interface to it. An
	instance of a unit directory object corresponds to an instance of a unit 
	directory in the local machine's configuration ROM.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created unit directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalUnitDirectory //test_ref/c/clm/CreateLocalUnitDirectory //test_ref/c/intfcm/CreateLocalUnitDirectory //test_ref/c/intfm/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- config directory support ----------------</span> 
	    <span class="comment">/*!        @function GetConfigDirectory
	@abstract Creates a config directory object and returns an interface to it. The
	created config directory object represents the config directory in the remote
	device or unit to which the creating device interface is attached.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetConfigDirectory //test_ref/c/clm/GetConfigDirectory //test_ref/c/intfcm/GetConfigDirectory //test_ref/c/intfm/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateConfigDirectoryWithIOObject
	@abstract This function can be used to create a config directory object and a
	corresponding interface from an opaque IOObject reference. Some configuration
	directory interface methods may return an io_object_t instead of an
	IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
	IOFireWireLibConfigDirectoryRef from an io_object_t.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateConfigDirectoryWithIOObject //test_ref/c/clm/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- address space support -------------------</span> 
	    <span class="comment">/*!        @function CreatePseudoAddressSpace
	@abstract Creates a pseudo address space object and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine. 
	@param self The device interface to use.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePseudoAddressSpace //test_ref/c/clm/CreatePseudoAddressSpace //test_ref/c/intfcm/CreatePseudoAddressSpace //test_ref/c/intfm/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreatePhysicalAddressSpace
	@abstract Creates a physical address space object and returns an interface to it. This
	will create a physical address space on the local machine. 
	@param self The device interface to use.
	@param inBackingStore An block of allocated memory representing the contents of the address space.
	@param inSize The size in bytes of this address space
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space. For future use -- always pass 0.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created physical address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePhysicalAddressSpace //test_ref/c/clm/CreatePhysicalAddressSpace //test_ref/c/intfcm/CreatePhysicalAddressSpace //test_ref/c/intfm/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireBugMsg //test_ref/c/clm/FireBugMsg //test_ref/c/intfcm/FireBugMsg //test_ref/c/intfm/FireBugMsg //test_ref/c/func/FireBugMsg //test_ref/c/ftmplt/FireBugMsg //test_ref/c/defn/FireBugMsg //test_ref/c/macro/FireBugMsg //test_ref/doc/anysymbol/FireBugMsg" machineGenerated="true" --><span class="function">FireBugMsg</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">msg</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v2 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- eye-sock-run-U.S. -----------------------</span> 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not function
	before this function is called. This functions is similar to 
	AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
	from that passed to AddCallbackDispatcherToRunLoop. 
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!        @function CreateRemoteIsochPort
	@abstract Creates a remote isochronous port object and returns an interface to it. A
	remote isochronous port object is an abstract entity used to represent a remote
	talker or listener device on an isochronous channel. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created remote isochronous port object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateRemoteIsochPort //test_ref/c/clm/CreateRemoteIsochPort //test_ref/c/intfcm/CreateRemoteIsochPort //test_ref/c/intfm/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateLocalIsochPort
	@abstract Creates a local isochronous port object and returns an interface to it. A
	local isochronous port object is an abstract entity used to represent a
	talking or listening endpoint in the local machine. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param inDCLProgram A pointer to the first DCL command struct of the DCL program
	to be compiled and used to send or receive data on this port.
	@param inStartEvent Start event bits
	@param inStartState Start state bits
	@param inStartMask Start mask bits
	@param inDCLProgramRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
	structs or nil to ignore this parameter.
	@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
	Pass 0 for none.
	@param inBufferRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
	to an array of IOVirtualRange structs or nil to ignore this parameter.
	@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
	Pass 0 for none.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalIsochPort //test_ref/c/clm/CreateLocalIsochPort //test_ref/c/intfcm/CreateLocalIsochPort //test_ref/c/intfm/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateIsochChannel
	@abstract Creates an isochronous channel object and returns an interface to it. An
	isochronous channel object is an abstract entity used to represent a
	FireWire isochronous channel. 
	@param self The device interface to use.
	@param doIRM Controls whether the channel automatically performs IRM operations. 
	Pass true if the channel should allocate its channel and bandwidth with
	the IRM. Pass false to ignore the IRM.
	@param packetSize Size in bytes of packets being sent or received with this channel.
	This is automatically translated into a bandwidth allocation appropriate
	for the speed passed in prefSpeed.
	@param prefSpeed The preferred bus speed of this channel.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateIsochChannel //test_ref/c/clm/CreateIsochChannel //test_ref/c/intfcm/CreateIsochChannel //test_ref/c/intfm/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">/*!        @function CreateDCLCommandPool
	@abstract Creates a command pool object and returns an interface to it. The command 
	pool can be used to build DCL programs.
	@param self The device interface to use.
	@param size Starting size of command pool
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateDCLCommandPool //test_ref/c/clm/CreateDCLCommandPool //test_ref/c/intfcm/CreateDCLCommandPool //test_ref/c/intfm/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">// --- refcons ---------------------------------</span> 
	    <span class="comment">/*!        @function GetRefCon
	@abstract Get user reference value set on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span>(<span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/GetRefCon //test_ref/c/data/GetRefCon //test_ref/c/clconst/GetRefCon " machineGenerated="true" --><span class="var">GetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>); 
	    <span class="comment">/*!        @function SetRefCon
	@abstract Set user reference value on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetRefCon //test_ref/c/clm/SetRefCon //test_ref/c/intfcm/SetRefCon //test_ref/c/intfm/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">refCon</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <span class="comment">// do not use this function</span> 
	    <!-- a logicalPath="//test_ref/c/cl/CFTypeRef //test_ref/c/tdef/CFTypeRef //test_ref/c/tag/CFTypeRef //test_ref/c/struct/CFTypeRef //test_ref/c/intf/CFTypeRef //test_ref/doc/anysymbol/CFTypeRef" machineGenerated="true" --><span class="type">CFTypeRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDebugProperty //test_ref/c/clm/GetDebugProperty //test_ref/c/intfcm/GetDebugProperty //test_ref/c/intfm/GetDebugProperty //test_ref/c/func/GetDebugProperty //test_ref/c/ftmplt/GetDebugProperty //test_ref/c/defn/GetDebugProperty //test_ref/c/macro/GetDebugProperty //test_ref/doc/anysymbol/GetDebugProperty" machineGenerated="true" --><span class="function">GetDebugProperty</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">interface</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inPropertyName</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFTypeID //test_ref/c/tdef/CFTypeID //test_ref/c/tag/CFTypeID //test_ref/c/struct/CFTypeID //test_ref/c/intf/CFTypeID //test_ref/doc/anysymbol/CFTypeID" machineGenerated="true" --><span class="type">CFTypeID</span><!-- /a --><span class="type">*</span> <span class="param">outPropertyType</span>);  
	    <span class="comment">/*!        @function PrintDCLProgram
	@abstract Walk a DCL program linked list and print its contents
	@param self The device interface to use.
	@param inProgram A pointer to the first DCL of the program to print
	@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
	report an error if this number does not match the number of DCLs found</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/PrintDCLProgram //test_ref/c/clm/PrintDCLProgram //test_ref/c/intfcm/PrintDCLProgram //test_ref/c/intfm/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v3 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- v3 functions ----------</span> 
	    <span class="comment">/*!        @function CreateInitialUnitsPseudoAddressSpace
	@abstract Creates a pseudo address space in initial units space.
	@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine.
	
	Availablilty: IOFireWireDeviceInterface_v3,  and newer
	
	@param self The device interface to use.
	@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
	in initial units space.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write. Clients
	will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
	already has an address space at the requested address. All clients will be notified of writes to
	covered addresses.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>); 
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoopForMode
	@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
	@discussion Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function. With this function, you can additionally specify
	for which run loop modes this source should be added.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
	@discussion This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not be called unless
	this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
	The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!
	@function RemoveIsochCallbackDispatcherFromRunLoop
	@abstract Removes an IOFireWireLib-added run loop event source.
	@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function Seize
	@abstract Seize control of device/unit
	@discussion Allows a user space client to seize control of an in-kernel service even if
	that service has been Opened() by another client or in-kernel driver. This function should be
	used with care. Admin rights are required to use this function.
	
	Calling this method makes it appear to all other drivers that the device has been unplugged.
	Open() should be called after this method has been invoked.
	
	When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
	normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
	@param self The device interface to use.
	@param reserved Reserved for future use. Set to NULL.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Seize //test_ref/c/clm/Seize //test_ref/c/intfcm/Seize //test_ref/c/intfm/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	        ... );  
	    <span class="comment">/*!
	@function FireLog
	@abstract Logs string to in-kernel debug buffer
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireLog //test_ref/c/clm/FireLog //test_ref/c/intfcm/FireLog //test_ref/c/intfm/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">format</span>, 
	        ... );  
	    <span class="comment">/*!        @function GetBusCycleTime
	@abstract Get bus and cycle time.
	@param self The device interface to use.
	@param outBusTime A pointer to a UInt32 to hold the bus time
	@param outCycleTime A pointer to a UInt32 to hold the cycle time</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusCycleTime //test_ref/c/clm/GetBusCycleTime //test_ref/c/intfcm/GetBusCycleTime //test_ref/c/intfm/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outBusTime</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// v4</span> 
	    <span class="comment">//</span>  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand64
	@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 64-bit value expected at target address
	@param newVal 64-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand64 //test_ref/c/clm/CreateCompareSwapCommand64 //test_ref/c/intfcm/CreateCompareSwapCommand64 //test_ref/c/intfm/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CompareSwap64
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	
	If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
	successful.
	@param addr Command target address
	@param expectedVal Pointer to quadlets expected at target.
	@param newVal Pointer to quadlets to atomically set at target if compare is successful.
	@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
	@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap64 //test_ref/c/clm/CompareSwap64 //test_ref/c/intfcm/CompareSwap64 //test_ref/c/intfm/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">expectedVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">oldVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!        @function GetBusGeneration
	@abstract Get bus generation number.
	@discussion The bus generation number stays constant between bus resets and can be
	used in combination with a FireWire node ID to uniquely identify nodes on the bus.
	Pass the generation number to functions that take or return FireWire node IDs.
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the bus generation  number</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusGeneration //test_ref/c/clm/GetBusGeneration //test_ref/c/intfcm/GetBusGeneration //test_ref/c/intfm/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span> );  
	    <span class="comment">/*!        @function GetLocalNodeIDWithGeneration
	@abstract Get node ID of local machine.
	@discussion Use this function instead of GetLocalNodeID().
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeIDWithGeneration //test_ref/c/clm/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/GetLocalNodeIDWithGeneration //test_ref/c/intfm/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span> );  
	    <span class="comment">/*!        @function GetRemoteNodeID
	@abstract Get node ID of device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetRemoteNodeID //test_ref/c/clm/GetRemoteNodeID //test_ref/c/intfcm/GetRemoteNodeID //test_ref/c/intfm/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outRemoteNodeID</span> );  
	    <span class="comment">/*!        @function GetSpeedToNode
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedToNode //test_ref/c/clm/GetSpeedToNode //test_ref/c/intfcm/GetSpeedToNode //test_ref/c/intfm/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	    <span class="comment">/*!        @function GetSpeedBetweenNodes
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param srcNodeID A FireWire node ID.
	@param destNodeID A FireWire node ID.
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedBetweenNodes //test_ref/c/clm/GetSpeedBetweenNodes //test_ref/c/intfcm/GetSpeedBetweenNodes //test_ref/c/intfm/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	} <!-- a logicalPath="//test_ref/c/econst/IOFireWireDeviceInterface //test_ref/c/data/IOFireWireDeviceInterface //test_ref/c/clconst/IOFireWireDeviceInterface " machineGenerated="true" --><span class="var">IOFireWireDeviceInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireUnitInterface //test_ref/c/data/IOFireWireUnitInterface //test_ref/c/clconst/IOFireWireUnitInterface " machineGenerated="true" --><span class="var">IOFireWireUnitInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireNubInterface //test_ref/c/data/IOFireWireNubInterface //test_ref/c/clconst/IOFireWireNubInterface " machineGenerated="true" --><span class="var">IOFireWireNubInterface</span><!-- /a -->;  
END OF OBJECT


OBJECT: InterfaceIsInited (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/clm/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/intfcm/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/intfm/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/IOFireWireDeviceInterface/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: GetDevice (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetDevice //test_ref/c/clm/IOFireWireDeviceInterface/GetDevice //test_ref/c/intfcm/IOFireWireDeviceInterface/GetDevice //test_ref/c/intfm/IOFireWireDeviceInterface/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: Open (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Open //test_ref/c/clm/IOFireWireDeviceInterface/Open //test_ref/c/intfcm/IOFireWireDeviceInterface/Open //test_ref/c/intfm/IOFireWireDeviceInterface/Open //test_ref/c/func/Open //test_ref/c/ftmplt/IOFireWireDeviceInterface/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: OpenWithSessionRef (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/clm/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/intfcm/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/intfm/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/IOFireWireDeviceInterface/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
END OF OBJECT


OBJECT: Close (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Close //test_ref/c/clm/IOFireWireDeviceInterface/Close //test_ref/c/intfcm/IOFireWireDeviceInterface/Close //test_ref/c/intfm/IOFireWireDeviceInterface/Close //test_ref/c/func/Close //test_ref/c/ftmplt/IOFireWireDeviceInterface/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: NotificationIsOn (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/clm/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/intfcm/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/intfm/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/IOFireWireDeviceInterface/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: AddCallbackDispatcherToRunLoop (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/clm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
END OF OBJECT


OBJECT: RemoveCallbackDispatcherFromRunLoop (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/IOFireWireDeviceInterface/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: TurnOnNotification (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/clm/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/intfcm/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/intfm/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/IOFireWireDeviceInterface/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: TurnOffNotification (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/clm/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/intfcm/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/intfm/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/IOFireWireDeviceInterface/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: SetBusResetHandler (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/clm/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/intfcm/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/intfm/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/IOFireWireDeviceInterface/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
END OF OBJECT


OBJECT: SetBusResetDoneHandler (HeaderDoc::Function)
	<span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/clm/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/intfcm/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/intfm/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/IOFireWireDeviceInterface/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>);  
END OF OBJECT


OBJECT: ClientCommandIsComplete (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/clm/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/intfcm/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/intfm/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/IOFireWireDeviceInterface/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
END OF OBJECT


OBJECT: Read (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Read //test_ref/c/clm/IOFireWireDeviceInterface/Read //test_ref/c/intfcm/IOFireWireDeviceInterface/Read //test_ref/c/intfm/IOFireWireDeviceInterface/Read //test_ref/c/func/Read //test_ref/c/ftmplt/IOFireWireDeviceInterface/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">buf</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">size</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: ReadQuadlet (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/clm/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/intfcm/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/intfm/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/IOFireWireDeviceInterface/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">val</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: Write (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Write //test_ref/c/clm/IOFireWireDeviceInterface/Write //test_ref/c/intfcm/IOFireWireDeviceInterface/Write //test_ref/c/intfm/IOFireWireDeviceInterface/Write //test_ref/c/func/Write //test_ref/c/ftmplt/IOFireWireDeviceInterface/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">buf</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">size</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: WriteQuadlet (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/clm/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/intfcm/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/intfm/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/IOFireWireDeviceInterface/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: CompareSwap (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CompareSwap //test_ref/c/clm/IOFireWireDeviceInterface/CompareSwap //test_ref/c/intfcm/IOFireWireDeviceInterface/CompareSwap //test_ref/c/intfm/IOFireWireDeviceInterface/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/IOFireWireDeviceInterface/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: CreateReadCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">buf</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateReadQuadletCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateWriteCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">buf</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateWriteQuadletCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateCompareSwapCommand (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/clm/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/intfm/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: BusReset (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/BusReset //test_ref/c/clm/IOFireWireDeviceInterface/BusReset //test_ref/c/intfcm/IOFireWireDeviceInterface/BusReset //test_ref/c/intfm/IOFireWireDeviceInterface/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/IOFireWireDeviceInterface/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: GetCycleTime (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/clm/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/intfcm/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/intfm/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outCycleTime</span>);  
END OF OBJECT


OBJECT: GetGenerationAndNodeID (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/clm/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/intfcm/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/intfm/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="type">*</span><span class="param">outNodeID</span>);  
END OF OBJECT


OBJECT: GetLocalNodeID (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/clm/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/intfcm/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/intfm/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="type">*</span><span class="param">outLocalNodeID</span>);  
END OF OBJECT


OBJECT: GetResetTime (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetResetTime //test_ref/c/clm/IOFireWireDeviceInterface/GetResetTime //test_ref/c/intfcm/IOFireWireDeviceInterface/GetResetTime //test_ref/c/intfm/IOFireWireDeviceInterface/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --> <span class="type">*</span><span class="param">outResetTime</span>);  
END OF OBJECT


OBJECT: CreateLocalUnitDirectory (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/clm/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/intfm/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: GetConfigDirectory (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/clm/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/intfcm/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/intfm/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateConfigDirectoryWithIOObject (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/clm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreatePseudoAddressSpace (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/clm/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/intfcm/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/intfm/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inBackingStore</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreatePhysicalAddressSpace (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/clm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/intfcm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/intfm/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inBackingStore</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoop (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
END OF OBJECT


OBJECT: CreateRemoteIsochPort (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/clm/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/intfm/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateLocalIsochPort (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/clm/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/intfm/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CreateIsochChannel (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/clm/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/intfm/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
END OF OBJECT


OBJECT: CreateDCLCommandPool (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/clm/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/intfm/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
END OF OBJECT


OBJECT: GetRefCon (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetRefCon //test_ref/c/clm/IOFireWireDeviceInterface/GetRefCon //test_ref/c/intfcm/IOFireWireDeviceInterface/GetRefCon //test_ref/c/intfm/IOFireWireDeviceInterface/GetRefCon //test_ref/c/func/GetRefCon //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetRefCon //test_ref/c/defn/GetRefCon //test_ref/c/macro/GetRefCon //test_ref/doc/anysymbol/GetRefCon" machineGenerated="true" --><span class="function">GetRefCon</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: SetRefCon (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/SetRefCon //test_ref/c/clm/IOFireWireDeviceInterface/SetRefCon //test_ref/c/intfcm/IOFireWireDeviceInterface/SetRefCon //test_ref/c/intfm/IOFireWireDeviceInterface/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/IOFireWireDeviceInterface/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">refCon</span>);  
END OF OBJECT


OBJECT: PrintDCLProgram (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/clm/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/intfcm/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/intfm/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/IOFireWireDeviceInterface/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
END OF OBJECT


OBJECT: CreateInitialUnitsPseudoAddressSpace (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inBackingStore</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: AddCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> );  
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> );  
END OF OBJECT


OBJECT: AddIsochCallbackDispatcherToRunLoopForMode (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/IOFireWireDeviceInterface/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> );  
END OF OBJECT


OBJECT: RemoveIsochCallbackDispatcherFromRunLoop (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/IOFireWireDeviceInterface/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
END OF OBJECT


OBJECT: Seize (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/Seize //test_ref/c/clm/IOFireWireDeviceInterface/Seize //test_ref/c/intfcm/IOFireWireDeviceInterface/Seize //test_ref/c/intfm/IOFireWireDeviceInterface/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/IOFireWireDeviceInterface/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	    ... );  
END OF OBJECT


OBJECT: FireLog (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/FireLog //test_ref/c/clm/IOFireWireDeviceInterface/FireLog //test_ref/c/intfcm/IOFireWireDeviceInterface/FireLog //test_ref/c/intfm/IOFireWireDeviceInterface/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/IOFireWireDeviceInterface/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --> <span class="type">*</span><span class="param">format</span>, 
	    ... );  
END OF OBJECT


OBJECT: GetBusCycleTime (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/clm/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/intfcm/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/intfm/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outBusTime</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outCycleTime</span>);  
END OF OBJECT


OBJECT: CreateCompareSwapCommand64 (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/clm/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/intfcm/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/intfm/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/IOFireWireDeviceInterface/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span><span class="param">inRefCon</span>,
	    <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
END OF OBJECT


OBJECT: CompareSwap64 (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/clm/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/intfcm/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/intfm/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/IOFireWireDeviceInterface/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span><span class="param">addr</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">expectedVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">newVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">oldVal</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
END OF OBJECT


OBJECT: GetBusGeneration (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/clm/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/intfcm/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/intfm/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="type">*</span><span class="param">outGeneration</span> );  
END OF OBJECT


OBJECT: GetLocalNodeIDWithGeneration (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/clm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/intfm/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="type">*</span><span class="param">outLocalNodeID</span> );  
END OF OBJECT


OBJECT: GetRemoteNodeID (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/clm/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/intfcm/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/intfm/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="type">*</span><span class="param">outRemoteNodeID</span> );  
END OF OBJECT


OBJECT: GetSpeedToNode (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/clm/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/intfcm/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/intfm/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="type">*</span><span class="param">outSpeed</span>);  
END OF OBJECT


OBJECT: GetSpeedBetweenNodes (HeaderDoc::Function)
	<!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> ( <span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/clm/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/intfcm/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/intfm/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/IOFireWireDeviceInterface/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	    <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	    <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="type">*</span><span class="param">outSpeed</span>);  
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireDeviceInterface_t //test_ref/c/tdef/IOFireWireDeviceInterface_t //test_ref/c/tag/IOFireWireDeviceInterface_t //test_ref/c/struct/IOFireWireDeviceInterface_t //test_ref/c/intf/IOFireWireDeviceInterface_t //test_ref/doc/anysymbol/IOFireWireDeviceInterface_t" machineGenerated="true" --><span class="type">IOFireWireDeviceInterface_t</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS //test_ref/c/clconst/IUNKNOWN_C_GUTS " machineGenerated="true" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->;  
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/version //test_ref/c/data/version //test_ref/c/clconst/version " machineGenerated="true" --><span class="var">version</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/revision //test_ref/c/data/revision //test_ref/c/clconst/revision " machineGenerated="true" --><span class="var">revision</span><!-- /a -->; <span class="comment">// version/revision</span>  
	    <span class="comment">// --- maintenance methods -------------</span> 
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function InterfaceIsInited
	@abstract Determine whether interface has been properly inited.
	@param self The device interface to use.
	@result Returns true if interface is inited and false if is it not.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/InterfaceIsInited //test_ref/c/clm/InterfaceIsInited //test_ref/c/intfcm/InterfaceIsInited //test_ref/c/intfm/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function GetDevice
	@abstract Get the IOKit service to which this interface is connected.
	@param self The device interface to use.
	@result Returns an io_object_t corresponding to the device the interface is
	using</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDevice //test_ref/c/clm/GetDevice //test_ref/c/intfcm/GetDevice //test_ref/c/intfm/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_2</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Open
	@abstract Open the connected device for exclusive access. When you have
	the device open using this method, all accesses by other clients of 
	this device will be denied until Close() is called.
	@param self The device interface to use.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Open //test_ref/c/clm/Open //test_ref/c/intfcm/Open //test_ref/c/intfm/Open //test_ref/c/func/Open //test_ref/c/ftmplt/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function OpenWithSessionRef
	@abstract An open function which allows this interface to have access
	to the device when already opened. The service which has already opened
	the device must be able to provide an IOFireWireSessionRef.
	@param self The device interface to use
	@param IOFireWireSessionRef The sessionRef returned from the client who has
	the device open
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/OpenWithSessionRef //test_ref/c/clm/OpenWithSessionRef //test_ref/c/intfcm/OpenWithSessionRef //test_ref/c/intfm/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Close
	@abstract Release exclusive access to the device
	@param self The device interface to use</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Close //test_ref/c/clm/Close //test_ref/c/intfcm/Close //test_ref/c/intfm/Close //test_ref/c/func/Close //test_ref/c/ftmplt/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">// --- notification --------------------</span> 
	    <span class="comment">/*!
	@function NotificationIsOn
	@abstract Determine whether callback notifications for this interface are currently active
	@param self The device interface to use
	@result A Boolean value where true indicates notifications are active</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/NotificationIsOn //test_ref/c/clm/NotificationIsOn //test_ref/c/intfcm/NotificationIsOn //test_ref/c/intfm/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoop
	@abstract Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function.
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoop //test_ref/c/clm/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!
	@function RemoveCallbackDispatcherFromRunLoop
	@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOnNotification
	@abstract Activates any callbacks specified for this device interface. Only works after 
	AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
	@param self The device interface to use.
	@result A Boolean value. Returns true on success.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOnNotification //test_ref/c/clm/TurnOnNotification //test_ref/c/intfcm/TurnOnNotification //test_ref/c/intfm/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOffNotification
	@abstract Deactivates and callbacks specified for this device interface. Reverses the 
	effects of TurnOnNotification()
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOffNotification //test_ref/c/clm/TurnOffNotification //test_ref/c/intfcm/TurnOffNotification //test_ref/c/intfm/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function SetBusResetHandler
	@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
	can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
	resets might occur before bus reconfiguration has completed.)
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetHandler //test_ref/c/clm/SetBusResetHandler //test_ref/c/intfcm/SetBusResetHandler //test_ref/c/intfm/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
	    <span class="comment">/*!
	@function SetBusResetDoneHandler
	@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
	of the bus has been completed. This function will only be called once per bus reset.
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetDoneHandler //test_ref/c/clm/SetBusResetDoneHandler //test_ref/c/intfcm/SetBusResetDoneHandler //test_ref/c/intfm/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>); 
	    <span class="comment">/*!
	@function ClientCommandIsComplete
	@abstract This function must be called from callback routines once they have completed processing
	a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
	parameter.
	@param commandID The command ID passed to the callback function when it was called
	@param status An IOReturn value indicating the completion status of the callback function</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ClientCommandIsComplete //test_ref/c/clm/ClientCommandIsComplete //test_ref/c/intfcm/ClientCommandIsComplete //test_ref/c/intfm/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
	    <span class="comment">// --- read/write/lock operations -------</span> 
	    <span class="comment">/*!
	@function Read
	@abstract Perform synchronous block read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Read //test_ref/c/clm/Read //test_ref/c/intfcm/Read //test_ref/c/intfm/Read //test_ref/c/func/Read //test_ref/c/ftmplt/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function ReadQuadlet
	@abstract Perform synchronous quadlet read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param value A pointer to where to data should be stored
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ReadQuadlet //test_ref/c/clm/ReadQuadlet //test_ref/c/intfcm/ReadQuadlet //test_ref/c/intfm/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">val</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>); 
	    <span class="comment">/*!
	@function Write
	@abstract Perform synchronous block write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Write //test_ref/c/clm/Write //test_ref/c/intfcm/Write //test_ref/c/intfm/Write //test_ref/c/func/Write //test_ref/c/ftmplt/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function WriteQuadlet
	@abstract Perform synchronous quadlet write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param val The value to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/WriteQuadlet //test_ref/c/clm/WriteQuadlet //test_ref/c/intfcm/WriteQuadlet //test_ref/c/intfm/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function CompareSwap
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param cmpVal The check/compare value
	@param newVal Value to set
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap //test_ref/c/clm/CompareSwap //test_ref/c/intfcm/CompareSwap //test_ref/c/intfm/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">// --- FireWire command object methods ---------</span>  
	    <span class="comment">/*!
	@function CreateReadCommand
	@abstract Create a block read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadCommand //test_ref/c/clm/CreateReadCommand //test_ref/c/intfcm/CreateReadCommand //test_ref/c/intfm/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateReadQuadletCommand
	@abstract Create a quadlet read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets where results should be stored
	@param numQuads Number of quadlets to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@param </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadQuadletCommand //test_ref/c/clm/CreateReadQuadletCommand //test_ref/c/intfcm/CreateReadQuadletCommand //test_ref/c/intfm/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateWriteCommand
	@abstract Create a block write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to the buffer containing the data to be written
	@param size Number of bytes to write
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteCommand //test_ref/c/clm/CreateWriteCommand //test_ref/c/intfcm/CreateWriteCommand //test_ref/c/intfm/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateWriteQuadletCommand
	@abstract Create a quadlet write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets containing quadlets to be written
	@param numQuads Number of quadlets to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteQuadletCommand //test_ref/c/clm/CreateWriteQuadletCommand //test_ref/c/intfcm/CreateWriteQuadletCommand //test_ref/c/intfm/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand
	@abstract Create a quadlet compare/swap command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 32-bit value expected at target address
	@param newVal 32-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand //test_ref/c/clm/CreateCompareSwapCommand //test_ref/c/intfcm/CreateCompareSwapCommand //test_ref/c/intfm/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- other methods ---------------------------</span> 
	    <span class="comment">/*!        @function BusReset
	@abstract Cause a bus reset</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/BusReset //test_ref/c/clm/BusReset //test_ref/c/intfcm/BusReset //test_ref/c/intfm/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!        @function GetCycleTime
	@abstract Get bus cycle time.
	@param self The device interface to use.
	@param outCycleTime A pointer to a UInt32 to hold the result</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetCycleTime //test_ref/c/clm/GetCycleTime //test_ref/c/intfcm/GetCycleTime //test_ref/c/intfm/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">/*!        @function GetGenerationAndNodeID
	@abstract (Obsolete) Get bus generation and remote device node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
	interface v4.
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the generation result
	@param outNodeID A pointer to a UInt16 to hold the remote device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetGenerationAndNodeID //test_ref/c/clm/GetGenerationAndNodeID //test_ref/c/intfcm/GetGenerationAndNodeID //test_ref/c/intfm/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outNodeID</span>);  
	    <span class="comment">/*!        @function GetLocalNodeID
	@abstract (Obsolete) Get local node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
	interface v4.
	@param self The device interface to use.
	@param outNodeID A pointer to a UInt16 to hold the local device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeID //test_ref/c/clm/GetLocalNodeID //test_ref/c/intfcm/GetLocalNodeID //test_ref/c/intfm/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span>);  
	    <span class="comment">/*!        @function GetResetTime
	@abstract Get time since last bus reset.
	@param self The device interface to use.
	@param outResetTime A pointer to an AbsolutTime to hold the result.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetResetTime //test_ref/c/clm/GetResetTime //test_ref/c/intfcm/GetResetTime //test_ref/c/intfm/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --><span class="type">*</span> <span class="param">outResetTime</span>);  
	    <span class="comment">// --- unit directory support ------------------</span> 
	    <span class="comment">/*!        @function CreateLocalUnitDirectory
	@abstract Creates a local unit directory object and returns an interface to it. An
	instance of a unit directory object corresponds to an instance of a unit 
	directory in the local machine's configuration ROM.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created unit directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalUnitDirectory //test_ref/c/clm/CreateLocalUnitDirectory //test_ref/c/intfcm/CreateLocalUnitDirectory //test_ref/c/intfm/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- config directory support ----------------</span> 
	    <span class="comment">/*!        @function GetConfigDirectory
	@abstract Creates a config directory object and returns an interface to it. The
	created config directory object represents the config directory in the remote
	device or unit to which the creating device interface is attached.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetConfigDirectory //test_ref/c/clm/GetConfigDirectory //test_ref/c/intfcm/GetConfigDirectory //test_ref/c/intfm/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateConfigDirectoryWithIOObject
	@abstract This function can be used to create a config directory object and a
	corresponding interface from an opaque IOObject reference. Some configuration
	directory interface methods may return an io_object_t instead of an
	IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
	IOFireWireLibConfigDirectoryRef from an io_object_t.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateConfigDirectoryWithIOObject //test_ref/c/clm/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- address space support -------------------</span> 
	    <span class="comment">/*!        @function CreatePseudoAddressSpace
	@abstract Creates a pseudo address space object and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine. 
	@param self The device interface to use.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePseudoAddressSpace //test_ref/c/clm/CreatePseudoAddressSpace //test_ref/c/intfcm/CreatePseudoAddressSpace //test_ref/c/intfm/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreatePhysicalAddressSpace
	@abstract Creates a physical address space object and returns an interface to it. This
	will create a physical address space on the local machine. 
	@param self The device interface to use.
	@param inBackingStore An block of allocated memory representing the contents of the address space.
	@param inSize The size in bytes of this address space
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space. For future use -- always pass 0.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created physical address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePhysicalAddressSpace //test_ref/c/clm/CreatePhysicalAddressSpace //test_ref/c/intfcm/CreatePhysicalAddressSpace //test_ref/c/intfm/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireBugMsg //test_ref/c/clm/FireBugMsg //test_ref/c/intfcm/FireBugMsg //test_ref/c/intfm/FireBugMsg //test_ref/c/func/FireBugMsg //test_ref/c/ftmplt/FireBugMsg //test_ref/c/defn/FireBugMsg //test_ref/c/macro/FireBugMsg //test_ref/doc/anysymbol/FireBugMsg" machineGenerated="true" --><span class="function">FireBugMsg</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">msg</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v2 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- eye-sock-run-U.S. -----------------------</span> 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not function
	before this function is called. This functions is similar to 
	AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
	from that passed to AddCallbackDispatcherToRunLoop. 
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!        @function CreateRemoteIsochPort
	@abstract Creates a remote isochronous port object and returns an interface to it. A
	remote isochronous port object is an abstract entity used to represent a remote
	talker or listener device on an isochronous channel. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created remote isochronous port object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateRemoteIsochPort //test_ref/c/clm/CreateRemoteIsochPort //test_ref/c/intfcm/CreateRemoteIsochPort //test_ref/c/intfm/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateLocalIsochPort
	@abstract Creates a local isochronous port object and returns an interface to it. A
	local isochronous port object is an abstract entity used to represent a
	talking or listening endpoint in the local machine. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param inDCLProgram A pointer to the first DCL command struct of the DCL program
	to be compiled and used to send or receive data on this port.
	@param inStartEvent Start event bits
	@param inStartState Start state bits
	@param inStartMask Start mask bits
	@param inDCLProgramRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
	structs or nil to ignore this parameter.
	@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
	Pass 0 for none.
	@param inBufferRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
	to an array of IOVirtualRange structs or nil to ignore this parameter.
	@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
	Pass 0 for none.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalIsochPort //test_ref/c/clm/CreateLocalIsochPort //test_ref/c/intfcm/CreateLocalIsochPort //test_ref/c/intfm/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateIsochChannel
	@abstract Creates an isochronous channel object and returns an interface to it. An
	isochronous channel object is an abstract entity used to represent a
	FireWire isochronous channel. 
	@param self The device interface to use.
	@param doIRM Controls whether the channel automatically performs IRM operations. 
	Pass true if the channel should allocate its channel and bandwidth with
	the IRM. Pass false to ignore the IRM.
	@param packetSize Size in bytes of packets being sent or received with this channel.
	This is automatically translated into a bandwidth allocation appropriate
	for the speed passed in prefSpeed.
	@param prefSpeed The preferred bus speed of this channel.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateIsochChannel //test_ref/c/clm/CreateIsochChannel //test_ref/c/intfcm/CreateIsochChannel //test_ref/c/intfm/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">/*!        @function CreateDCLCommandPool
	@abstract Creates a command pool object and returns an interface to it. The command 
	pool can be used to build DCL programs.
	@param self The device interface to use.
	@param size Starting size of command pool
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateDCLCommandPool //test_ref/c/clm/CreateDCLCommandPool //test_ref/c/intfcm/CreateDCLCommandPool //test_ref/c/intfm/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">// --- refcons ---------------------------------</span> 
	    <span class="comment">/*!        @function GetRefCon
	@abstract Get user reference value set on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span>(<span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/GetRefCon //test_ref/c/data/GetRefCon //test_ref/c/clconst/GetRefCon " machineGenerated="true" --><span class="var">GetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>); 
	    <span class="comment">/*!        @function SetRefCon
	@abstract Set user reference value on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetRefCon //test_ref/c/clm/SetRefCon //test_ref/c/intfcm/SetRefCon //test_ref/c/intfm/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">refCon</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <span class="comment">// do not use this function</span> 
	    <!-- a logicalPath="//test_ref/c/cl/CFTypeRef //test_ref/c/tdef/CFTypeRef //test_ref/c/tag/CFTypeRef //test_ref/c/struct/CFTypeRef //test_ref/c/intf/CFTypeRef //test_ref/doc/anysymbol/CFTypeRef" machineGenerated="true" --><span class="type">CFTypeRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDebugProperty //test_ref/c/clm/GetDebugProperty //test_ref/c/intfcm/GetDebugProperty //test_ref/c/intfm/GetDebugProperty //test_ref/c/func/GetDebugProperty //test_ref/c/ftmplt/GetDebugProperty //test_ref/c/defn/GetDebugProperty //test_ref/c/macro/GetDebugProperty //test_ref/doc/anysymbol/GetDebugProperty" machineGenerated="true" --><span class="function">GetDebugProperty</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">interface</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inPropertyName</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFTypeID //test_ref/c/tdef/CFTypeID //test_ref/c/tag/CFTypeID //test_ref/c/struct/CFTypeID //test_ref/c/intf/CFTypeID //test_ref/doc/anysymbol/CFTypeID" machineGenerated="true" --><span class="type">CFTypeID</span><!-- /a --><span class="type">*</span> <span class="param">outPropertyType</span>);  
	    <span class="comment">/*!        @function PrintDCLProgram
	@abstract Walk a DCL program linked list and print its contents
	@param self The device interface to use.
	@param inProgram A pointer to the first DCL of the program to print
	@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
	report an error if this number does not match the number of DCLs found</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/PrintDCLProgram //test_ref/c/clm/PrintDCLProgram //test_ref/c/intfcm/PrintDCLProgram //test_ref/c/intfm/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v3 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- v3 functions ----------</span> 
	    <span class="comment">/*!        @function CreateInitialUnitsPseudoAddressSpace
	@abstract Creates a pseudo address space in initial units space.
	@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine.
	
	Availablilty: IOFireWireDeviceInterface_v3,  and newer
	
	@param self The device interface to use.
	@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
	in initial units space.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write. Clients
	will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
	already has an address space at the requested address. All clients will be notified of writes to
	covered addresses.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>); 
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoopForMode
	@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
	@discussion Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function. With this function, you can additionally specify
	for which run loop modes this source should be added.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
	@discussion This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not be called unless
	this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
	The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!
	@function RemoveIsochCallbackDispatcherFromRunLoop
	@abstract Removes an IOFireWireLib-added run loop event source.
	@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function Seize
	@abstract Seize control of device/unit
	@discussion Allows a user space client to seize control of an in-kernel service even if
	that service has been Opened() by another client or in-kernel driver. This function should be
	used with care. Admin rights are required to use this function.
	
	Calling this method makes it appear to all other drivers that the device has been unplugged.
	Open() should be called after this method has been invoked.
	
	When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
	normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
	@param self The device interface to use.
	@param reserved Reserved for future use. Set to NULL.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Seize //test_ref/c/clm/Seize //test_ref/c/intfcm/Seize //test_ref/c/intfm/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	        ... );  
	    <span class="comment">/*!
	@function FireLog
	@abstract Logs string to in-kernel debug buffer
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireLog //test_ref/c/clm/FireLog //test_ref/c/intfcm/FireLog //test_ref/c/intfm/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">format</span>, 
	        ... );  
	    <span class="comment">/*!        @function GetBusCycleTime
	@abstract Get bus and cycle time.
	@param self The device interface to use.
	@param outBusTime A pointer to a UInt32 to hold the bus time
	@param outCycleTime A pointer to a UInt32 to hold the cycle time</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusCycleTime //test_ref/c/clm/GetBusCycleTime //test_ref/c/intfcm/GetBusCycleTime //test_ref/c/intfm/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outBusTime</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// v4</span> 
	    <span class="comment">//</span>  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand64
	@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 64-bit value expected at target address
	@param newVal 64-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand64 //test_ref/c/clm/CreateCompareSwapCommand64 //test_ref/c/intfcm/CreateCompareSwapCommand64 //test_ref/c/intfm/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CompareSwap64
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	
	If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
	successful.
	@param addr Command target address
	@param expectedVal Pointer to quadlets expected at target.
	@param newVal Pointer to quadlets to atomically set at target if compare is successful.
	@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
	@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap64 //test_ref/c/clm/CompareSwap64 //test_ref/c/intfcm/CompareSwap64 //test_ref/c/intfm/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">expectedVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">oldVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!        @function GetBusGeneration
	@abstract Get bus generation number.
	@discussion The bus generation number stays constant between bus resets and can be
	used in combination with a FireWire node ID to uniquely identify nodes on the bus.
	Pass the generation number to functions that take or return FireWire node IDs.
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the bus generation  number</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusGeneration //test_ref/c/clm/GetBusGeneration //test_ref/c/intfcm/GetBusGeneration //test_ref/c/intfm/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span> );  
	    <span class="comment">/*!        @function GetLocalNodeIDWithGeneration
	@abstract Get node ID of local machine.
	@discussion Use this function instead of GetLocalNodeID().
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeIDWithGeneration //test_ref/c/clm/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/GetLocalNodeIDWithGeneration //test_ref/c/intfm/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span> );  
	    <span class="comment">/*!        @function GetRemoteNodeID
	@abstract Get node ID of device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetRemoteNodeID //test_ref/c/clm/GetRemoteNodeID //test_ref/c/intfcm/GetRemoteNodeID //test_ref/c/intfm/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outRemoteNodeID</span> );  
	    <span class="comment">/*!        @function GetSpeedToNode
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedToNode //test_ref/c/clm/GetSpeedToNode //test_ref/c/intfcm/GetSpeedToNode //test_ref/c/intfm/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	    <span class="comment">/*!        @function GetSpeedBetweenNodes
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param srcNodeID A FireWire node ID.
	@param destNodeID A FireWire node ID.
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedBetweenNodes //test_ref/c/clm/GetSpeedBetweenNodes //test_ref/c/intfcm/GetSpeedBetweenNodes //test_ref/c/intfm/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	} <!-- a logicalPath="//test_ref/c/econst/IOFireWireDeviceInterface //test_ref/c/data/IOFireWireDeviceInterface //test_ref/c/clconst/IOFireWireDeviceInterface " machineGenerated="true" --><span class="var">IOFireWireDeviceInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireUnitInterface //test_ref/c/data/IOFireWireUnitInterface //test_ref/c/clconst/IOFireWireUnitInterface " machineGenerated="true" --><span class="var">IOFireWireUnitInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireNubInterface //test_ref/c/data/IOFireWireNubInterface //test_ref/c/clconst/IOFireWireNubInterface " machineGenerated="true" --><span class="var">IOFireWireNubInterface</span><!-- /a -->;  
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireDeviceInterface_t //test_ref/c/tdef/IOFireWireDeviceInterface_t //test_ref/c/tag/IOFireWireDeviceInterface_t //test_ref/c/struct/IOFireWireDeviceInterface_t //test_ref/c/intf/IOFireWireDeviceInterface_t //test_ref/doc/anysymbol/IOFireWireDeviceInterface_t" machineGenerated="true" --><span class="type">IOFireWireDeviceInterface_t</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS //test_ref/c/clconst/IUNKNOWN_C_GUTS " machineGenerated="true" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->;  
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/version //test_ref/c/data/version //test_ref/c/clconst/version " machineGenerated="true" --><span class="var">version</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/revision //test_ref/c/data/revision //test_ref/c/clconst/revision " machineGenerated="true" --><span class="var">revision</span><!-- /a -->; <span class="comment">// version/revision</span>  
	    <span class="comment">// --- maintenance methods -------------</span> 
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function InterfaceIsInited
	@abstract Determine whether interface has been properly inited.
	@param self The device interface to use.
	@result Returns true if interface is inited and false if is it not.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/InterfaceIsInited //test_ref/c/clm/InterfaceIsInited //test_ref/c/intfcm/InterfaceIsInited //test_ref/c/intfm/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function GetDevice
	@abstract Get the IOKit service to which this interface is connected.
	@param self The device interface to use.
	@result Returns an io_object_t corresponding to the device the interface is
	using</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDevice //test_ref/c/clm/GetDevice //test_ref/c/intfcm/GetDevice //test_ref/c/intfm/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_2</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Open
	@abstract Open the connected device for exclusive access. When you have
	the device open using this method, all accesses by other clients of 
	this device will be denied until Close() is called.
	@param self The device interface to use.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Open //test_ref/c/clm/Open //test_ref/c/intfcm/Open //test_ref/c/intfm/Open //test_ref/c/func/Open //test_ref/c/ftmplt/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function OpenWithSessionRef
	@abstract An open function which allows this interface to have access
	to the device when already opened. The service which has already opened
	the device must be able to provide an IOFireWireSessionRef.
	@param self The device interface to use
	@param IOFireWireSessionRef The sessionRef returned from the client who has
	the device open
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/OpenWithSessionRef //test_ref/c/clm/OpenWithSessionRef //test_ref/c/intfcm/OpenWithSessionRef //test_ref/c/intfm/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Close
	@abstract Release exclusive access to the device
	@param self The device interface to use</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Close //test_ref/c/clm/Close //test_ref/c/intfcm/Close //test_ref/c/intfm/Close //test_ref/c/func/Close //test_ref/c/ftmplt/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">// --- notification --------------------</span> 
	    <span class="comment">/*!
	@function NotificationIsOn
	@abstract Determine whether callback notifications for this interface are currently active
	@param self The device interface to use
	@result A Boolean value where true indicates notifications are active</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/NotificationIsOn //test_ref/c/clm/NotificationIsOn //test_ref/c/intfcm/NotificationIsOn //test_ref/c/intfm/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoop
	@abstract Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function.
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoop //test_ref/c/clm/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!
	@function RemoveCallbackDispatcherFromRunLoop
	@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOnNotification
	@abstract Activates any callbacks specified for this device interface. Only works after 
	AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
	@param self The device interface to use.
	@result A Boolean value. Returns true on success.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOnNotification //test_ref/c/clm/TurnOnNotification //test_ref/c/intfcm/TurnOnNotification //test_ref/c/intfm/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOffNotification
	@abstract Deactivates and callbacks specified for this device interface. Reverses the 
	effects of TurnOnNotification()
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOffNotification //test_ref/c/clm/TurnOffNotification //test_ref/c/intfcm/TurnOffNotification //test_ref/c/intfm/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function SetBusResetHandler
	@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
	can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
	resets might occur before bus reconfiguration has completed.)
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetHandler //test_ref/c/clm/SetBusResetHandler //test_ref/c/intfcm/SetBusResetHandler //test_ref/c/intfm/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
	    <span class="comment">/*!
	@function SetBusResetDoneHandler
	@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
	of the bus has been completed. This function will only be called once per bus reset.
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetDoneHandler //test_ref/c/clm/SetBusResetDoneHandler //test_ref/c/intfcm/SetBusResetDoneHandler //test_ref/c/intfm/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>); 
	    <span class="comment">/*!
	@function ClientCommandIsComplete
	@abstract This function must be called from callback routines once they have completed processing
	a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
	parameter.
	@param commandID The command ID passed to the callback function when it was called
	@param status An IOReturn value indicating the completion status of the callback function</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ClientCommandIsComplete //test_ref/c/clm/ClientCommandIsComplete //test_ref/c/intfcm/ClientCommandIsComplete //test_ref/c/intfm/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
	    <span class="comment">// --- read/write/lock operations -------</span> 
	    <span class="comment">/*!
	@function Read
	@abstract Perform synchronous block read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Read //test_ref/c/clm/Read //test_ref/c/intfcm/Read //test_ref/c/intfm/Read //test_ref/c/func/Read //test_ref/c/ftmplt/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function ReadQuadlet
	@abstract Perform synchronous quadlet read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param value A pointer to where to data should be stored
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ReadQuadlet //test_ref/c/clm/ReadQuadlet //test_ref/c/intfcm/ReadQuadlet //test_ref/c/intfm/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">val</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>); 
	    <span class="comment">/*!
	@function Write
	@abstract Perform synchronous block write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Write //test_ref/c/clm/Write //test_ref/c/intfcm/Write //test_ref/c/intfm/Write //test_ref/c/func/Write //test_ref/c/ftmplt/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function WriteQuadlet
	@abstract Perform synchronous quadlet write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param val The value to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/WriteQuadlet //test_ref/c/clm/WriteQuadlet //test_ref/c/intfcm/WriteQuadlet //test_ref/c/intfm/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function CompareSwap
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param cmpVal The check/compare value
	@param newVal Value to set
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap //test_ref/c/clm/CompareSwap //test_ref/c/intfcm/CompareSwap //test_ref/c/intfm/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">// --- FireWire command object methods ---------</span>  
	    <span class="comment">/*!
	@function CreateReadCommand
	@abstract Create a block read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadCommand //test_ref/c/clm/CreateReadCommand //test_ref/c/intfcm/CreateReadCommand //test_ref/c/intfm/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateReadQuadletCommand
	@abstract Create a quadlet read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets where results should be stored
	@param numQuads Number of quadlets to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@param </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadQuadletCommand //test_ref/c/clm/CreateReadQuadletCommand //test_ref/c/intfcm/CreateReadQuadletCommand //test_ref/c/intfm/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateWriteCommand
	@abstract Create a block write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to the buffer containing the data to be written
	@param size Number of bytes to write
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteCommand //test_ref/c/clm/CreateWriteCommand //test_ref/c/intfcm/CreateWriteCommand //test_ref/c/intfm/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateWriteQuadletCommand
	@abstract Create a quadlet write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets containing quadlets to be written
	@param numQuads Number of quadlets to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteQuadletCommand //test_ref/c/clm/CreateWriteQuadletCommand //test_ref/c/intfcm/CreateWriteQuadletCommand //test_ref/c/intfm/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand
	@abstract Create a quadlet compare/swap command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 32-bit value expected at target address
	@param newVal 32-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand //test_ref/c/clm/CreateCompareSwapCommand //test_ref/c/intfcm/CreateCompareSwapCommand //test_ref/c/intfm/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- other methods ---------------------------</span> 
	    <span class="comment">/*!        @function BusReset
	@abstract Cause a bus reset</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/BusReset //test_ref/c/clm/BusReset //test_ref/c/intfcm/BusReset //test_ref/c/intfm/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!        @function GetCycleTime
	@abstract Get bus cycle time.
	@param self The device interface to use.
	@param outCycleTime A pointer to a UInt32 to hold the result</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetCycleTime //test_ref/c/clm/GetCycleTime //test_ref/c/intfcm/GetCycleTime //test_ref/c/intfm/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">/*!        @function GetGenerationAndNodeID
	@abstract (Obsolete) Get bus generation and remote device node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
	interface v4.
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the generation result
	@param outNodeID A pointer to a UInt16 to hold the remote device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetGenerationAndNodeID //test_ref/c/clm/GetGenerationAndNodeID //test_ref/c/intfcm/GetGenerationAndNodeID //test_ref/c/intfm/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outNodeID</span>);  
	    <span class="comment">/*!        @function GetLocalNodeID
	@abstract (Obsolete) Get local node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
	interface v4.
	@param self The device interface to use.
	@param outNodeID A pointer to a UInt16 to hold the local device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeID //test_ref/c/clm/GetLocalNodeID //test_ref/c/intfcm/GetLocalNodeID //test_ref/c/intfm/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span>);  
	    <span class="comment">/*!        @function GetResetTime
	@abstract Get time since last bus reset.
	@param self The device interface to use.
	@param outResetTime A pointer to an AbsolutTime to hold the result.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetResetTime //test_ref/c/clm/GetResetTime //test_ref/c/intfcm/GetResetTime //test_ref/c/intfm/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --><span class="type">*</span> <span class="param">outResetTime</span>);  
	    <span class="comment">// --- unit directory support ------------------</span> 
	    <span class="comment">/*!        @function CreateLocalUnitDirectory
	@abstract Creates a local unit directory object and returns an interface to it. An
	instance of a unit directory object corresponds to an instance of a unit 
	directory in the local machine's configuration ROM.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created unit directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalUnitDirectory //test_ref/c/clm/CreateLocalUnitDirectory //test_ref/c/intfcm/CreateLocalUnitDirectory //test_ref/c/intfm/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- config directory support ----------------</span> 
	    <span class="comment">/*!        @function GetConfigDirectory
	@abstract Creates a config directory object and returns an interface to it. The
	created config directory object represents the config directory in the remote
	device or unit to which the creating device interface is attached.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetConfigDirectory //test_ref/c/clm/GetConfigDirectory //test_ref/c/intfcm/GetConfigDirectory //test_ref/c/intfm/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateConfigDirectoryWithIOObject
	@abstract This function can be used to create a config directory object and a
	corresponding interface from an opaque IOObject reference. Some configuration
	directory interface methods may return an io_object_t instead of an
	IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
	IOFireWireLibConfigDirectoryRef from an io_object_t.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateConfigDirectoryWithIOObject //test_ref/c/clm/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- address space support -------------------</span> 
	    <span class="comment">/*!        @function CreatePseudoAddressSpace
	@abstract Creates a pseudo address space object and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine. 
	@param self The device interface to use.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePseudoAddressSpace //test_ref/c/clm/CreatePseudoAddressSpace //test_ref/c/intfcm/CreatePseudoAddressSpace //test_ref/c/intfm/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreatePhysicalAddressSpace
	@abstract Creates a physical address space object and returns an interface to it. This
	will create a physical address space on the local machine. 
	@param self The device interface to use.
	@param inBackingStore An block of allocated memory representing the contents of the address space.
	@param inSize The size in bytes of this address space
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space. For future use -- always pass 0.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created physical address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePhysicalAddressSpace //test_ref/c/clm/CreatePhysicalAddressSpace //test_ref/c/intfcm/CreatePhysicalAddressSpace //test_ref/c/intfm/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireBugMsg //test_ref/c/clm/FireBugMsg //test_ref/c/intfcm/FireBugMsg //test_ref/c/intfm/FireBugMsg //test_ref/c/func/FireBugMsg //test_ref/c/ftmplt/FireBugMsg //test_ref/c/defn/FireBugMsg //test_ref/c/macro/FireBugMsg //test_ref/doc/anysymbol/FireBugMsg" machineGenerated="true" --><span class="function">FireBugMsg</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">msg</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v2 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- eye-sock-run-U.S. -----------------------</span> 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not function
	before this function is called. This functions is similar to 
	AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
	from that passed to AddCallbackDispatcherToRunLoop. 
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!        @function CreateRemoteIsochPort
	@abstract Creates a remote isochronous port object and returns an interface to it. A
	remote isochronous port object is an abstract entity used to represent a remote
	talker or listener device on an isochronous channel. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created remote isochronous port object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateRemoteIsochPort //test_ref/c/clm/CreateRemoteIsochPort //test_ref/c/intfcm/CreateRemoteIsochPort //test_ref/c/intfm/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateLocalIsochPort
	@abstract Creates a local isochronous port object and returns an interface to it. A
	local isochronous port object is an abstract entity used to represent a
	talking or listening endpoint in the local machine. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param inDCLProgram A pointer to the first DCL command struct of the DCL program
	to be compiled and used to send or receive data on this port.
	@param inStartEvent Start event bits
	@param inStartState Start state bits
	@param inStartMask Start mask bits
	@param inDCLProgramRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
	structs or nil to ignore this parameter.
	@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
	Pass 0 for none.
	@param inBufferRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
	to an array of IOVirtualRange structs or nil to ignore this parameter.
	@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
	Pass 0 for none.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalIsochPort //test_ref/c/clm/CreateLocalIsochPort //test_ref/c/intfcm/CreateLocalIsochPort //test_ref/c/intfm/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateIsochChannel
	@abstract Creates an isochronous channel object and returns an interface to it. An
	isochronous channel object is an abstract entity used to represent a
	FireWire isochronous channel. 
	@param self The device interface to use.
	@param doIRM Controls whether the channel automatically performs IRM operations. 
	Pass true if the channel should allocate its channel and bandwidth with
	the IRM. Pass false to ignore the IRM.
	@param packetSize Size in bytes of packets being sent or received with this channel.
	This is automatically translated into a bandwidth allocation appropriate
	for the speed passed in prefSpeed.
	@param prefSpeed The preferred bus speed of this channel.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateIsochChannel //test_ref/c/clm/CreateIsochChannel //test_ref/c/intfcm/CreateIsochChannel //test_ref/c/intfm/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">/*!        @function CreateDCLCommandPool
	@abstract Creates a command pool object and returns an interface to it. The command 
	pool can be used to build DCL programs.
	@param self The device interface to use.
	@param size Starting size of command pool
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateDCLCommandPool //test_ref/c/clm/CreateDCLCommandPool //test_ref/c/intfcm/CreateDCLCommandPool //test_ref/c/intfm/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">// --- refcons ---------------------------------</span> 
	    <span class="comment">/*!        @function GetRefCon
	@abstract Get user reference value set on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span>(<span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/GetRefCon //test_ref/c/data/GetRefCon //test_ref/c/clconst/GetRefCon " machineGenerated="true" --><span class="var">GetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>); 
	    <span class="comment">/*!        @function SetRefCon
	@abstract Set user reference value on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetRefCon //test_ref/c/clm/SetRefCon //test_ref/c/intfcm/SetRefCon //test_ref/c/intfm/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">refCon</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <span class="comment">// do not use this function</span> 
	    <!-- a logicalPath="//test_ref/c/cl/CFTypeRef //test_ref/c/tdef/CFTypeRef //test_ref/c/tag/CFTypeRef //test_ref/c/struct/CFTypeRef //test_ref/c/intf/CFTypeRef //test_ref/doc/anysymbol/CFTypeRef" machineGenerated="true" --><span class="type">CFTypeRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDebugProperty //test_ref/c/clm/GetDebugProperty //test_ref/c/intfcm/GetDebugProperty //test_ref/c/intfm/GetDebugProperty //test_ref/c/func/GetDebugProperty //test_ref/c/ftmplt/GetDebugProperty //test_ref/c/defn/GetDebugProperty //test_ref/c/macro/GetDebugProperty //test_ref/doc/anysymbol/GetDebugProperty" machineGenerated="true" --><span class="function">GetDebugProperty</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">interface</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inPropertyName</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFTypeID //test_ref/c/tdef/CFTypeID //test_ref/c/tag/CFTypeID //test_ref/c/struct/CFTypeID //test_ref/c/intf/CFTypeID //test_ref/doc/anysymbol/CFTypeID" machineGenerated="true" --><span class="type">CFTypeID</span><!-- /a --><span class="type">*</span> <span class="param">outPropertyType</span>);  
	    <span class="comment">/*!        @function PrintDCLProgram
	@abstract Walk a DCL program linked list and print its contents
	@param self The device interface to use.
	@param inProgram A pointer to the first DCL of the program to print
	@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
	report an error if this number does not match the number of DCLs found</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/PrintDCLProgram //test_ref/c/clm/PrintDCLProgram //test_ref/c/intfcm/PrintDCLProgram //test_ref/c/intfm/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v3 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- v3 functions ----------</span> 
	    <span class="comment">/*!        @function CreateInitialUnitsPseudoAddressSpace
	@abstract Creates a pseudo address space in initial units space.
	@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine.
	
	Availablilty: IOFireWireDeviceInterface_v3,  and newer
	
	@param self The device interface to use.
	@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
	in initial units space.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write. Clients
	will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
	already has an address space at the requested address. All clients will be notified of writes to
	covered addresses.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>); 
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoopForMode
	@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
	@discussion Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function. With this function, you can additionally specify
	for which run loop modes this source should be added.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
	@discussion This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not be called unless
	this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
	The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!
	@function RemoveIsochCallbackDispatcherFromRunLoop
	@abstract Removes an IOFireWireLib-added run loop event source.
	@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function Seize
	@abstract Seize control of device/unit
	@discussion Allows a user space client to seize control of an in-kernel service even if
	that service has been Opened() by another client or in-kernel driver. This function should be
	used with care. Admin rights are required to use this function.
	
	Calling this method makes it appear to all other drivers that the device has been unplugged.
	Open() should be called after this method has been invoked.
	
	When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
	normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
	@param self The device interface to use.
	@param reserved Reserved for future use. Set to NULL.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Seize //test_ref/c/clm/Seize //test_ref/c/intfcm/Seize //test_ref/c/intfm/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	        ... );  
	    <span class="comment">/*!
	@function FireLog
	@abstract Logs string to in-kernel debug buffer
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireLog //test_ref/c/clm/FireLog //test_ref/c/intfcm/FireLog //test_ref/c/intfm/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">format</span>, 
	        ... );  
	    <span class="comment">/*!        @function GetBusCycleTime
	@abstract Get bus and cycle time.
	@param self The device interface to use.
	@param outBusTime A pointer to a UInt32 to hold the bus time
	@param outCycleTime A pointer to a UInt32 to hold the cycle time</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusCycleTime //test_ref/c/clm/GetBusCycleTime //test_ref/c/intfcm/GetBusCycleTime //test_ref/c/intfm/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outBusTime</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// v4</span> 
	    <span class="comment">//</span>  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand64
	@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 64-bit value expected at target address
	@param newVal 64-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand64 //test_ref/c/clm/CreateCompareSwapCommand64 //test_ref/c/intfcm/CreateCompareSwapCommand64 //test_ref/c/intfm/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CompareSwap64
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	
	If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
	successful.
	@param addr Command target address
	@param expectedVal Pointer to quadlets expected at target.
	@param newVal Pointer to quadlets to atomically set at target if compare is successful.
	@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
	@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap64 //test_ref/c/clm/CompareSwap64 //test_ref/c/intfcm/CompareSwap64 //test_ref/c/intfm/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">expectedVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">oldVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!        @function GetBusGeneration
	@abstract Get bus generation number.
	@discussion The bus generation number stays constant between bus resets and can be
	used in combination with a FireWire node ID to uniquely identify nodes on the bus.
	Pass the generation number to functions that take or return FireWire node IDs.
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the bus generation  number</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusGeneration //test_ref/c/clm/GetBusGeneration //test_ref/c/intfcm/GetBusGeneration //test_ref/c/intfm/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span> );  
	    <span class="comment">/*!        @function GetLocalNodeIDWithGeneration
	@abstract Get node ID of local machine.
	@discussion Use this function instead of GetLocalNodeID().
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeIDWithGeneration //test_ref/c/clm/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/GetLocalNodeIDWithGeneration //test_ref/c/intfm/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span> );  
	    <span class="comment">/*!        @function GetRemoteNodeID
	@abstract Get node ID of device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetRemoteNodeID //test_ref/c/clm/GetRemoteNodeID //test_ref/c/intfcm/GetRemoteNodeID //test_ref/c/intfm/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outRemoteNodeID</span> );  
	    <span class="comment">/*!        @function GetSpeedToNode
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedToNode //test_ref/c/clm/GetSpeedToNode //test_ref/c/intfcm/GetSpeedToNode //test_ref/c/intfm/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	    <span class="comment">/*!        @function GetSpeedBetweenNodes
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param srcNodeID A FireWire node ID.
	@param destNodeID A FireWire node ID.
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedBetweenNodes //test_ref/c/clm/GetSpeedBetweenNodes //test_ref/c/intfcm/GetSpeedBetweenNodes //test_ref/c/intfm/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	} <!-- a logicalPath="//test_ref/c/econst/IOFireWireDeviceInterface //test_ref/c/data/IOFireWireDeviceInterface //test_ref/c/clconst/IOFireWireDeviceInterface " machineGenerated="true" --><span class="var">IOFireWireDeviceInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireUnitInterface //test_ref/c/data/IOFireWireUnitInterface //test_ref/c/clconst/IOFireWireUnitInterface " machineGenerated="true" --><span class="var">IOFireWireUnitInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireNubInterface //test_ref/c/data/IOFireWireNubInterface //test_ref/c/clconst/IOFireWireNubInterface " machineGenerated="true" --><span class="var">IOFireWireNubInterface</span><!-- /a -->;  
END OF OBJECT


OBJECT: IOFireWireDeviceInterface_t (HeaderDoc::CPPClass)
	<span class="keyword">typedef</span> <span class="keyword">struct</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireDeviceInterface_t //test_ref/c/tdef/IOFireWireDeviceInterface_t //test_ref/c/tag/IOFireWireDeviceInterface_t //test_ref/c/struct/IOFireWireDeviceInterface_t //test_ref/c/intf/IOFireWireDeviceInterface_t //test_ref/doc/anysymbol/IOFireWireDeviceInterface_t" machineGenerated="true" --><span class="type">IOFireWireDeviceInterface_t</span><!-- /a --> { 
	    <!-- a logicalPath="//test_ref/c/econst/IUNKNOWN_C_GUTS //test_ref/c/data/IUNKNOWN_C_GUTS //test_ref/c/clconst/IUNKNOWN_C_GUTS " machineGenerated="true" --><span class="var">IUNKNOWN_C_GUTS</span><!-- /a -->;  
	    <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/econst/version //test_ref/c/data/version //test_ref/c/clconst/version " machineGenerated="true" --><span class="var">version</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/revision //test_ref/c/data/revision //test_ref/c/clconst/revision " machineGenerated="true" --><span class="var">revision</span><!-- /a -->; <span class="comment">// version/revision</span>  
	    <span class="comment">// --- maintenance methods -------------</span> 
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function InterfaceIsInited
	@abstract Determine whether interface has been properly inited.
	@param self The device interface to use.
	@result Returns true if interface is inited and false if is it not.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/InterfaceIsInited //test_ref/c/clm/InterfaceIsInited //test_ref/c/intfcm/InterfaceIsInited //test_ref/c/intfm/InterfaceIsInited //test_ref/c/func/InterfaceIsInited //test_ref/c/ftmplt/InterfaceIsInited //test_ref/c/defn/InterfaceIsInited //test_ref/c/macro/InterfaceIsInited //test_ref/doc/anysymbol/InterfaceIsInited" machineGenerated="true" --><span class="function">InterfaceIsInited</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function GetDevice
	@abstract Get the IOKit service to which this interface is connected.
	@param self The device interface to use.
	@result Returns an io_object_t corresponding to the device the interface is
	using</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDevice //test_ref/c/clm/GetDevice //test_ref/c/intfcm/GetDevice //test_ref/c/intfm/GetDevice //test_ref/c/func/GetDevice //test_ref/c/ftmplt/GetDevice //test_ref/c/defn/GetDevice //test_ref/c/macro/GetDevice //test_ref/doc/anysymbol/GetDevice" machineGenerated="true" --><span class="function">GetDevice</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_2</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Open
	@abstract Open the connected device for exclusive access. When you have
	the device open using this method, all accesses by other clients of 
	this device will be denied until Close() is called.
	@param self The device interface to use.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Open //test_ref/c/clm/Open //test_ref/c/intfcm/Open //test_ref/c/intfm/Open //test_ref/c/func/Open //test_ref/c/ftmplt/Open //test_ref/c/defn/Open //test_ref/c/macro/Open //test_ref/doc/anysymbol/Open" machineGenerated="true" --><span class="function">Open</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function OpenWithSessionRef
	@abstract An open function which allows this interface to have access
	to the device when already opened. The service which has already opened
	the device must be able to provide an IOFireWireSessionRef.
	@param self The device interface to use
	@param IOFireWireSessionRef The sessionRef returned from the client who has
	the device open
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/OpenWithSessionRef //test_ref/c/clm/OpenWithSessionRef //test_ref/c/intfcm/OpenWithSessionRef //test_ref/c/intfm/OpenWithSessionRef //test_ref/c/func/OpenWithSessionRef //test_ref/c/ftmplt/OpenWithSessionRef //test_ref/c/defn/OpenWithSessionRef //test_ref/c/macro/OpenWithSessionRef //test_ref/doc/anysymbol/OpenWithSessionRef" machineGenerated="true" --><span class="function">OpenWithSessionRef</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireSessionRef //test_ref/c/tdef/IOFireWireSessionRef //test_ref/c/tag/IOFireWireSessionRef //test_ref/c/struct/IOFireWireSessionRef //test_ref/c/intf/IOFireWireSessionRef //test_ref/doc/anysymbol/IOFireWireSessionRef" machineGenerated="true" --><span class="type">IOFireWireSessionRef</span><!-- /a --> <span class="param">sessionRef</span>);  
	    <span class="comment">/*!
	@functiongroup class_group_1</span>
	        <span class="comment">*/</span>
	    <span class="comment">/*!
	@function Close
	@abstract Release exclusive access to the device
	@param self The device interface to use</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Close //test_ref/c/clm/Close //test_ref/c/intfcm/Close //test_ref/c/intfm/Close //test_ref/c/func/Close //test_ref/c/ftmplt/Close //test_ref/c/defn/Close //test_ref/c/macro/Close //test_ref/doc/anysymbol/Close" machineGenerated="true" --><span class="function">Close</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">// --- notification --------------------</span> 
	    <span class="comment">/*!
	@function NotificationIsOn
	@abstract Determine whether callback notifications for this interface are currently active
	@param self The device interface to use
	@result A Boolean value where true indicates notifications are active</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/NotificationIsOn //test_ref/c/clm/NotificationIsOn //test_ref/c/intfcm/NotificationIsOn //test_ref/c/intfm/NotificationIsOn //test_ref/c/func/NotificationIsOn //test_ref/c/ftmplt/NotificationIsOn //test_ref/c/defn/NotificationIsOn //test_ref/c/macro/NotificationIsOn //test_ref/doc/anysymbol/NotificationIsOn" machineGenerated="true" --><span class="function">NotificationIsOn</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoop
	@abstract Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function.
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoop //test_ref/c/clm/AddCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddCallbackDispatcherToRunLoop //test_ref/c/intfm/AddCallbackDispatcherToRunLoop //test_ref/c/func/AddCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoop //test_ref/c/defn/AddCallbackDispatcherToRunLoop //test_ref/c/macro/AddCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!
	@function RemoveCallbackDispatcherFromRunLoop
	@abstract Reverses the effects of AddCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveCallbackDispatcherFromRunLoop</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOnNotification
	@abstract Activates any callbacks specified for this device interface. Only works after 
	AddCallbackDispatcherToRunLoop has been called. See also AddIsochCallbackDispatcherToRunLoop().
	@param self The device interface to use.
	@result A Boolean value. Returns true on success.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOnNotification //test_ref/c/clm/TurnOnNotification //test_ref/c/intfcm/TurnOnNotification //test_ref/c/intfm/TurnOnNotification //test_ref/c/func/TurnOnNotification //test_ref/c/ftmplt/TurnOnNotification //test_ref/c/defn/TurnOnNotification //test_ref/c/macro/TurnOnNotification //test_ref/doc/anysymbol/TurnOnNotification" machineGenerated="true" --><span class="function">TurnOnNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function TurnOffNotification
	@abstract Deactivates and callbacks specified for this device interface. Reverses the 
	effects of TurnOnNotification()
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/TurnOffNotification //test_ref/c/clm/TurnOffNotification //test_ref/c/intfcm/TurnOffNotification //test_ref/c/intfm/TurnOffNotification //test_ref/c/func/TurnOffNotification //test_ref/c/ftmplt/TurnOffNotification //test_ref/c/defn/TurnOffNotification //test_ref/c/macro/TurnOffNotification //test_ref/doc/anysymbol/TurnOffNotification" machineGenerated="true" --><span class="function">TurnOffNotification</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function SetBusResetHandler
	@abstract Sets the callback that should be called when a bus reset occurs. Note that this callback
	can be called multiple times before the bus reset done handler is called. (f.ex., multiple bus
	resets might occur before bus reconfiguration has completed.)
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns an IOFireWireBusResetHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetHandler //test_ref/c/clm/SetBusResetHandler //test_ref/c/intfcm/SetBusResetHandler //test_ref/c/intfm/SetBusResetHandler //test_ref/c/func/SetBusResetHandler //test_ref/c/ftmplt/SetBusResetHandler //test_ref/c/defn/SetBusResetHandler //test_ref/c/macro/SetBusResetHandler //test_ref/doc/anysymbol/SetBusResetHandler" machineGenerated="true" --><span class="function">SetBusResetHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetHandler //test_ref/c/tdef/IOFireWireBusResetHandler //test_ref/c/tag/IOFireWireBusResetHandler //test_ref/c/struct/IOFireWireBusResetHandler //test_ref/c/intf/IOFireWireBusResetHandler //test_ref/doc/anysymbol/IOFireWireBusResetHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetHandler</span><!-- /a --> <span class="param">handler</span>);  
	    <span class="comment">/*!
	@function SetBusResetDoneHandler
	@abstract Sets the callback that should be called after a bus reset has occurred and reconfiguration
	of the bus has been completed. This function will only be called once per bus reset.
	@param self The device interface to use.
	@param handler Function pointer to the handler to install
	@result Returns on IOFireWireBusResetDoneHandler function pointer to the previously installed
	bus reset handler. Returns 0 if none was set.</span>
	        <span class="comment">*/</span>
	    <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetBusResetDoneHandler //test_ref/c/clm/SetBusResetDoneHandler //test_ref/c/intfcm/SetBusResetDoneHandler //test_ref/c/intfm/SetBusResetDoneHandler //test_ref/c/func/SetBusResetDoneHandler //test_ref/c/ftmplt/SetBusResetDoneHandler //test_ref/c/defn/SetBusResetDoneHandler //test_ref/c/macro/SetBusResetDoneHandler //test_ref/doc/anysymbol/SetBusResetDoneHandler" machineGenerated="true" --><span class="function">SetBusResetDoneHandler</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireBusResetDoneHandler //test_ref/c/tdef/IOFireWireBusResetDoneHandler //test_ref/c/tag/IOFireWireBusResetDoneHandler //test_ref/c/struct/IOFireWireBusResetDoneHandler //test_ref/c/intf/IOFireWireBusResetDoneHandler //test_ref/doc/anysymbol/IOFireWireBusResetDoneHandler" machineGenerated="true" --><span class="type">IOFireWireBusResetDoneHandler</span><!-- /a --> <span class="param">handler</span>); 
	    <span class="comment">/*!
	@function ClientCommandIsComplete
	@abstract This function must be called from callback routines once they have completed processing
	a callback. This function only applies to callbacks which take an IOFireWireLibDeviceRef (i.e. bus reset),
	parameter.
	@param commandID The command ID passed to the callback function when it was called
	@param status An IOReturn value indicating the completion status of the callback function</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ClientCommandIsComplete //test_ref/c/clm/ClientCommandIsComplete //test_ref/c/intfcm/ClientCommandIsComplete //test_ref/c/intfm/ClientCommandIsComplete //test_ref/c/func/ClientCommandIsComplete //test_ref/c/ftmplt/ClientCommandIsComplete //test_ref/c/defn/ClientCommandIsComplete //test_ref/c/macro/ClientCommandIsComplete //test_ref/doc/anysymbol/ClientCommandIsComplete" machineGenerated="true" --><span class="function">ClientCommandIsComplete</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/FWClientCommandID //test_ref/c/tdef/FWClientCommandID //test_ref/c/tag/FWClientCommandID //test_ref/c/struct/FWClientCommandID //test_ref/c/intf/FWClientCommandID //test_ref/doc/anysymbol/FWClientCommandID" machineGenerated="true" --><span class="type">FWClientCommandID</span><!-- /a --> <span class="param">commandID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> <span class="param">status</span>);  
	    <span class="comment">// --- read/write/lock operations -------</span> 
	    <span class="comment">/*!
	@function Read
	@abstract Perform synchronous block read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Read //test_ref/c/clm/Read //test_ref/c/intfcm/Read //test_ref/c/intfm/Read //test_ref/c/func/Read //test_ref/c/ftmplt/Read //test_ref/c/defn/Read //test_ref/c/macro/Read //test_ref/doc/anysymbol/Read" machineGenerated="true" --><span class="function">Read</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function ReadQuadlet
	@abstract Perform synchronous quadlet read
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to read. 
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param value A pointer to where to data should be stored
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in generation. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/ReadQuadlet //test_ref/c/clm/ReadQuadlet //test_ref/c/intfcm/ReadQuadlet //test_ref/c/intfm/ReadQuadlet //test_ref/c/func/ReadQuadlet //test_ref/c/ftmplt/ReadQuadlet //test_ref/c/defn/ReadQuadlet //test_ref/c/macro/ReadQuadlet //test_ref/doc/anysymbol/ReadQuadlet" machineGenerated="true" --><span class="function">ReadQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">val</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>); 
	    <span class="comment">/*!
	@function Write
	@abstract Perform synchronous block write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Write //test_ref/c/clm/Write //test_ref/c/intfcm/Write //test_ref/c/intfm/Write //test_ref/c/func/Write //test_ref/c/ftmplt/Write //test_ref/c/defn/Write //test_ref/c/macro/Write //test_ref/doc/anysymbol/Write" machineGenerated="true" --><span class="function">Write</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function WriteQuadlet
	@abstract Perform synchronous quadlet write
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param val The value to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/WriteQuadlet //test_ref/c/clm/WriteQuadlet //test_ref/c/intfcm/WriteQuadlet //test_ref/c/intfm/WriteQuadlet //test_ref/c/func/WriteQuadlet //test_ref/c/ftmplt/WriteQuadlet //test_ref/c/defn/WriteQuadlet //test_ref/c/macro/WriteQuadlet //test_ref/doc/anysymbol/WriteQuadlet" machineGenerated="true" --><span class="function">WriteQuadlet</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">val</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!
	@function CompareSwap
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	@param addr Command target address
	@param cmpVal The check/compare value
	@param newVal Value to set
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap //test_ref/c/clm/CompareSwap //test_ref/c/intfcm/CompareSwap //test_ref/c/intfm/CompareSwap //test_ref/c/func/CompareSwap //test_ref/c/ftmplt/CompareSwap //test_ref/c/defn/CompareSwap //test_ref/c/macro/CompareSwap //test_ref/doc/anysymbol/CompareSwap" machineGenerated="true" --><span class="function">CompareSwap</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">// --- FireWire command object methods ---------</span>  
	    <span class="comment">/*!
	@function CreateReadCommand
	@abstract Create a block read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to a buffer where the results will be stored
	@param size Number of bytes to read
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadCommand //test_ref/c/clm/CreateReadCommand //test_ref/c/intfcm/CreateReadCommand //test_ref/c/intfm/CreateReadCommand //test_ref/c/func/CreateReadCommand //test_ref/c/ftmplt/CreateReadCommand //test_ref/c/defn/CreateReadCommand //test_ref/c/macro/CreateReadCommand //test_ref/doc/anysymbol/CreateReadCommand" machineGenerated="true" --><span class="function">CreateReadCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateReadQuadletCommand
	@abstract Create a quadlet read command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets where results should be stored
	@param numQuads Number of quadlets to read
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@param </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateReadQuadletCommand //test_ref/c/clm/CreateReadQuadletCommand //test_ref/c/intfcm/CreateReadQuadletCommand //test_ref/c/intfm/CreateReadQuadletCommand //test_ref/c/func/CreateReadQuadletCommand //test_ref/c/ftmplt/CreateReadQuadletCommand //test_ref/c/defn/CreateReadQuadletCommand //test_ref/c/macro/CreateReadQuadletCommand //test_ref/doc/anysymbol/CreateReadQuadletCommand" machineGenerated="true" --><span class="function">CreateReadQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateWriteCommand
	@abstract Create a block write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param buf A pointer to the buffer containing the data to be written
	@param size Number of bytes to write
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteCommand //test_ref/c/clm/CreateWriteCommand //test_ref/c/intfcm/CreateWriteCommand //test_ref/c/intfm/CreateWriteCommand //test_ref/c/func/CreateWriteCommand //test_ref/c/ftmplt/CreateWriteCommand //test_ref/c/defn/CreateWriteCommand //test_ref/c/macro/CreateWriteCommand //test_ref/doc/anysymbol/CreateWriteCommand" machineGenerated="true" --><span class="function">CreateWriteCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">buf</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">size</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateWriteQuadletCommand
	@abstract Create a quadlet write command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param quads An array of quadlets containing quadlets to be written
	@param numQuads Number of quadlets to write
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOFireWireLibCommandRef interface. See IOFireWireLibCommandRef.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateWriteQuadletCommand //test_ref/c/clm/CreateWriteQuadletCommand //test_ref/c/intfcm/CreateWriteQuadletCommand //test_ref/c/intfm/CreateWriteQuadletCommand //test_ref/c/func/CreateWriteQuadletCommand //test_ref/c/ftmplt/CreateWriteQuadletCommand //test_ref/c/defn/CreateWriteQuadletCommand //test_ref/c/macro/CreateWriteQuadletCommand //test_ref/doc/anysymbol/CreateWriteQuadletCommand" machineGenerated="true" --><span class="function">CreateWriteQuadletCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/quads //test_ref/c/tdef/quads //test_ref/c/tag/quads //test_ref/c/struct/quads //test_ref/c/intf/quads //test_ref/doc/anysymbol/quads" machineGenerated="true" --><span class="type">quads</span><!-- /a -->[],
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">numQuads</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand
	@abstract Create a quadlet compare/swap command object.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 32-bit value expected at target address
	@param newVal 32-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand //test_ref/c/clm/CreateCompareSwapCommand //test_ref/c/intfcm/CreateCompareSwapCommand //test_ref/c/intfm/CreateCompareSwapCommand //test_ref/c/func/CreateCompareSwapCommand //test_ref/c/ftmplt/CreateCompareSwapCommand //test_ref/c/defn/CreateCompareSwapCommand //test_ref/c/macro/CreateCompareSwapCommand //test_ref/doc/anysymbol/CreateCompareSwapCommand" machineGenerated="true" --><span class="function">CreateCompareSwapCommand</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --> <span class="type">*</span> <span class="param">addr</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>,
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- other methods ---------------------------</span> 
	    <span class="comment">/*!        @function BusReset
	@abstract Cause a bus reset</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/BusReset //test_ref/c/clm/BusReset //test_ref/c/intfcm/BusReset //test_ref/c/intfm/BusReset //test_ref/c/func/BusReset //test_ref/c/ftmplt/BusReset //test_ref/c/defn/BusReset //test_ref/c/macro/BusReset //test_ref/doc/anysymbol/BusReset" machineGenerated="true" --><span class="function">BusReset</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!        @function GetCycleTime
	@abstract Get bus cycle time.
	@param self The device interface to use.
	@param outCycleTime A pointer to a UInt32 to hold the result</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetCycleTime //test_ref/c/clm/GetCycleTime //test_ref/c/intfcm/GetCycleTime //test_ref/c/intfm/GetCycleTime //test_ref/c/func/GetCycleTime //test_ref/c/ftmplt/GetCycleTime //test_ref/c/defn/GetCycleTime //test_ref/c/macro/GetCycleTime //test_ref/doc/anysymbol/GetCycleTime" machineGenerated="true" --><span class="function">GetCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">/*!        @function GetGenerationAndNodeID
	@abstract (Obsolete) Get bus generation and remote device node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and/or GetRemoteNodeID() in
	interface v4.
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the generation result
	@param outNodeID A pointer to a UInt16 to hold the remote device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetGenerationAndNodeID //test_ref/c/clm/GetGenerationAndNodeID //test_ref/c/intfcm/GetGenerationAndNodeID //test_ref/c/intfm/GetGenerationAndNodeID //test_ref/c/func/GetGenerationAndNodeID //test_ref/c/ftmplt/GetGenerationAndNodeID //test_ref/c/defn/GetGenerationAndNodeID //test_ref/c/macro/GetGenerationAndNodeID //test_ref/doc/anysymbol/GetGenerationAndNodeID" machineGenerated="true" --><span class="function">GetGenerationAndNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outNodeID</span>);  
	    <span class="comment">/*!        @function GetLocalNodeID
	@abstract (Obsolete) Get local node ID.
	@discussion Obsolete -- Please use GetBusGeneration() and GetLocalNodeIDWithGeneration() in
	interface v4.
	@param self The device interface to use.
	@param outNodeID A pointer to a UInt16 to hold the local device node ID</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeID //test_ref/c/clm/GetLocalNodeID //test_ref/c/intfcm/GetLocalNodeID //test_ref/c/intfm/GetLocalNodeID //test_ref/c/func/GetLocalNodeID //test_ref/c/ftmplt/GetLocalNodeID //test_ref/c/defn/GetLocalNodeID //test_ref/c/macro/GetLocalNodeID //test_ref/doc/anysymbol/GetLocalNodeID" machineGenerated="true" --><span class="function">GetLocalNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span>);  
	    <span class="comment">/*!        @function GetResetTime
	@abstract Get time since last bus reset.
	@param self The device interface to use.
	@param outResetTime A pointer to an AbsolutTime to hold the result.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetResetTime //test_ref/c/clm/GetResetTime //test_ref/c/intfcm/GetResetTime //test_ref/c/intfm/GetResetTime //test_ref/c/func/GetResetTime //test_ref/c/ftmplt/GetResetTime //test_ref/c/defn/GetResetTime //test_ref/c/macro/GetResetTime //test_ref/doc/anysymbol/GetResetTime" machineGenerated="true" --><span class="function">GetResetTime</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/AbsoluteTime //test_ref/c/tdef/AbsoluteTime //test_ref/c/tag/AbsoluteTime //test_ref/c/struct/AbsoluteTime //test_ref/c/intf/AbsoluteTime //test_ref/doc/anysymbol/AbsoluteTime" machineGenerated="true" --><span class="type">AbsoluteTime</span><!-- /a --><span class="type">*</span> <span class="param">outResetTime</span>);  
	    <span class="comment">// --- unit directory support ------------------</span> 
	    <span class="comment">/*!        @function CreateLocalUnitDirectory
	@abstract Creates a local unit directory object and returns an interface to it. An
	instance of a unit directory object corresponds to an instance of a unit 
	directory in the local machine's configuration ROM.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created unit directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tdef/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/tag/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/struct/IOFireWireLibLocalUnitDirectoryRef //test_ref/c/intf/IOFireWireLibLocalUnitDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibLocalUnitDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalUnitDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalUnitDirectory //test_ref/c/clm/CreateLocalUnitDirectory //test_ref/c/intfcm/CreateLocalUnitDirectory //test_ref/c/intfm/CreateLocalUnitDirectory //test_ref/c/func/CreateLocalUnitDirectory //test_ref/c/ftmplt/CreateLocalUnitDirectory //test_ref/c/defn/CreateLocalUnitDirectory //test_ref/c/macro/CreateLocalUnitDirectory //test_ref/doc/anysymbol/CreateLocalUnitDirectory" machineGenerated="true" --><span class="function">CreateLocalUnitDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- config directory support ----------------</span> 
	    <span class="comment">/*!        @function GetConfigDirectory
	@abstract Creates a config directory object and returns an interface to it. The
	created config directory object represents the config directory in the remote
	device or unit to which the creating device interface is attached.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetConfigDirectory //test_ref/c/clm/GetConfigDirectory //test_ref/c/intfcm/GetConfigDirectory //test_ref/c/intfm/GetConfigDirectory //test_ref/c/func/GetConfigDirectory //test_ref/c/ftmplt/GetConfigDirectory //test_ref/c/defn/GetConfigDirectory //test_ref/c/macro/GetConfigDirectory //test_ref/doc/anysymbol/GetConfigDirectory" machineGenerated="true" --><span class="function">GetConfigDirectory</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateConfigDirectoryWithIOObject
	@abstract This function can be used to create a config directory object and a
	corresponding interface from an opaque IOObject reference. Some configuration
	directory interface methods may return an io_object_t instead of an
	IOFireWireLibConfigDirectoryRef. Use this function to obtain an 
	IOFireWireLibConfigDirectoryRef from an io_object_t.
	@param self The device interface to use.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created config directory object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibConfigDirectoryRef //test_ref/c/tdef/IOFireWireLibConfigDirectoryRef //test_ref/c/tag/IOFireWireLibConfigDirectoryRef //test_ref/c/struct/IOFireWireLibConfigDirectoryRef //test_ref/c/intf/IOFireWireLibConfigDirectoryRef //test_ref/doc/anysymbol/IOFireWireLibConfigDirectoryRef" machineGenerated="true" --><span class="type">IOFireWireLibConfigDirectoryRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateConfigDirectoryWithIOObject //test_ref/c/clm/CreateConfigDirectoryWithIOObject //test_ref/c/intfcm/CreateConfigDirectoryWithIOObject //test_ref/c/intfm/CreateConfigDirectoryWithIOObject //test_ref/c/func/CreateConfigDirectoryWithIOObject //test_ref/c/ftmplt/CreateConfigDirectoryWithIOObject //test_ref/c/defn/CreateConfigDirectoryWithIOObject //test_ref/c/macro/CreateConfigDirectoryWithIOObject //test_ref/doc/anysymbol/CreateConfigDirectoryWithIOObject" machineGenerated="true" --><span class="function">CreateConfigDirectoryWithIOObject</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">inObject</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- address space support -------------------</span> 
	    <span class="comment">/*!        @function CreatePseudoAddressSpace
	@abstract Creates a pseudo address space object and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine. 
	@param self The device interface to use.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePseudoAddressSpace //test_ref/c/clm/CreatePseudoAddressSpace //test_ref/c/intfcm/CreatePseudoAddressSpace //test_ref/c/intfm/CreatePseudoAddressSpace //test_ref/c/func/CreatePseudoAddressSpace //test_ref/c/ftmplt/CreatePseudoAddressSpace //test_ref/c/defn/CreatePseudoAddressSpace //test_ref/c/macro/CreatePseudoAddressSpace //test_ref/doc/anysymbol/CreatePseudoAddressSpace" machineGenerated="true" --><span class="function">CreatePseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreatePhysicalAddressSpace
	@abstract Creates a physical address space object and returns an interface to it. This
	will create a physical address space on the local machine. 
	@param self The device interface to use.
	@param inBackingStore An block of allocated memory representing the contents of the address space.
	@param inSize The size in bytes of this address space
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space. For future use -- always pass 0.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created physical address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/tag/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/struct/IOFireWireLibPhysicalAddressSpaceRef //test_ref/c/intf/IOFireWireLibPhysicalAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPhysicalAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPhysicalAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreatePhysicalAddressSpace //test_ref/c/clm/CreatePhysicalAddressSpace //test_ref/c/intfcm/CreatePhysicalAddressSpace //test_ref/c/intfm/CreatePhysicalAddressSpace //test_ref/c/func/CreatePhysicalAddressSpace //test_ref/c/ftmplt/CreatePhysicalAddressSpace //test_ref/c/defn/CreatePhysicalAddressSpace //test_ref/c/macro/CreatePhysicalAddressSpace //test_ref/doc/anysymbol/CreatePhysicalAddressSpace" machineGenerated="true" --><span class="function">CreatePhysicalAddressSpace</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireBugMsg //test_ref/c/clm/FireBugMsg //test_ref/c/intfcm/FireBugMsg //test_ref/c/intfm/FireBugMsg //test_ref/c/func/FireBugMsg //test_ref/c/ftmplt/FireBugMsg //test_ref/c/defn/FireBugMsg //test_ref/c/macro/FireBugMsg //test_ref/doc/anysymbol/FireBugMsg" machineGenerated="true" --><span class="function">FireBugMsg</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">msg</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v2 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- eye-sock-run-U.S. -----------------------</span> 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not function
	before this function is called. This functions is similar to 
	AddCallbackDispatcherToRunLoop. The passed CFRunLoop can be different
	from that passed to AddCallbackDispatcherToRunLoop. 
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoop //test_ref/c/func/AddIsochCallbackDispatcherToRunLoop //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoop //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoop //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoop //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoop" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>);  
	    <span class="comment">/*!        @function CreateRemoteIsochPort
	@abstract Creates a remote isochronous port object and returns an interface to it. A
	remote isochronous port object is an abstract entity used to represent a remote
	talker or listener device on an isochronous channel. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created remote isochronous port object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibRemoteIsochPortRef //test_ref/c/tdef/IOFireWireLibRemoteIsochPortRef //test_ref/c/tag/IOFireWireLibRemoteIsochPortRef //test_ref/c/struct/IOFireWireLibRemoteIsochPortRef //test_ref/c/intf/IOFireWireLibRemoteIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibRemoteIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibRemoteIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateRemoteIsochPort //test_ref/c/clm/CreateRemoteIsochPort //test_ref/c/intfcm/CreateRemoteIsochPort //test_ref/c/intfm/CreateRemoteIsochPort //test_ref/c/func/CreateRemoteIsochPort //test_ref/c/ftmplt/CreateRemoteIsochPort //test_ref/c/defn/CreateRemoteIsochPort //test_ref/c/macro/CreateRemoteIsochPort //test_ref/doc/anysymbol/CreateRemoteIsochPort" machineGenerated="true" --><span class="function">CreateRemoteIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateLocalIsochPort
	@abstract Creates a local isochronous port object and returns an interface to it. A
	local isochronous port object is an abstract entity used to represent a
	talking or listening endpoint in the local machine. 
	@param self The device interface to use.
	@param inTalking Pass true if this port represents an isochronous talker. Pass
	false if this port represents an isochronous listener.
	@param inDCLProgram A pointer to the first DCL command struct of the DCL program
	to be compiled and used to send or receive data on this port.
	@param inStartEvent Start event bits
	@param inStartState Start state bits
	@param inStartMask Start mask bits
	@param inDCLProgramRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the passed DCL program occupies. Pass a pointer to an array of IOVirtualRange
	structs or nil to ignore this parameter.
	@param inDCLProgramRangeCount The number of virtual ranges passed to inDCLProgramRanges.
	Pass 0 for none.
	@param inBufferRanges This is an optional optimization parameter which can be used
	to decrease the time the local port object spends determining which set of virtual
	ranges the data buffers referenced by the passed DCL program occupy. Pass a pointer
	to an array of IOVirtualRange structs or nil to ignore this parameter.
	@param inBufferRangeCount The number of virtual ranges passed to inBufferRanges.
	Pass 0 for none.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibLocalIsochPortRef //test_ref/c/tdef/IOFireWireLibLocalIsochPortRef //test_ref/c/tag/IOFireWireLibLocalIsochPortRef //test_ref/c/struct/IOFireWireLibLocalIsochPortRef //test_ref/c/intf/IOFireWireLibLocalIsochPortRef //test_ref/doc/anysymbol/IOFireWireLibLocalIsochPortRef" machineGenerated="true" --><span class="type">IOFireWireLibLocalIsochPortRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateLocalIsochPort //test_ref/c/clm/CreateLocalIsochPort //test_ref/c/intfcm/CreateLocalIsochPort //test_ref/c/intfm/CreateLocalIsochPort //test_ref/c/func/CreateLocalIsochPort //test_ref/c/ftmplt/CreateLocalIsochPort //test_ref/c/defn/CreateLocalIsochPort //test_ref/c/macro/CreateLocalIsochPort //test_ref/doc/anysymbol/CreateLocalIsochPort" machineGenerated="true" --><span class="function">CreateLocalIsochPort</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">inTalking</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inDCLProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartEvent</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartState</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inStartMask</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inDCLProgramRanges //test_ref/c/tdef/inDCLProgramRanges //test_ref/c/tag/inDCLProgramRanges //test_ref/c/struct/inDCLProgramRanges //test_ref/c/intf/inDCLProgramRanges //test_ref/doc/anysymbol/inDCLProgramRanges" machineGenerated="true" --><span class="type">inDCLProgramRanges</span><!-- /a -->[], <span class="comment">// optional optimization parameters</span> 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inDCLProgramRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOVirtualRange //test_ref/c/tdef/IOVirtualRange //test_ref/c/tag/IOVirtualRange //test_ref/c/struct/IOVirtualRange //test_ref/c/intf/IOVirtualRange //test_ref/doc/anysymbol/IOVirtualRange" machineGenerated="true" --><span class="type">IOVirtualRange</span><!-- /a --> <!-- a logicalPath="//test_ref/c/cl/inBufferRanges //test_ref/c/tdef/inBufferRanges //test_ref/c/tag/inBufferRanges //test_ref/c/struct/inBufferRanges //test_ref/c/intf/inBufferRanges //test_ref/doc/anysymbol/inBufferRanges" machineGenerated="true" --><span class="type">inBufferRanges</span><!-- /a -->[], 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inBufferRangeCount</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!        @function CreateIsochChannel
	@abstract Creates an isochronous channel object and returns an interface to it. An
	isochronous channel object is an abstract entity used to represent a
	FireWire isochronous channel. 
	@param self The device interface to use.
	@param doIRM Controls whether the channel automatically performs IRM operations. 
	Pass true if the channel should allocate its channel and bandwidth with
	the IRM. Pass false to ignore the IRM.
	@param packetSize Size in bytes of packets being sent or received with this channel.
	This is automatically translated into a bandwidth allocation appropriate
	for the speed passed in prefSpeed.
	@param prefSpeed The preferred bus speed of this channel.
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibIsochChannelRef //test_ref/c/tdef/IOFireWireLibIsochChannelRef //test_ref/c/tag/IOFireWireLibIsochChannelRef //test_ref/c/struct/IOFireWireLibIsochChannelRef //test_ref/c/intf/IOFireWireLibIsochChannelRef //test_ref/doc/anysymbol/IOFireWireLibIsochChannelRef" machineGenerated="true" --><span class="type">IOFireWireLibIsochChannelRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateIsochChannel //test_ref/c/clm/CreateIsochChannel //test_ref/c/intfcm/CreateIsochChannel //test_ref/c/intfm/CreateIsochChannel //test_ref/c/func/CreateIsochChannel //test_ref/c/ftmplt/CreateIsochChannel //test_ref/c/defn/CreateIsochChannel //test_ref/c/macro/CreateIsochChannel //test_ref/doc/anysymbol/CreateIsochChannel" machineGenerated="true" --><span class="function">CreateIsochChannel</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">doIrm</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">packetSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --> <span class="param">prefSpeed</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">/*!        @function CreateDCLCommandPool
	@abstract Creates a command pool object and returns an interface to it. The command 
	pool can be used to build DCL programs.
	@param self The device interface to use.
	@param size Starting size of command pool
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDCLCommandPoolRef //test_ref/c/tdef/IOFireWireLibDCLCommandPoolRef //test_ref/c/tag/IOFireWireLibDCLCommandPoolRef //test_ref/c/struct/IOFireWireLibDCLCommandPoolRef //test_ref/c/intf/IOFireWireLibDCLCommandPoolRef //test_ref/doc/anysymbol/IOFireWireLibDCLCommandPoolRef" machineGenerated="true" --><span class="type">IOFireWireLibDCLCommandPoolRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateDCLCommandPool //test_ref/c/clm/CreateDCLCommandPool //test_ref/c/intfcm/CreateDCLCommandPool //test_ref/c/intfm/CreateDCLCommandPool //test_ref/c/func/CreateDCLCommandPool //test_ref/c/ftmplt/CreateDCLCommandPool //test_ref/c/defn/CreateDCLCommandPool //test_ref/c/macro/CreateDCLCommandPool //test_ref/doc/anysymbol/CreateDCLCommandPool" machineGenerated="true" --><span class="function">CreateDCLCommandPool</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span> );  
	    <span class="comment">// --- refcons ---------------------------------</span> 
	    <span class="comment">/*!        @function GetRefCon
	@abstract Get user reference value set on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> <span class="type">*</span>(<span class="type">*</span><!-- a logicalPath="//test_ref/c/econst/GetRefCon //test_ref/c/data/GetRefCon //test_ref/c/clconst/GetRefCon " machineGenerated="true" --><span class="var">GetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>); 
	    <span class="comment">/*!        @function SetRefCon
	@abstract Set user reference value on this interface
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/SetRefCon //test_ref/c/clm/SetRefCon //test_ref/c/intfcm/SetRefCon //test_ref/c/intfm/SetRefCon //test_ref/c/func/SetRefCon //test_ref/c/ftmplt/SetRefCon //test_ref/c/defn/SetRefCon //test_ref/c/macro/SetRefCon //test_ref/doc/anysymbol/SetRefCon" machineGenerated="true" --><span class="function">SetRefCon</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">refCon</span>);  
	    <span class="comment">// --- debugging -------------------------------</span> 
	    <span class="comment">// do not use this function</span> 
	    <!-- a logicalPath="//test_ref/c/cl/CFTypeRef //test_ref/c/tdef/CFTypeRef //test_ref/c/tag/CFTypeRef //test_ref/c/struct/CFTypeRef //test_ref/c/intf/CFTypeRef //test_ref/doc/anysymbol/CFTypeRef" machineGenerated="true" --><span class="type">CFTypeRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetDebugProperty //test_ref/c/clm/GetDebugProperty //test_ref/c/intfcm/GetDebugProperty //test_ref/c/intfm/GetDebugProperty //test_ref/c/func/GetDebugProperty //test_ref/c/ftmplt/GetDebugProperty //test_ref/c/defn/GetDebugProperty //test_ref/c/macro/GetDebugProperty //test_ref/doc/anysymbol/GetDebugProperty" machineGenerated="true" --><span class="function">GetDebugProperty</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">interface</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inPropertyName</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFTypeID //test_ref/c/tdef/CFTypeID //test_ref/c/tag/CFTypeID //test_ref/c/struct/CFTypeID //test_ref/c/intf/CFTypeID //test_ref/doc/anysymbol/CFTypeID" machineGenerated="true" --><span class="type">CFTypeID</span><!-- /a --><span class="type">*</span> <span class="param">outPropertyType</span>);  
	    <span class="comment">/*!        @function PrintDCLProgram
	@abstract Walk a DCL program linked list and print its contents
	@param self The device interface to use.
	@param inProgram A pointer to the first DCL of the program to print
	@param inLength Number of DCLs expected in the program. PrintDCLProgram() will
	report an error if this number does not match the number of DCLs found</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/PrintDCLProgram //test_ref/c/clm/PrintDCLProgram //test_ref/c/intfcm/PrintDCLProgram //test_ref/c/intfm/PrintDCLProgram //test_ref/c/func/PrintDCLProgram //test_ref/c/ftmplt/PrintDCLProgram //test_ref/c/defn/PrintDCLProgram //test_ref/c/macro/PrintDCLProgram //test_ref/doc/anysymbol/PrintDCLProgram" machineGenerated="true" --><span class="function">PrintDCLProgram</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/DCLCommandPtr //test_ref/c/tdef/DCLCommandPtr //test_ref/c/tag/DCLCommandPtr //test_ref/c/struct/DCLCommandPtr //test_ref/c/intf/DCLCommandPtr //test_ref/doc/anysymbol/DCLCommandPtr" machineGenerated="true" --><span class="type">DCLCommandPtr</span><!-- /a --> <span class="param">inProgram</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inLength</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// NOTE: the following methods available only in interface v3 and later</span> 
	    <span class="comment">//</span>  
	    <span class="comment">// --- v3 functions ----------</span> 
	    <span class="comment">/*!        @function CreateInitialUnitsPseudoAddressSpace
	@abstract Creates a pseudo address space in initial units space.
	@discussion Creates a pseudo address space object in initial units space and returns an interface to it. This
	will create a pseudo address space (software-backed) on the local machine.
	
	Availablilty: IOFireWireDeviceInterface_v3,  and newer
	
	@param self The device interface to use.
	@param inAddressLo The lower 32 bits of the base address of the address space to be created. The address is always
	in initial units space.
	@param inSize The size in bytes of this address space
	@param inRefCon A user specified reference value. This will be passed to all callback functions.
	@param inQueueBufferSize The size of the queue which receives packets from the bus before they are handed to
	the client and/or put in the backing store. A larger queue can help eliminate dropped packets
	when receiving large bursts of data. When a packet is received which can not fit into the queue, 
	the packet dropped callback will be called. 
	@param inBackingStore An optional block of allocated memory representing the contents of the address space.
	@param inFlags A UInt32 with bits set corresponding to the flags that should be set
	for this address space.
	&lt;ul&gt;
	&lt;li&gt;kFWAddressSpaceNoFlags -- All flags off&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoWriteAccess -- Write access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceNoReadAccess -- Read access access to this address space will be disallowed. 
	Setting this flag also disables compare/swap transactions on this address space.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoWriteReply -- Writes will be made automatically, directly modifying the contents
	of the backing store. The user process will not be notified of writes.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoReadReply -- Reads to this address space will be answered automagically
	using the contents of the backing store. The user process will not be notified of reads.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceAutoCopyOnWrite -- Writes to this address space will be made directly
	to the backing store at the same time the user process is notified of a write. Clients
	will only be notified of a write if kFWAddressSpaceAutoWriteReply is not set.&lt;/li&gt;
	&lt;li&gt;kFWAddressSpaceShareIfExists -- Allows creation of this address space even if another client
	already has an address space at the requested address. All clients will be notified of writes to
	covered addresses.&lt;/li&gt;
	&lt;/ul&gt;
	@param iid An ID number, of type CFUUIDBytes (see CFUUID.h), identifying the
	type of interface to be returned for the created pseudo address space object.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tdef/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/tag/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/struct/IOFireWireLibPseudoAddressSpaceRef //test_ref/c/intf/IOFireWireLibPseudoAddressSpaceRef //test_ref/doc/anysymbol/IOFireWireLibPseudoAddressSpaceRef" machineGenerated="true" --><span class="type">IOFireWireLibPseudoAddressSpaceRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/clm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfcm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/intfm/CreateInitialUnitsPseudoAddressSpace //test_ref/c/func/CreateInitialUnitsPseudoAddressSpace //test_ref/c/ftmplt/CreateInitialUnitsPseudoAddressSpace //test_ref/c/defn/CreateInitialUnitsPseudoAddressSpace //test_ref/c/macro/CreateInitialUnitsPseudoAddressSpace //test_ref/doc/anysymbol/CreateInitialUnitsPseudoAddressSpace" machineGenerated="true" --><span class="function">CreateInitialUnitsPseudoAddressSpace</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inAddressLo</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inQueueBufferSize</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inBackingStore</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">inFlags</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>); 
	    <span class="comment">/*!
	@function AddCallbackDispatcherToRunLoopForMode
	@abstract Add a run loop event source to allow IOFireWireLib callbacks to function.
	@discussion Installs the proper run loop event source to allow callbacks to function. This method
	must be called before callback notifications for this interface or any interfaces
	created using this interface can function. With this function, you can additionally specify
	for which run loop modes this source should be added.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop The run loop on which to install the event source
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!        @function AddIsochCallbackDispatcherToRunLoop
	@abstract Add a run loop event source to allow IOFireWireLib isoch callbacks to function.
	@discussion This function adds an event source for the isochronous callback dispatcher
	to the specified CFRunLoop. Isochronous related callbacks will not be called unless
	this function has been called. This function is similar to AddCallbackDispatcherToRunLoop. 
	The passed CFRunLoop can be different from that passed to AddCallbackDispatcherToRunLoop. 
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.
	@param inRunLoop A CFRunLoopRef for the run loop to which the event loop source 
	should be added
	@param inRunLoopMode The run loop mode(s) for which to install the event source</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/clm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfcm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/intfm/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/func/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/ftmplt/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/defn/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/c/macro/AddIsochCallbackDispatcherToRunLoopForMode //test_ref/doc/anysymbol/AddIsochCallbackDispatcherToRunLoopForMode" machineGenerated="true" --><span class="function">AddIsochCallbackDispatcherToRunLoopForMode</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFRunLoopRef //test_ref/c/tdef/CFRunLoopRef //test_ref/c/tag/CFRunLoopRef //test_ref/c/struct/CFRunLoopRef //test_ref/c/intf/CFRunLoopRef //test_ref/doc/anysymbol/CFRunLoopRef" machineGenerated="true" --><span class="type">CFRunLoopRef</span><!-- /a --> <span class="param">inRunLoop</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/CFStringRef //test_ref/c/tdef/CFStringRef //test_ref/c/tag/CFStringRef //test_ref/c/struct/CFStringRef //test_ref/c/intf/CFStringRef //test_ref/doc/anysymbol/CFStringRef" machineGenerated="true" --><span class="type">CFStringRef</span><!-- /a --> <span class="param">inRunLoopMode</span> ); 
	    <span class="comment">/*!
	@function RemoveIsochCallbackDispatcherFromRunLoop
	@abstract Removes an IOFireWireLib-added run loop event source.
	@discussion Reverses the effects of AddIsochCallbackDispatcherToRunLoop(). This method removes 
	the run loop event source that was added to the specified run loop preventing any 
	future callbacks from being called.
	
	Availability: IOFireWireDeviceInterface_v3, and newer
	
	@param self The device interface to use.                        </span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/clm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfcm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/intfm/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/func/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/ftmplt/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/defn/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/c/macro/RemoveIsochCallbackDispatcherFromRunLoop //test_ref/doc/anysymbol/RemoveIsochCallbackDispatcherFromRunLoop" machineGenerated="true" --><span class="function">RemoveIsochCallbackDispatcherFromRunLoop</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>);  
	    <span class="comment">/*!
	@function Seize
	@abstract Seize control of device/unit
	@discussion Allows a user space client to seize control of an in-kernel service even if
	that service has been Opened() by another client or in-kernel driver. This function should be
	used with care. Admin rights are required to use this function.
	
	Calling this method makes it appear to all other drivers that the device has been unplugged.
	Open() should be called after this method has been invoked.
	
	When access is complete, Close() and then IOServiceRequestProbe() should be called to restore 
	normal operation. Calling IOServiceRequestProbe() makes it appear that the device has been "re-plugged."
	@param self The device interface to use.
	@param reserved Reserved for future use. Set to NULL.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/Seize //test_ref/c/clm/Seize //test_ref/c/intfcm/Seize //test_ref/c/intfm/Seize //test_ref/c/func/Seize //test_ref/c/ftmplt/Seize //test_ref/c/defn/Seize //test_ref/c/macro/Seize //test_ref/doc/anysymbol/Seize" machineGenerated="true" --><span class="function">Seize</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/IOOptionBits //test_ref/c/tdef/IOOptionBits //test_ref/c/tag/IOOptionBits //test_ref/c/struct/IOOptionBits //test_ref/c/intf/IOOptionBits //test_ref/doc/anysymbol/IOOptionBits" machineGenerated="true" --><span class="type">IOOptionBits</span><!-- /a --> <span class="param">inFlags</span>, 
	        ... );  
	    <span class="comment">/*!
	@function FireLog
	@abstract Logs string to in-kernel debug buffer
	@param self The device interface to use.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/FireLog //test_ref/c/clm/FireLog //test_ref/c/intfcm/FireLog //test_ref/c/intfm/FireLog //test_ref/c/func/FireLog //test_ref/c/ftmplt/FireLog //test_ref/c/defn/FireLog //test_ref/c/macro/FireLog //test_ref/doc/anysymbol/FireLog" machineGenerated="true" --><span class="function">FireLog</span><!-- /a -->)( 
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>, 
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/char //test_ref/c/tdef/char //test_ref/c/tag/char //test_ref/c/struct/char //test_ref/c/intf/char //test_ref/doc/anysymbol/char" machineGenerated="true" --><span class="type">char</span><!-- /a --><span class="type">*</span> <span class="param">format</span>, 
	        ... );  
	    <span class="comment">/*!        @function GetBusCycleTime
	@abstract Get bus and cycle time.
	@param self The device interface to use.
	@param outBusTime A pointer to a UInt32 to hold the bus time
	@param outCycleTime A pointer to a UInt32 to hold the cycle time</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusCycleTime //test_ref/c/clm/GetBusCycleTime //test_ref/c/intfcm/GetBusCycleTime //test_ref/c/intfm/GetBusCycleTime //test_ref/c/func/GetBusCycleTime //test_ref/c/ftmplt/GetBusCycleTime //test_ref/c/defn/GetBusCycleTime //test_ref/c/macro/GetBusCycleTime //test_ref/doc/anysymbol/GetBusCycleTime" machineGenerated="true" --><span class="function">GetBusCycleTime</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outBusTime</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outCycleTime</span>);  
	    <span class="comment">//</span> 
	    <span class="comment">// v4</span> 
	    <span class="comment">//</span>  
	    <span class="comment">/*!
	@function CreateCompareSwapCommand64
	@abstract Create a quadlet compare/swap command object and initialize it with 64-bit values.
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported. Setting the callback value to nil defaults to synchronous execution.
	@param addr Command target address
	@param cmpVal 64-bit value expected at target address
	@param newVal 64-bit value to be set at target address
	@param callback Command completion callback.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandRef //test_ref/c/tdef/IOFireWireLibCommandRef //test_ref/c/tag/IOFireWireLibCommandRef //test_ref/c/struct/IOFireWireLibCommandRef //test_ref/c/intf/IOFireWireLibCommandRef //test_ref/doc/anysymbol/IOFireWireLibCommandRef" machineGenerated="true" --><span class="type">IOFireWireLibCommandRef</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CreateCompareSwapCommand64 //test_ref/c/clm/CreateCompareSwapCommand64 //test_ref/c/intfcm/CreateCompareSwapCommand64 //test_ref/c/intfm/CreateCompareSwapCommand64 //test_ref/c/func/CreateCompareSwapCommand64 //test_ref/c/ftmplt/CreateCompareSwapCommand64 //test_ref/c/defn/CreateCompareSwapCommand64 //test_ref/c/macro/CreateCompareSwapCommand64 //test_ref/doc/anysymbol/CreateCompareSwapCommand64" machineGenerated="true" --><span class="function">CreateCompareSwapCommand64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">cmpVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt64 //test_ref/c/tdef/UInt64 //test_ref/c/tag/UInt64 //test_ref/c/struct/UInt64 //test_ref/c/intf/UInt64 //test_ref/doc/anysymbol/UInt64" machineGenerated="true" --><span class="type">UInt64</span><!-- /a --> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibCommandCallback //test_ref/c/tdef/IOFireWireLibCommandCallback //test_ref/c/tag/IOFireWireLibCommandCallback //test_ref/c/struct/IOFireWireLibCommandCallback //test_ref/c/intf/IOFireWireLibCommandCallback //test_ref/doc/anysymbol/IOFireWireLibCommandCallback" machineGenerated="true" --><span class="type">IOFireWireLibCommandCallback</span><!-- /a --> <span class="param">callback</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>,
	        <!-- a logicalPath="//test_ref/c/cl/void //test_ref/c/tdef/void //test_ref/c/tag/void //test_ref/c/struct/void //test_ref/c/intf/void //test_ref/doc/anysymbol/void" machineGenerated="true" --><span class="type">void</span><!-- /a --><span class="type">*</span> <span class="param">inRefCon</span>,
	        <!-- a logicalPath="//test_ref/c/cl/REFIID //test_ref/c/tdef/REFIID //test_ref/c/tag/REFIID //test_ref/c/struct/REFIID //test_ref/c/intf/REFIID //test_ref/doc/anysymbol/REFIID" machineGenerated="true" --><span class="type">REFIID</span><!-- /a --> <span class="param">iid</span>);  
	    <span class="comment">/*!
	@function CompareSwap64
	@abstract Perform synchronous lock operation
	@param self The device interface to use.
	@param device The service (representing an attached FireWire device) to which to write.
	For 48-bit, device relative addressing, pass the service used to create the device interface. This
	can be obtained by calling GetDevice(). For 64-bit absolute addressing, pass 0. Other values are
	unsupported.
	
	If the quadlets stored at 'oldVal' match those passed to 'expectedVal', the lock operation was
	successful.
	@param addr Command target address
	@param expectedVal Pointer to quadlets expected at target.
	@param newVal Pointer to quadlets to atomically set at target if compare is successful.
	@param oldVal Pointer to quadlets to hold value found at target address after transaction if completed.
	@param size Size in bytes of compare swap transaction to perform. Value values are 4 and 8.
	@param failOnReset Pass true if the command should only be executed during the FireWire bus generation
	specified in 'generation'. Pass false to ignore the generation parameter. The generation can be
	obtained by calling GetGenerationAndNodeID()
	@param generation The FireWire bus generation during which the command should be executed. Ignored
	if failOnReset is false.
	@result An IOReturn error code</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/CompareSwap64 //test_ref/c/clm/CompareSwap64 //test_ref/c/intfcm/CompareSwap64 //test_ref/c/intfm/CompareSwap64 //test_ref/c/func/CompareSwap64 //test_ref/c/ftmplt/CompareSwap64 //test_ref/c/defn/CompareSwap64 //test_ref/c/macro/CompareSwap64 //test_ref/doc/anysymbol/CompareSwap64" machineGenerated="true" --><span class="function">CompareSwap64</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/io_object_t //test_ref/c/tdef/io_object_t //test_ref/c/tag/io_object_t //test_ref/c/struct/io_object_t //test_ref/c/intf/io_object_t //test_ref/doc/anysymbol/io_object_t" machineGenerated="true" --><span class="type">io_object_t</span><!-- /a --> <span class="param">device</span>,
	        <span class="keyword">const</span> <!-- a logicalPath="//test_ref/c/cl/FWAddress //test_ref/c/tdef/FWAddress //test_ref/c/tag/FWAddress //test_ref/c/struct/FWAddress //test_ref/c/intf/FWAddress //test_ref/doc/anysymbol/FWAddress" machineGenerated="true" --><span class="type">FWAddress</span><!-- /a --><span class="type">*</span> <span class="param">addr</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">expectedVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">newVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">oldVal</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOByteCount //test_ref/c/tdef/IOByteCount //test_ref/c/tag/IOByteCount //test_ref/c/struct/IOByteCount //test_ref/c/intf/IOByteCount //test_ref/doc/anysymbol/IOByteCount" machineGenerated="true" --><span class="type">IOByteCount</span><!-- /a --> <span class="param">size</span>, 
	        <!-- a logicalPath="//test_ref/c/cl/Boolean //test_ref/c/tdef/Boolean //test_ref/c/tag/Boolean //test_ref/c/struct/Boolean //test_ref/c/intf/Boolean //test_ref/doc/anysymbol/Boolean" machineGenerated="true" --><span class="type">Boolean</span><!-- /a --> <span class="param">failOnReset</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">generation</span>);  
	    <span class="comment">/*!        @function GetBusGeneration
	@abstract Get bus generation number.
	@discussion The bus generation number stays constant between bus resets and can be
	used in combination with a FireWire node ID to uniquely identify nodes on the bus.
	Pass the generation number to functions that take or return FireWire node IDs.
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param outGeneration A pointer to a UInt32 to hold the bus generation  number</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetBusGeneration //test_ref/c/clm/GetBusGeneration //test_ref/c/intfcm/GetBusGeneration //test_ref/c/intfm/GetBusGeneration //test_ref/c/func/GetBusGeneration //test_ref/c/ftmplt/GetBusGeneration //test_ref/c/defn/GetBusGeneration //test_ref/c/macro/GetBusGeneration //test_ref/doc/anysymbol/GetBusGeneration" machineGenerated="true" --><span class="function">GetBusGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --><span class="type">*</span> <span class="param">outGeneration</span> );  
	    <span class="comment">/*!        @function GetLocalNodeIDWithGeneration
	@abstract Get node ID of local machine.
	@discussion Use this function instead of GetLocalNodeID().
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outLocalNodeID A pointer to a UInt16 to hold the node ID of the local machine.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outLocalNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetLocalNodeIDWithGeneration //test_ref/c/clm/GetLocalNodeIDWithGeneration //test_ref/c/intfcm/GetLocalNodeIDWithGeneration //test_ref/c/intfm/GetLocalNodeIDWithGeneration //test_ref/c/func/GetLocalNodeIDWithGeneration //test_ref/c/ftmplt/GetLocalNodeIDWithGeneration //test_ref/c/defn/GetLocalNodeIDWithGeneration //test_ref/c/macro/GetLocalNodeIDWithGeneration //test_ref/doc/anysymbol/GetLocalNodeIDWithGeneration" machineGenerated="true" --><span class="function">GetLocalNodeIDWithGeneration</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outLocalNodeID</span> );  
	    <span class="comment">/*!        @function GetRemoteNodeID
	@abstract Get node ID of device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outRemoteNodeID A pointer to a UInt16 to hold the node ID of the remote device.
	@result Returns kIOReturnSuccess if a valid nodeID has been returned in 'outRemoteNodeID'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetRemoteNodeID //test_ref/c/clm/GetRemoteNodeID //test_ref/c/intfcm/GetRemoteNodeID //test_ref/c/intfm/GetRemoteNodeID //test_ref/c/func/GetRemoteNodeID //test_ref/c/ftmplt/GetRemoteNodeID //test_ref/c/defn/GetRemoteNodeID //test_ref/c/macro/GetRemoteNodeID //test_ref/doc/anysymbol/GetRemoteNodeID" machineGenerated="true" --><span class="function">GetRemoteNodeID</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --><span class="type">*</span> <span class="param">outRemoteNodeID</span> );  
	    <span class="comment">/*!        @function GetSpeedToNode
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum speed to the remote device.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedToNode //test_ref/c/clm/GetSpeedToNode //test_ref/c/intfcm/GetSpeedToNode //test_ref/c/intfm/GetSpeedToNode //test_ref/c/func/GetSpeedToNode //test_ref/c/ftmplt/GetSpeedToNode //test_ref/c/defn/GetSpeedToNode //test_ref/c/macro/GetSpeedToNode //test_ref/doc/anysymbol/GetSpeedToNode" machineGenerated="true" --><span class="function">GetSpeedToNode</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	    <span class="comment">/*!        @function GetSpeedBetweenNodes
	@abstract Get maximum transfer speed to device to which this interface is attached.
	@discussion
	
	Availability: IOFireWireDeviceInterface_v4 and newer
	
	@param self The device interface to use.
	@param checkGeneration A bus generation number obtained from GetBusGeneration()
	@param srcNodeID A FireWire node ID.
	@param destNodeID A FireWire node ID.
	@param outSpeed A pointer to an IOFWSpeed to hold the maximum transfer speed between node 'srcNodeID' and 'destNodeID'.
	@result Returns kIOReturnSuccess if a valid speed has been returned in 'outSpeed'. Returns</span>
	        <span class="comment">*/</span>
	    <!-- a logicalPath="//test_ref/c/cl/IOReturn //test_ref/c/tdef/IOReturn //test_ref/c/tag/IOReturn //test_ref/c/struct/IOReturn //test_ref/c/intf/IOReturn //test_ref/doc/anysymbol/IOReturn" machineGenerated="true" --><span class="type">IOReturn</span><!-- /a --> (<span class="type">*</span><!-- a logicalPath="//test_ref/c/instm/GetSpeedBetweenNodes //test_ref/c/clm/GetSpeedBetweenNodes //test_ref/c/intfcm/GetSpeedBetweenNodes //test_ref/c/intfm/GetSpeedBetweenNodes //test_ref/c/func/GetSpeedBetweenNodes //test_ref/c/ftmplt/GetSpeedBetweenNodes //test_ref/c/defn/GetSpeedBetweenNodes //test_ref/c/macro/GetSpeedBetweenNodes //test_ref/doc/anysymbol/GetSpeedBetweenNodes" machineGenerated="true" --><span class="function">GetSpeedBetweenNodes</span><!-- /a -->)(
	        <!-- a logicalPath="//test_ref/c/cl/IOFireWireLibDeviceRef //test_ref/c/tdef/IOFireWireLibDeviceRef //test_ref/c/tag/IOFireWireLibDeviceRef //test_ref/c/struct/IOFireWireLibDeviceRef //test_ref/c/intf/IOFireWireLibDeviceRef //test_ref/doc/anysymbol/IOFireWireLibDeviceRef" machineGenerated="true" --><span class="type">IOFireWireLibDeviceRef</span><!-- /a --> <span class="param">self</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt32 //test_ref/c/tdef/UInt32 //test_ref/c/tag/UInt32 //test_ref/c/struct/UInt32 //test_ref/c/intf/UInt32 //test_ref/doc/anysymbol/UInt32" machineGenerated="true" --><span class="type">UInt32</span><!-- /a --> <span class="param">checkGeneration</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">srcNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/UInt16 //test_ref/c/tdef/UInt16 //test_ref/c/tag/UInt16 //test_ref/c/struct/UInt16 //test_ref/c/intf/UInt16 //test_ref/doc/anysymbol/UInt16" machineGenerated="true" --><span class="type">UInt16</span><!-- /a --> <span class="param">destNodeID</span>,
	        <!-- a logicalPath="//test_ref/c/cl/IOFWSpeed //test_ref/c/tdef/IOFWSpeed //test_ref/c/tag/IOFWSpeed //test_ref/c/struct/IOFWSpeed //test_ref/c/intf/IOFWSpeed //test_ref/doc/anysymbol/IOFWSpeed" machineGenerated="true" --><span class="type">IOFWSpeed</span><!-- /a --><span class="type">*</span> <span class="param">outSpeed</span>);  
	} <!-- a logicalPath="//test_ref/c/econst/IOFireWireDeviceInterface //test_ref/c/data/IOFireWireDeviceInterface //test_ref/c/clconst/IOFireWireDeviceInterface " machineGenerated="true" --><span class="var">IOFireWireDeviceInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireUnitInterface //test_ref/c/data/IOFireWireUnitInterface //test_ref/c/clconst/IOFireWireUnitInterface " machineGenerated="true" --><span class="var">IOFireWireUnitInterface</span><!-- /a -->, <!-- a logicalPath="//test_ref/c/econst/IOFireWireNubInterface //test_ref/c/data/IOFireWireNubInterface //test_ref/c/clconst/IOFireWireNubInterface " machineGenerated="true" --><span class="var">IOFireWireNubInterface</span><!-- /a -->;  
END OF OBJECT



_$97|/Users/dg/headerdoc-techpubs/Modules/HeaderDoc//../../testsuite/parser_tests/COM_interface_1.test$1|C$15|COM interface 1$1|C$6|parser