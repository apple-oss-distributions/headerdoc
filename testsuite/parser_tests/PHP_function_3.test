FrT;@1|>>0|$15|HeaderDoc::Test%26|$4|CODE$7|COMMENT$7|CPPCODE$15|EXPECTED_RESULT$23|EXPECTED_RESULT_ALLDECS$7|FAILMSG$8|FILENAME$4|LANG$4|NAME$6|RESULT$14|RESULT_ALLDECS$7|SUBLANG$4|TYPE$1246|function handle_raw($file, $force=0)
{
        $shellfile = escapeshellarg($file);
        $ret = 0;

        /* This is a test comment. */

        if ($force || !file_exists("MiniCache/rotated/$file.jpg")) {
                # $rotint = (int)getrotation($file);
                $fileInfo = getFileInfo($file);
                $rotint = $fileInfo['rotation'];
                // die("AUTOWB: ".$fileInfo['enableAWB']." AUTOEXPOSURE ".$fileInfo['enableAE']."\n");
                if ($fileInfo['enableAWB']) {
                        $awbflag = "-a";
                } else {
                        $awbflag = "-w";
                }
                if ($fileInfo['enableAE']) {
                        $aeflag = "";
                } else {
                        $aeflag = "-W";
                }
                $rot = "";
                if ($rotint) {
                        $rot = "-R $rotint";                }
                // die("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.jpg 2>/dev/null");
                system("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.j
pg 2>/dev/null", $ret);
        }
        return $file.".jpg";
}
$129|/*! Processes a Camera RAW file into a "rotated" JPEG image for further
    scaling and manipulation with the usual methods.
 */
$0|$10868|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 0
inInterface: 0
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 0
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 1
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/PHP_function_3.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{FULLPATH} => /test_suite_bogus_path/PHP_function_3.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => 
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 0
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => handle_raw
$parserState->{functionContents} => {
        $shellfile = escapeshellarg($file);
        $ret = 0;

        /* This is a test comment. */

        if ($force || !file_exists("MiniCache/rotated/$file.jpg")) {
                # $rotint = (int)getrotation($file);
                $fileInfo = getFileInfo($file);
                $rotint = $fileInfo['rotation'];
                // die("AUTOWB: ".$fileInfo['enableAWB']." AUTOEXPOSURE ".$fileInfo['enableAE']."\n");
                if ($fileInfo['enableAWB']) {
                        $awbflag = "-a";
                } else {
                        $awbflag = "-w";
                }
                if ($fileInfo['enableAE']) {
                        $aeflag = "";
                } else {
                        $aeflag = "-W";
                }
                $rot = "";
                if ($rotint) {
                        $rot = "-R $rotint";                }
                // die("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.jpg 2>/dev/null");
                system("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.j
pg 2>/dev/null", $ret);
        }
        return $file.".jpg";
}

$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 31
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => php
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => 
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => 
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 2
$parserState->{onlyComments} => 0
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 0
$parserState->{posstypes} => 
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{prekeywordsodname} => 
$parserState->{prekeywordsodtype} => 
$parserState->{returntype} => function
$parserState->{seenBraces} => 1
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => function
$parserState->{sodname} => handle_raw
$parserState->{sodtype} =>  function
$parserState->{stackFrozen} => 1
$parserState->{startOfDec} => 0
$parserState->{temponlyComments} => 0
$parserState->{typestring} => function
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 31
typelist: function
namelist: handle_raw
posstypes: function method
value: 
returntype:  function
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 0
conformsToList: 
functionContents: {
        $shellfile = escapeshellarg($file);
        $ret = 0;

        /* This is a test comment. */

        if ($force || !file_exists("MiniCache/rotated/$file.jpg")) {
                # $rotint = (int)getrotation($file);
                $fileInfo = getFileInfo($file);
                $rotint = $fileInfo['rotation'];
                // die("AUTOWB: ".$fileInfo['enableAWB']." AUTOEXPOSURE ".$fileInfo['enableAE']."\n");
                if ($fileInfo['enableAWB']) {
                        $awbflag = "-a";
                } else {
                        $awbflag = "-w";
                }
                if ($fileInfo['enableAE']) {
                        $aeflag = "";
                } else {
                        $aeflag = "-W";
                }
                $rot = "";
                if ($rotint) {
                        $rot = "-R $rotint";                }
                // die("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.jpg 2>/dev/null");
                system("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.j
pg 2>/dev/null", $ret);
        }
        return $file.".jpg";
}

extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => $file
Parsed Param 1 => $force=0
-=: DUMP OF PARSE TREE :=-
+---function
+--- 
+---handle_raw
+---(
|   +---$
|   +---file
|   +---,
|   +--- 
|   +---$
|   +---force
|   +---=
|   +---0
|   +---)
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: PHP function 3
APIUID: //test_ref/doc/header/PHP_function_3.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: <p></p>
LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Function
    NAME: handle_raw
    APIUID: //test_ref/php/func/handle_raw
    ABSTRACT: ""
    DISCUSSION: "<p>Processes a Camera RAW file into a "rotated" JPEG image for further
scaling and manipulation with the usual methods.
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: "default_function_group"
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: " function"
    LINENUM: ""
    CLASS: "HeaderDoc::Function"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "1"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: file
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: force
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: handle_raw (HeaderDoc::Function)
+---function
+--- 
+---handle_raw
+---(
|   +---$
|   +---file
|   +---,
|   +--- 
|   +---$
|   +---force
|   +---=
|   +---0
|   +---)
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: handle_raw (HeaderDoc::Function)
	<span class="keyword">function</span> <!-- a logicalPath="//test_ref/php/instm/handle_raw //test_ref/php/clm/handle_raw //test_ref/php/intfcm/handle_raw //test_ref/php/intfm/handle_raw //test_ref/php/func/handle_raw //test_ref/php/ftmplt/handle_raw //test_ref/php/defn/handle_raw //test_ref/php/macro/handle_raw" --><span class="function">handle_raw</span><!-- /a -->(
	    $<span class="param">file</span>,
	    $<!-- a logicalPath="//test_ref/php/cl/force //test_ref/php/tdef/force //test_ref/php/tag/force //test_ref/php/econst/force //test_ref/php/struct/force //test_ref/php/clconst/force //test_ref/php/intf/force" --><span class="type">force</span><!-- /a -->=<span class="number">0</span>) 
END OF OBJECT



__$42|testsuite/parser_tests/PHP_function_3.test$3|php$14|PHP function 3$10868|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 0
inInterface: 0
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 0
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 1
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/PHP_function_3.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{FULLPATH} => /test_suite_bogus_path/PHP_function_3.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => 
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 0
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => handle_raw
$parserState->{functionContents} => {
        $shellfile = escapeshellarg($file);
        $ret = 0;

        /* This is a test comment. */

        if ($force || !file_exists("MiniCache/rotated/$file.jpg")) {
                # $rotint = (int)getrotation($file);
                $fileInfo = getFileInfo($file);
                $rotint = $fileInfo['rotation'];
                // die("AUTOWB: ".$fileInfo['enableAWB']." AUTOEXPOSURE ".$fileInfo['enableAE']."\n");
                if ($fileInfo['enableAWB']) {
                        $awbflag = "-a";
                } else {
                        $awbflag = "-w";
                }
                if ($fileInfo['enableAE']) {
                        $aeflag = "";
                } else {
                        $aeflag = "-W";
                }
                $rot = "";
                if ($rotint) {
                        $rot = "-R $rotint";                }
                // die("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.jpg 2>/dev/null");
                system("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.j
pg 2>/dev/null", $ret);
        }
        return $file.".jpg";
}

$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 31
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => php
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => 
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => 
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 2
$parserState->{onlyComments} => 0
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 0
$parserState->{posstypes} => 
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{prekeywordsodname} => 
$parserState->{prekeywordsodtype} => 
$parserState->{returntype} => function
$parserState->{seenBraces} => 1
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => function
$parserState->{sodname} => handle_raw
$parserState->{sodtype} =>  function
$parserState->{stackFrozen} => 1
$parserState->{startOfDec} => 0
$parserState->{temponlyComments} => 0
$parserState->{typestring} => function
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 31
typelist: function
namelist: handle_raw
posstypes: function method
value: 
returntype:  function
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 0
conformsToList: 
functionContents: {
        $shellfile = escapeshellarg($file);
        $ret = 0;

        /* This is a test comment. */

        if ($force || !file_exists("MiniCache/rotated/$file.jpg")) {
                # $rotint = (int)getrotation($file);
                $fileInfo = getFileInfo($file);
                $rotint = $fileInfo['rotation'];
                // die("AUTOWB: ".$fileInfo['enableAWB']." AUTOEXPOSURE ".$fileInfo['enableAE']."\n");
                if ($fileInfo['enableAWB']) {
                        $awbflag = "-a";
                } else {
                        $awbflag = "-w";
                }
                if ($fileInfo['enableAE']) {
                        $aeflag = "";
                } else {
                        $aeflag = "-W";
                }
                $rot = "";
                if ($rotint) {
                        $rot = "-R $rotint";                }
                // die("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.jpg 2>/dev/null");
                system("/usr/local/bin/dcraw -J -q 3 $rot $awbflag $aeflag -c $shellfile > MiniCache/rotated/$shellfile.j
pg 2>/dev/null", $ret);
        }
        return $file.".jpg";
}

extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => $file
Parsed Param 1 => $force=0
-=: DUMP OF PARSE TREE :=-
+---function
+--- 
+---handle_raw
+---(
|   +---$
|   +---file
|   +---,
|   +--- 
|   +---$
|   +---force
|   +---=
|   +---0
|   +---)
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: PHP function 3
APIUID: //test_ref/doc/header/PHP_function_3.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: <p></p>
LONG ATTRIBUTES: <p></p>
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Function
    NAME: handle_raw
    APIUID: //test_ref/php/func/handle_raw
    ABSTRACT: ""
    DISCUSSION: "<p>Processes a Camera RAW file into a "rotated" JPEG image for further
scaling and manipulation with the usual methods.
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: "default_function_group"
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: " function"
    LINENUM: ""
    CLASS: "HeaderDoc::Function"
    MASTERENUM: ""
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "1"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: <p></p>
    LONG ATTRIBUTES: <p></p>
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: file
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: force
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: <p></p>
        LONG ATTRIBUTES: <p></p>
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: handle_raw (HeaderDoc::Function)
+---function
+--- 
+---handle_raw
+---(
|   +---$
|   +---file
|   +---,
|   +--- 
|   +---$
|   +---force
|   +---=
|   +---0
|   +---)
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: handle_raw (HeaderDoc::Function)
	<span class="keyword">function</span> <!-- a logicalPath="//test_ref/php/instm/handle_raw //test_ref/php/clm/handle_raw //test_ref/php/intfcm/handle_raw //test_ref/php/intfm/handle_raw //test_ref/php/func/handle_raw //test_ref/php/ftmplt/handle_raw //test_ref/php/defn/handle_raw //test_ref/php/macro/handle_raw" --><span class="function">handle_raw</span><!-- /a -->(
	    $<span class="param">file</span>,
	    $<!-- a logicalPath="//test_ref/php/cl/force //test_ref/php/tdef/force //test_ref/php/tag/force //test_ref/php/econst/force //test_ref/php/struct/force //test_ref/php/clconst/force //test_ref/php/intf/force" --><span class="type">force</span><!-- /a -->=<span class="number">0</span>) 
END OF OBJECT



_$3|php$6|parser