FrT;@1|>>0|$15|HeaderDoc::Test%22|$4|CODE$7|COMMENT$7|CPPCODE$15|EXPECTED_RESULT$23|EXPECTED_RESULT_ALLDECS$7|FAILMSG$8|FILENAME$4|LANG$4|NAME$7|SUBLANG$4|TYPE$1051|enum {
    /*! MoreComing indicates to a callback that at least one more result is
     * queued and will be delivered following immediately after this one.
     * When the MoreComing flag is set, applications should not immediately
     * update their UI, because this can result in a great deal of ugly flickering
     * on the screen, and can waste a great deal of CPU time repeatedly updating
     * the screen with content that is then immediately erased, over and over.
     * Applications should wait until until MoreComing is not set, and then
     * update their UI when no more changes are imminent.
     *
     * When MoreComing is not set, that doesn't mean there will be no more
     * answers EVER, just that there are no more answers immediately
     * available right now at this instant. If more answers become available
     * in the future they will be delivered as usual.
     */
    kDNSServiceFlagsMoreComing          = 0x1,


    /*! Placeholder definition, for future use */
    kDNSServiceFlagsSuppressUnusable    = 0x8000
};
$203|/*! Last symbol before curly brace was disappearing in one mostly unimportant
    parse, causing some constant values to not get picked up correctly in
    code that really shouldn't care, but does.
 */
$0|$11505|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 0
inInterface: 0
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 0
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 1
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/enum_5.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{ASLBRACEPRECURSOR} => 
$parserState->{ASLBRACEPRECURSORTAG} => 
$parserState->{FULLPATH} => /test_suite_bogus_path/enum_5.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{afterNL} => 2
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => enum
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 0
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => 
$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 0
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inEnum} => 1
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{inUnion} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 8
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => C
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => ;
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => 
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 1
$parserState->{onlyComments} => 0
$parserState->{parsedParamAtBrace} => ARRAY(OBJID)
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 1
$parserState->{parsedParamStateAtBrace} => ARRAY(OBJID)
$parserState->{posstypes} =>  enum
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{returntype} =>  enum {
    /*! MoreComing indicates to a callback that at least one 
        more result is queued and will be delivered following 
        immediately after this one. When the MoreComing flag is set, applications should not immediately update their UI,    because this can result in a great deal of ugly flickering 
        on the screen,    and can waste a great deal of CPU time repeatedly updating 
        the screen with content that is then immediately erased,    over and over. Applications should wait until until 
        MoreComing is not set,    and then update their UI when no more changes are imminent. 
        When MoreComing is not set, that doesn't mean there will be no more answers EVER,    just that there are no more answers immediately available 
        right now at this instant. If more answers become available 
        in the future they will be delivered as usual. */
         kDNSServiceFlagsMoreComing          = 0x1,
    
    
    /*! Placeholder definition, for future use */
     kDNSServiceFlagsSuppressUnusable    = 0x8000  
$parserState->{seenBraces} => 0
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => 
$parserState->{sodname} => 
$parserState->{sodtype} => 
$parserState->{stackFrozen} => 0
$parserState->{startOfDec} => 1
$parserState->{sublang} => C
$parserState->{temponlyComments} => 0
$parserState->{treePopTwo} => 0
$parserState->{typestring} => enum
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 8
typelist: enum
namelist: 
posstypes:  enum
value: 
returntype:  enum {             kDNSServiceFlagsMoreComing          = 0x1,                 kDNSServiceFlagsSuppressUnusable    = 0x8000  
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 13
conformsToList: 
functionContents: 
extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => kDNSServiceFlagsMoreComing          = 0x1
Parsed Param 1 => kDNSServiceFlagsSuppressUnusable    = 0x8000
-=: DUMP OF PARSE TREE :=-
+---enum
+--- 
+---{
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +--- MoreComing indicates to a callback that at least one more result is
|   |   +---
queued and will be delivered following immediately after this one.
|   |   +---
When the MoreComing flag is set, applications should not immediately
|   |   +---
update their UI, because this can result in a great deal of ugly flickering
|   |   +---
on the screen, and can waste a great deal of CPU time repeatedly updating
|   |   +---
the screen with content that is then immediately erased, over and over.
|   |   +---
Applications should wait until until MoreComing is not set, and then
|   |   +---
update their UI when no more changes are imminent.
|   |   +---[ NEWLINE ]
|   |   +---
When MoreComing is not set, that doesn't mean there will be no more
|   |   +---
answers EVER, just that there are no more answers immediately
|   |   +---
available right now at this instant. If more answers become available
|   |   +---
in the future they will be delivered as usual.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---kDNSServiceFlagsMoreComing
|   +---          
|   +---=
|   +--- 
|   +---0x1
|   +---,
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +--- Placeholder definition, for future use 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---kDNSServiceFlagsSuppressUnusable
|   +---    
|   +---=
|   +--- 
|   +---0x8000
|   +---[ NEWLINE ]
|   +---}
+---;
+--- 
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: enum 5
APIUID: //test_ref/doc/header/enum_5.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: 
LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Enum
    NAME: kDNSServiceFlagsMoreComing
    APIUID: //test_ref/c/tag/kDNSServiceFlagsMoreComing
    ABSTRACT: ""
    DISCUSSION: "<p>Last symbol before curly brace was disappearing in one mostly unimportant
parse, causing some constant values to not get picked up correctly in
code that really shouldn't care, but does.
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Enum"
    MASTERENUM: "1"
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: 
    LONG ATTRIBUTES: 
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: kDNSServiceFlagsMoreComing
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: kDNSServiceFlagsSuppressUnusable
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: kDNSServiceFlagsMoreComing (HeaderDoc::Enum)
+---enum
+--- 
+---{
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---kDNSServiceFlagsMoreComing
|   +---          
|   +---=
|   +--- 
|   +---0x1
|   +---,
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---kDNSServiceFlagsSuppressUnusable
|   +---    
|   +---=
|   +--- 
|   +---0x8000
|   +---[ NEWLINE ]
|   +---}
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: kDNSServiceFlagsMoreComing (HeaderDoc::Enum)
	<span class="keyword">enum</span> {  
	    <!-- a logicalPath="//test_ref/c/econst/kDNSServiceFlagsMoreComing //test_ref/c/data/kDNSServiceFlagsMoreComing //test_ref/c/clconst/kDNSServiceFlagsMoreComing " machineGenerated="true" --><span class="var">kDNSServiceFlagsMoreComing</span><!-- /a --> = <span class="number">0x1</span>,    
	    <!-- a logicalPath="//test_ref/c/econst/kDNSServiceFlagsSuppressUnusable //test_ref/c/data/kDNSServiceFlagsSuppressUnusable //test_ref/c/clconst/kDNSServiceFlagsSuppressUnusable " machineGenerated="true" --><span class="var">kDNSServiceFlagsSuppressUnusable</span><!-- /a --> = <span class="number">0x8000</span> 
	};  
END OF OBJECT



$11505|-=: TOP LEVEL COMMENT PARSE VALUES :=-
inHeader: 0
inClass: 0
inInterface: 0
inCPPHeader: 0
inOCCHeader: 0
inPerlScript: 0
inShellScript: 0
inPHPScript: 0
inJavaSource: 0
inFunctionGroup: 0
inGroup: 0
inFunction: 0
inPDefine: 0
inTypedef: 0
inUnion: 0
inStruct: 0
inConstant: 0
inVar: 0
inEnum: 0
inMethod: 0
inAvailabilityMacro: 0
inUnknown: 1
classType: unknown
inputCounter: 0
blockOffset: 0
fullpath: /test_suite_bogus_path/enum_5.test
-=: BLOCKPARSE PARSER STATE KEYS :=-
$parserState->{ASLBRACEPRECURSOR} => 
$parserState->{ASLBRACEPRECURSORTAG} => 
$parserState->{FULLPATH} => /test_suite_bogus_path/enum_5.test
$parserState->{NEXTTOKENNOCPP} => 0
$parserState->{afterNL} => 2
$parserState->{availability} => 
$parserState->{backslashcount} => 0
$parserState->{basetype} => enum
$parserState->{bracePending} => 0
$parserState->{callbackIsTypedef} => 0
$parserState->{callbackName} => 
$parserState->{callbackNamePending} => -1
$parserState->{categoryClass} => 
$parserState->{classtype} => 
$parserState->{freezeStack} => ARRAY(OBJID)
$parserState->{freezereturn} => 1
$parserState->{frozensodname} => 
$parserState->{functionReturnsCallback} => 0
$parserState->{hollow} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{inBrackets} => 0
$parserState->{inChar} => 0
$parserState->{inClass} => 0
$parserState->{inComment} => 0
$parserState->{inEnum} => 1
$parserState->{inInlineComment} => 0
$parserState->{inMacro} => 0
$parserState->{inMacroLine} => 0
$parserState->{inOperator} => 0
$parserState->{inPrivateParamTypes} => 0
$parserState->{inString} => 0
$parserState->{inTemplate} => 0
$parserState->{inUnion} => 0
$parserState->{initbsCount} => 0
$parserState->{inputCounter} => 8
$parserState->{kr_c_function} => 0
$parserState->{kr_c_name} => 
$parserState->{lang} => C
$parserState->{lastTreeNode} => HeaderDoc::ParseTree=HASH(OBJID)
$parserState->{lastsymbol} => ;
$parserState->{leavingComment} => 0
$parserState->{macroNoTrunc} => 1
$parserState->{name} => 
$parserState->{namePending} => 0
$parserState->{noInsert} => 0
$parserState->{occmethod} => 0
$parserState->{occmethodname} => 
$parserState->{occparmlabelfound} => 1
$parserState->{onlyComments} => 0
$parserState->{parsedParamAtBrace} => ARRAY(OBJID)
$parserState->{parsedParamList} => ARRAY(OBJID)
$parserState->{parsedParamParse} => 1
$parserState->{parsedParamStateAtBrace} => ARRAY(OBJID)
$parserState->{posstypes} =>  enum
$parserState->{posstypesPending} => 0
$parserState->{pplStack} => ARRAY(OBJID)
$parserState->{preEqualsSymbol} => 
$parserState->{preTemplateSymbol} => 
$parserState->{returntype} =>  enum {
    /*! MoreComing indicates to a callback that at least one 
        more result is queued and will be delivered following 
        immediately after this one. When the MoreComing flag is set, applications should not immediately update their UI,    because this can result in a great deal of ugly flickering 
        on the screen,    and can waste a great deal of CPU time repeatedly updating 
        the screen with content that is then immediately erased,    over and over. Applications should wait until until 
        MoreComing is not set,    and then update their UI when no more changes are imminent. 
        When MoreComing is not set, that doesn't mean there will be no more answers EVER,    just that there are no more answers immediately available 
        right now at this instant. If more answers become available 
        in the future they will be delivered as usual. */
         kDNSServiceFlagsMoreComing          = 0x1,
    
    
    /*! Placeholder definition, for future use */
     kDNSServiceFlagsSuppressUnusable    = 0x8000  
$parserState->{seenBraces} => 0
$parserState->{seenMacroPart} => 0
$parserState->{seenTilde} => 0
$parserState->{simpleTDcontents} => 
$parserState->{simpleTypedef} => 0
$parserState->{sodclass} => 
$parserState->{sodname} => 
$parserState->{sodtype} => 
$parserState->{stackFrozen} => 0
$parserState->{startOfDec} => 1
$parserState->{sublang} => C
$parserState->{temponlyComments} => 0
$parserState->{treePopTwo} => 0
$parserState->{typestring} => enum
$parserState->{value} => 
$parserState->{valuepending} => 0
-=: BLOCKPARSE RETURN VALUES :=-
newcount: 8
typelist: enum
namelist: 
posstypes:  enum
value: 
returntype:  enum {             kDNSServiceFlagsMoreComing          = 0x1,                 kDNSServiceFlagsSuppressUnusable    = 0x8000  
pridec: 
simpleTDcontents: 
bpavail: 
blockOffset: 13
conformsToList: 
functionContents: 
extendsClass: 
implementsClass: 
-=: LIST OF PARSED PARAMETERS :=-
Parsed Param 0 => kDNSServiceFlagsMoreComing          = 0x1
Parsed Param 1 => kDNSServiceFlagsSuppressUnusable    = 0x8000
-=: DUMP OF PARSE TREE :=-
+---enum
+--- 
+---{
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +--- MoreComing indicates to a callback that at least one more result is
|   |   +---
queued and will be delivered following immediately after this one.
|   |   +---
When the MoreComing flag is set, applications should not immediately
|   |   +---
update their UI, because this can result in a great deal of ugly flickering
|   |   +---
on the screen, and can waste a great deal of CPU time repeatedly updating
|   |   +---
the screen with content that is then immediately erased, over and over.
|   |   +---
Applications should wait until until MoreComing is not set, and then
|   |   +---
update their UI when no more changes are imminent.
|   |   +---[ NEWLINE ]
|   |   +---
When MoreComing is not set, that doesn't mean there will be no more
|   |   +---
answers EVER, just that there are no more answers immediately
|   |   +---
available right now at this instant. If more answers become available
|   |   +---
in the future they will be delivered as usual.
|   |   +---[ NEWLINE ]
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---kDNSServiceFlagsMoreComing
|   +---          
|   +---=
|   +--- 
|   +---0x1
|   +---,
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---/*
|   |   +---!
|   |   +--- Placeholder definition, for future use 
|   |   +---*/
|   +---[ NEWLINE ]
|   +---    
|   +---kDNSServiceFlagsSuppressUnusable
|   +---    
|   +---=
|   +--- 
|   +---0x8000
|   +---[ NEWLINE ]
|   +---}
+---;
+--- 
+---[ NEWLINE ]
-=: COMPUTED VALUE :=-
SUCCESS: 0
VALUE: 0
-=: CPP CHANGES :=-
NO CPP CHANGES
-=: FOUND MATCH :=-
1
-=: NAMED OBJECTS :=-
TREE COUNT: 0
INDEX GROUP: 
IS BLOCK: 
OBJECT TYPE: HeaderDoc::Header
NAME: enum 5
APIUID: //test_ref/doc/header/enum_5.test
ABSTRACT: ""
DISCUSSION: "<p></p>"
UPDATED: ""
COPYRIGHT: ""
HTMLMETA: ""
PRIVATEDECLARATION: ""
GROUP: ""
INDEXGROUP: ""
THROWS: ""
XMLTHROWS: ""
UPDATED: ""
LINKAGESTATE: ""
ACCESSCONTROL: ""
AVAILABILITY: ""
LINKUID: ""
ORIGCLASS: ""
ISDEFINE: ""
ISTEMPLATE: ""
VALUE: "UNKNOWN"
RETURNTYPE: ""
LINENUM: ""
CLASS: "HeaderDoc::Header"
MASTERENUM: ""
APIREFSETUPDONE: "1"
TPCDONE: ""
NOREGISTERUID: ""
SUPPRESSCHILDREN: ""
NAMELINE_DISCUSSION: ""
HIDEDOC: ""
HIDESINGLETONS: ""
HIDECONTENTS: ""
MAINOBJECT: ""
LIST ATTRIBUTES: 
SHORT ATTRIBUTES: 
LONG ATTRIBUTES: 
    TREE COUNT: 1
    INDEX GROUP: 
    IS BLOCK: 
    OBJECT TYPE: HeaderDoc::Enum
    NAME: kDNSServiceFlagsMoreComing
    APIUID: //test_ref/c/tag/kDNSServiceFlagsMoreComing
    ABSTRACT: ""
    DISCUSSION: "<p>Last symbol before curly brace was disappearing in one mostly unimportant
parse, causing some constant values to not get picked up correctly in
code that really shouldn't care, but does.
"
    UPDATED: ""
    COPYRIGHT: ""
    HTMLMETA: ""
    PRIVATEDECLARATION: ""
    GROUP: ""
    INDEXGROUP: ""
    THROWS: ""
    XMLTHROWS: ""
    UPDATED: ""
    LINKAGESTATE: ""
    ACCESSCONTROL: ""
    AVAILABILITY: ""
    LINKUID: ""
    ORIGCLASS: ""
    ISDEFINE: ""
    ISTEMPLATE: ""
    VALUE: "UNKNOWN"
    RETURNTYPE: ""
    LINENUM: ""
    CLASS: "HeaderDoc::Enum"
    MASTERENUM: "1"
    APIREFSETUPDONE: "1"
    TPCDONE: ""
    NOREGISTERUID: ""
    SUPPRESSCHILDREN: "0"
    NAMELINE_DISCUSSION: ""
    HIDEDOC: ""
    HIDESINGLETONS: ""
    HIDECONTENTS: ""
    MAINOBJECT: ""
    LIST ATTRIBUTES: 
    SHORT ATTRIBUTES: 
    LONG ATTRIBUTES: 
    PARSED PARAMETERS:
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: kDNSServiceFlagsMoreComing
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
        TREE COUNT: 0
        INDEX GROUP: 
        IS BLOCK: 
        OBJECT TYPE: HeaderDoc::MinorAPIElement
        NAME: kDNSServiceFlagsSuppressUnusable
        TYPE: 
        APIUID: 
        ABSTRACT: ""
        DISCUSSION: "<p></p>"
        UPDATED: ""
        COPYRIGHT: ""
        HTMLMETA: ""
        PRIVATEDECLARATION: ""
        GROUP: ""
        INDEXGROUP: ""
        THROWS: ""
        XMLTHROWS: ""
        UPDATED: ""
        LINKAGESTATE: ""
        ACCESSCONTROL: ""
        AVAILABILITY: ""
        LINKUID: ""
        ORIGCLASS: ""
        ISDEFINE: ""
        ISTEMPLATE: ""
        VALUE: "UNKNOWN"
        RETURNTYPE: ""
        LINENUM: ""
        CLASS: "HeaderDoc::MinorAPIElement"
        MASTERENUM: ""
        APIREFSETUPDONE: "1"
        TPCDONE: ""
        NOREGISTERUID: ""
        SUPPRESSCHILDREN: ""
        NAMELINE_DISCUSSION: ""
        HIDEDOC: ""
        HIDESINGLETONS: ""
        HIDECONTENTS: ""
        MAINOBJECT: ""
        LIST ATTRIBUTES: 
        SHORT ATTRIBUTES: 
        LONG ATTRIBUTES: 
-=: NAMED OBJECT PARSE TREES :=-
OBJECT: kDNSServiceFlagsMoreComing (HeaderDoc::Enum)
+---enum
+--- 
+---{
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---kDNSServiceFlagsMoreComing
|   +---          
|   +---=
|   +--- 
|   +---0x1
|   +---,
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---[ NEWLINE ]
|   +---    
|   +---kDNSServiceFlagsSuppressUnusable
|   +---    
|   +---=
|   +--- 
|   +---0x8000
|   +---[ NEWLINE ]
|   +---}
+---;
+--- 
+---[ NEWLINE ]
END OF OBJECT



-=: HTML OUTPUT OF PARSE TREES :=-
OBJECT: kDNSServiceFlagsMoreComing (HeaderDoc::Enum)
	<span class="keyword">enum</span> {  
	    <!-- a logicalPath="//test_ref/c/econst/kDNSServiceFlagsMoreComing //test_ref/c/data/kDNSServiceFlagsMoreComing //test_ref/c/clconst/kDNSServiceFlagsMoreComing " machineGenerated="true" --><span class="var">kDNSServiceFlagsMoreComing</span><!-- /a --> = <span class="number">0x1</span>,    
	    <!-- a logicalPath="//test_ref/c/econst/kDNSServiceFlagsSuppressUnusable //test_ref/c/data/kDNSServiceFlagsSuppressUnusable //test_ref/c/clconst/kDNSServiceFlagsSuppressUnusable " machineGenerated="true" --><span class="var">kDNSServiceFlagsSuppressUnusable</span><!-- /a --> = <span class="number">0x8000</span> 
	};  
END OF OBJECT



_$88|/Users/dg/headerdoc-techpubs/Modules/HeaderDoc//../../testsuite/parser_tests/enum_5.test$1|C$6|enum 5$1|C$6|parser